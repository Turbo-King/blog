[{"categories":["Technology"],"content":"雪花算法","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"前言 系统唯一ID是我们在设计一个系统的时候常常会遇见的问题，也常常为这个问题而纠结。 这篇文章就是给大家提供一个生成分布式唯一全局id生成方案的思路，希望可以共勉大家。 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:1:0","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"问题 为什么需要分布式全局唯一ID以及分布式ID的业务需求 在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识，如在美团点评的金融、支付、餐饮、酒店 猫眼电影等产品的系统中数据逐渐增长，对数据库分库分表后需要有一个唯一ID来标识一条数据或信息； 特别是订单、骑手、优惠券都需要有唯一ID做标识 此时一个能够生成全局唯一ID的系统是非常必要的 ID生成规则部分硬性要求 全局唯一 趋势递增 在 MySQL 的 InnoDB 引擎中使用的是聚集索引，由于多数 RDBMS 使用 Btree 的数据结构来存储索引，在主键的选择上面我们应该尽量使用有序的主键保证写入性能 单调递增 保证下一个ID一定大于上一个ID，例如事务版本号、IM增量消息、排序等特殊需求 信息安全 如果ID是连续，恶意用户的爬取工作就非常容易做了，直接按照顺序下载指定URL即可，如果是订单号就危险了，竞争对手可以直接知道我们一天的单量，所以在一些应用场景下，需要ID无规则不规则，让竞争对手不好猜 含时间戳 一样能够快速在开发中了解这个分布式ID什么时候生成的 ID号生成系统的可用性要求 高可用 发布一个获取分布式ID请求，服务器就要保证 99.999% 的情况下给我创建一个唯一分布式ID 低延迟 发一个获取分布式ID的请求，服务器就要快，极速 高QPS 例如并发一口气10万个创建分布式ID请求同时杀过来，服务器要顶得住且一下子成功创建10万个分布式ID ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:2:0","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"通用解决方案 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:3:0","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"UUID 介绍 UUID.randomUUID(), UUID的标准型包含32个16进制数字，以连字号分为五段，形式为 8-4-4-4-12的36个字符，性能非常高，本地生成，没有网络消耗。 UUID组成部分 当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。 时钟序列。 全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。 存在问题 入数据库性能差，因为UUID是无序的 无序，无法预测他的生成顺序，不能生成递增有序的数字 首先分布式id一般都会作为逐渐，但是按照mysql官方推荐主键尽量越短越好，UUID每一个都很长，所以不是很推荐。 主键，ID作为主键时，在特定的环境下会存在一些问题 比如做DB主键的场景下，UUID就非常不适用MySQL官方有明确的说明 索引，B+树索引的分裂 既然分布式ID是主键，然后主键是包含索引的，而mysql的索引是通过B+树来实现的，每一次新的UUID数据的插入，为了查询的优化，都会对索引底层的B+树进行修改，因为UUID数据是无序的，所以每一次UUID数据的插入都会对主键的B+树进行很大的修改，这一点很不好，插入完全无序，不但会导致一些中间节点产生分裂，也会白白创造出很多不饱和的节点，这样大大降低了数据库插入的性能。 UUID只能保证全局唯一性，不满足后面的趋势递增，单调递增 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:3:1","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"数据库自增主键 单机 在分布式里面，数据库的自增ID机制的主要原理是：数据库自增ID和mysql数据库的replace into实现的，这里的replace into跟insert功能 类似，不同点在于：replace into首先尝试插入数据列表中，如果发现表中已经有此行数据（根据主键或唯一索引判断）则先删除，在插入，否则直接插入新数据。 REPLACE INTO的含义是插入一条记录，如果表中唯一索引的值遇到冲突，则替换老数据 ICREATE TABLE t_test( id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, state CHAR (1) NOT NULL DEFAULT '', UNIQUE KEY state (state) ) REPLACE INTO t_test(state) values('b'); select LAST_INSERT_ID(); 我们每次插入的时候，发现都会把原来的数据给替换，并且ID也会增加 这就满足了 递增性 单调性 唯一性 在分布式情况下，并且并发量不多的情况，可以使用这种方案来解决，获得一个全局的唯一ID 分布式集群 那数据库自增ID机制适合做分布式ID吗？ 答案是不太适合 系统水平扩展比较困难，比如定义好步长和机器台数之后，如果要添加机器该怎么办，假设现在有一台机器发号是：1,2,3,4,5,（步长是1），这个时候需要扩容机器一台，可以这样做：把第二台机器的初始值设置得比第一台超过很多，貌似还好，但是假设线上如果有100台机器，这个时候扩容要怎么做，简直是噩梦，所以系统水平扩展方案复杂难以实现。 数据库压力还是很大，每次获取ID都得读写一次数据库，非常影响性能，不符合分布式ID里面的延迟低和高QPS的规则（在高并发下，如果都去数据库里面获取ID，那是非常影响性能的） ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:3:2","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"基于Redis生成全局ID策略 单机 因为Redis是单线程，天生保证原子性，可以使用原子操作 INCR 和 INCRBY 来实现 INCRBY：设置增长步长 分布式集群 注意：在Redis集群情况下，同样和MySQL一样需要设置不同的增长步长，同时key一定要设置有效期，可以使用Redis集群来获取更高的吞吐量。 假设一个集群中有5台Redis，可以初始化每台Redis的值分别是 1,2,3,4,5 ， 然后设置步长都是5 各个Redis生成的ID为： A：1 6 11 16 21 B：2 7 12 17 22 C：3 8 13 18 23 D：4 9 14 19 24 E：5 10 15 20 25 但是存在的问题是，就是Redis集群的维护和保养比较麻烦，配置麻烦。因为要设置单点故障，哨兵值守 但是主要是的问题就是，为了一个ID，却需要引入整个Redis集群，有种杀鸡焉用牛刀的感觉 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:3:3","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"雪花算法 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:4:0","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"介绍 Twitter的分布式自增ID算法：Snowflake 最初Twitter把存储系统从MySQL迁移到Cassandra（由Facebook开发一套开源分布式NoSQL数据库系统）因为Cassandra没有顺序ID生成机制，所有开发了这样一套全局唯一ID生成服务。 Twitter的分布式雪花算法SnowFlake，经测试SnowFlake每秒可以产生26万个自增可排序的ID twitter的SnowFlake生成ID能够按照时间有序生成 SnowFlake算法生成ID的结果是一个64Bit大小的整数，为一个Long型（转换成字符串后长度最多19） 分布式系统内不会产生ID碰撞（由datacenter 和 workerID做区分）并且效率较高 全局唯一ID的基本要求 在分布式环境下，必须全局唯一性 一般都需要单调递增，因为一般唯一ID都会存在数据库，而InnoDB的特性就是将内容存储在主键索引上的叶子节点，而且是从左往右递增的，所有考虑到数据库性能，一般生成ID也最好是单调递增的。为了防止ID冲突可以使用36位UUID，但是UUID有一些缺点，首先是它相对比较长，并且另外UUID一般是无序的 可能还会需要无规则，因为如果使用唯一ID作为订单号这种，为了不让别人知道一天的订单量多少，就需要这种规则 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:4:1","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"结构 雪花算法的几个核心组成部分 在Java中64bit的证书是long类型，所以在SnowFlake算法生成的ID就是long类存储的 雪花算法核心组成部分 **第一部分** 二进制中最高位是符号位，1表示负数，0表示正数。生成的ID一般都是用整数，所以最高位固定为0。 **第二部分** 第二部分是41bit时间戳位，用来记录时间戳，毫秒级 41位可以表示 2^41 -1 个数字 如果只用来表示正整数，可以表示的范围是：0 - 2^41 -1，减1是因为可以表示的数值范围是从0开始计算的，而不是从1。 也就是说41位可以表示 2^41 - 1 毫秒的值，转换成单位年则是 69.73年 **第三部分** 第三部分为工作机器ID，10Bit用来记录工作机器ID 可以部署在2^10 = 1024个节点，包括5位 datacenterId（数据中心，机房） 和 5位 workerID（机器码） 5位可以表示的最大正整数是 2 ^ 5 = 31个数字，来表示不同的数据中心 和 机器码 **第四部分** 12位bit可以用来表示的正整数是 2^12 = 4095，即可以用0 1 2 … 4094 来表示同一个机器同一个时间戳内产生的4095个ID序号。 SnowFlake可以保证所有生成的ID按时间趋势递增，整个分布式系统内不会产生重复ID，因为有 datacenterId 和 workerId 来做区分 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:4:2","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"实现 雪花算法是由 scala 算法编写的，有人使用java实现，github地址 /** * twitter的snowflake算法 -- java实现 * * @author beyond */ public class SnowFlake { /** * 起始的时间戳 */ private final static long START_STMP = 1480166465631L; /** * 每一部分占用的位数 */ private final static long SEQUENCE_BIT = 12; //序列号占用的位数 private final static long MACHINE_BIT = 5; //机器标识占用的位数 private final static long DATACENTER_BIT = 5;//数据中心占用的位数 /** * 每一部分的最大值 */ private final static long MAX_DATACENTER_NUM = -1L ^ (-1L \u003c\u003c DATACENTER_BIT); private final static long MAX_MACHINE_NUM = -1L ^ (-1L \u003c\u003c MACHINE_BIT); private final static long MAX_SEQUENCE = -1L ^ (-1L \u003c\u003c SEQUENCE_BIT); /** * 每一部分向左的位移 */ private final static long MACHINE_LEFT = SEQUENCE_BIT; private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT; private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT; private long datacenterId; //数据中心 private long machineId; //机器标识 private long sequence = 0L; //序列号 private long lastStmp = -1L;//上一次时间戳 public SnowFlake(long datacenterId, long machineId) { if (datacenterId \u003e MAX_DATACENTER_NUM || datacenterId \u003c 0) { throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\"); } if (machineId \u003e MAX_MACHINE_NUM || machineId \u003c 0) { throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\"); } this.datacenterId = datacenterId; this.machineId = machineId; } /** * 产生下一个ID * * @return */ public synchronized long nextId() { long currStmp = getNewstmp(); if (currStmp \u003c lastStmp) { throw new RuntimeException(\"Clock moved backwards. Refusing to generate id\"); } if (currStmp == lastStmp) { //相同毫秒内，序列号自增 sequence = (sequence + 1) \u0026 MAX_SEQUENCE; //同一毫秒的序列数已经达到最大 if (sequence == 0L) { currStmp = getNextMill(); } } else { //不同毫秒内，序列号置为0 sequence = 0L; } lastStmp = currStmp; return (currStmp - START_STMP) \u003c\u003c TIMESTMP_LEFT //时间戳部分 | datacenterId \u003c\u003c DATACENTER_LEFT //数据中心部分 | machineId \u003c\u003c MACHINE_LEFT //机器标识部分 | sequence; //序列号部分 } private long getNextMill() { long mill = getNewstmp(); while (mill \u003c= lastStmp) { mill = getNewstmp(); } return mill; } private long getNewstmp() { return System.currentTimeMillis(); } public static void main(String[] args) { SnowFlake snowFlake = new SnowFlake(2, 3); for (int i = 0; i \u003c (1 \u003c\u003c 12); i++) { System.out.println(snowFlake.nextId()); } } } ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:4:3","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"总结 雪花算法优缺点 优点 毫秒数在高维，自增序列在低位，整个ID都是趋势递增的 不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的 可以根据自身业务特性分配bit位，非常灵活 缺点 依赖机器时钟，如果机器时钟回拨，会导致重复ID生成 在单机上是递增的，但由于涉及到分布式环境，每台机器上的时钟不可能完全同步，有时候会出现不是全局递增的情况，此缺点可以认为无所谓，一般分布式ID只要求趋势递增，并不会严格要求递增，90%的需求只要求趋势递增。 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:4:4","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Technology"],"content":"其它补充 为了解决时钟回拨问题，导致ID重复，后面有人专门提出了解决的方案 百度开源的分布式唯一ID生成器 UidGenerator Leaf - 美团点评分布式ID生成系统 ","date":"2023-10-11","objectID":"/blog/en/20231011_globaluniqueid/:4:5","tags":["分布式全局ID","高并发","单机"],"title":"分布式全局唯一ID","uri":"/blog/en/20231011_globaluniqueid/"},{"categories":["Go"],"content":"Go基础语法和常用特性解析","date":"2023-08-05","objectID":"/blog/en/go/","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"Go基础语法和常用特性解析 Go 语言入门指南：基础语法和常用特性解析 Go 语言是由 Google 在 2007 年开发的一种新的编程语言，它具有简单、快速、可靠和安全等优点，已经成为了软件开发领域的一种重要工具。本文将介绍 Go 语言的基础语法和常用特性，并提供一些使用示例，帮助你快速入门 Go 语言。 ","date":"2023-08-05","objectID":"/blog/en/go/:0:0","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"一、基础语法 ","date":"2023-08-05","objectID":"/blog/en/go/:1:0","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"1. 变量和类型 在 Go 语言中，变量必须先声明后才能使用。声明变量时需要指定变量类型和变量名。 // 声明整型变量 var num int = 10 // 声明浮点型变量 var decimal float64 = 3.14 除了整型和浮点型，Go 语言还支持其他类型，如字符串、布尔型、数组、切片、结构体等。 ","date":"2023-08-05","objectID":"/blog/en/go/:1:1","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"2. 赋值和运算符 Go 语言支持常用的算术运算符、比较运算符、逻辑运算符和位运算符。可以使用等号（=）给变量赋值。 Copy code // 计算 1+1 的结果 var sum int = 1 + 1 // 比较两个数是否相等 if num == 10 { fmt.Println(\"num is equal to 10\") } // 逻辑或运算符 if num == 1 || num == 2 { fmt.Println(\"num is either 1 or 2\") } ","date":"2023-08-05","objectID":"/blog/en/go/:1:2","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"3. 控制流和函数 Go 语言支持 if、else、else if 和 for 等控制流语句。还可以定义函数来封装常用的代码块。 // 判断一个数是否是偶数 func isEven(num int) bool { return num%2 == 0 } // 循环打印前 n 个斐波那契数列 func fibonacci(n int) { if n \u003c= 1 { return } fibonacci(n-1) + fibonacci(n-2) } // 函数返回值类型 func max(x, y int) int { if x \u003e y { return x } return y } ","date":"2023-08-05","objectID":"/blog/en/go/:1:3","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"常用语法功能 字符串声明和使用 字符串声明语法为：const( 字符串名 = \"字符串值\")，例如：const hello = \"Hello, world!\"。 字符串使用语法为：字符串名，例如：hello。 函数声明和调用 函数声明语法为：func 函数名(参数列表) 返回值类型，例如：func add(x, y int) int { return x + y }。 函数调用语法为：函数名(参数列表)，例如：result = add(1, 2)。 控制流程 go语言支持多种控制流程结构，包括if语句、for循环、range循环、函数和switch语句等。 if语句语法为：if 条件语句 { 条件为真时的语句 } else { 条件为假时的语句 }， 例如：if x \u003e 0 { // x是正数 } else { // x是负数或零 }。 for循环语法为：for 初始化语句; 条件语句; 更新语句 { 循环体 }， 例如：for i := 0; i \u003c 10; i++ { // 打印i }。 range循环语法为：for 变量名 := 初始化表达式; 条件语句; 变量名++ { 循环体 }， 例如：for i := 0; i \u003c 10; i++ { // 打印i }。 函数语法为：func 函数名(参数列表) 返回值类型 { 函数体 }， 例如：func max(x, y int) int { if x \u003e y { return x } else { return y } }。 switch语句语法为：switch 表达式 { case 常量1: 语句1; case 常量2: 语句2; ... default: 语句 default }， 例如：switch x := 5; x { case 1: fmt.Println(\"x是1\") case 2: fmt.Println(\"x是2\") default: fmt.Println(\"x不是1也不是2\") }。 ","date":"2023-08-05","objectID":"/blog/en/go/:1:4","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"二、常用特性 ","date":"2023-08-05","objectID":"/blog/en/go/:2:0","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"1. 切片和切片操作 切片是一种数据结构，它可以动态地分配内存，并且可以快速地进行索引和操作。切片操作包括：初始化、切片大小的改变、切片元素的添加和删除、切片元素的查找和替换等。 ","date":"2023-08-05","objectID":"/blog/en/go/:2:1","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"2. 字典和字典操作 字典是一种键值对的数据结构，它可以快速地进行查找和删除操作。字典操作包括：初始化、字典大小的改变、字典元素的添加和删除、字典元素的查找和替换等。 ","date":"2023-08-05","objectID":"/blog/en/go/:2:2","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"3. 函数和函数调用 go语言支持函数式编程风格，函数可以作为参数传递，也可以作为返回值返回。函数调用可以使用点号或者括号，点号用于调用包内的函数，括号用于调用包外的函数。 ","date":"2023-08-05","objectID":"/blog/en/go/:2:3","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"4. 接口和接口调用 go语言支持接口编程，接口可以被多个类型实现，接口调用可以使用点号或者括号，点号用于调用包内的接口方法，括号用于调用包外的接口方法。 ","date":"2023-08-05","objectID":"/blog/en/go/:2:4","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"5. 并发和协程 Go 语言支持并发和协程，可以使用 Goroutine 和 Channel 实现并发编程。 // 创建一个 Goroutine go func() { fmt.Println(\"Hello, world!\") }() // 通道传递数据 var ch = make(chan int) go func() { ch \u003c- 1 }() // 接收通道数据 fmt.Println(\u003c-ch) ","date":"2023-08-05","objectID":"/blog/en/go/:2:5","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"6. 错误处理 Go 语言支持错误处理，可以使用 error 类型来表示错误，并使用 panic 和 recover 函数来处理错误。 // 发送数据到网络通道 func sendToChannel(conn net.Conn) error { _, err := conn.Write([]byte(\"Hello, world!\")) return err } // recover 函数捕捉 panic 生成的错误 func main() { defer func() { recover() fmt.Println(\"Recovered from panic\") }() // panic 生成错误 panic(\"This is a panic\") } ","date":"2023-08-05","objectID":"/blog/en/go/:2:6","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Go"],"content":"7. 包和模块 Go 语言支持包和模块，可以使用 import 语句导入需要使用的包和模块，并使用 Exported 函数获取包内的可导出变量和函数。 // 导入标准库 import ( \"fmt\" \"math\" ) // 导入自定义包 import \"path/filepath\" // 获取导入包内的可导出变量和函数 func max(x, y int) int { if x \u003e y { return x } return y } // 打印结果 func main() { fmt.Println(max(1, 2)) fmt.Println(math.Sqrt(4)) filepath.Println(\"hello\") } ","date":"2023-08-05","objectID":"/blog/en/go/:2:7","tags":["Go","study"],"title":"Go基础语法和常用特性解析","uri":"/blog/en/go/"},{"categories":["Java"],"content":"Lambda表达式","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"📝介绍 Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。 Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。 使用 Lambda 表达式可以使代码变的更加简洁紧凑。 Lambda表达式特性 可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。 可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。 可选的大括号：如果主体包含了一个语句，就不需要使用大括号。 可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。 ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:1:0","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"🌈使用场景 ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:0","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"遍历 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); for (String fruit : list) { System.out.println(fruit); } ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); list.forEach(fruit -\u003e System.out.println(fruit)); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:1","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"排序 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Collections.sort(list, new Comparator() { public int compare(String s1, String s2) { return s1.compareTo(s2); } }); ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Collections.sort(list, (s1, s2) -\u003e s1.compareTo(s2)); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:2","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"过滤 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List filteredList = new ArrayList(); for (String fruit : list) { if (fruit.startsWith(\"a\")) { filteredList.add(fruit); } } ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List filter = list.stream() .filter(fruit -\u003e fruit.startsWith(\"a\")) .collect(Collectors.toList()); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:3","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"映射 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List lengths = new ArrayList(); for (String fruit : list) { lengths.add(fruit.length()); } ✅ 使用Lambda表达式 List\u003cString\u003e list1 = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List\u003cInteger\u003elengths=list1.stream() .map(String::length) .collect(Collectors.toList()); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:4","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"规约 ❌ 常规方法 List\u003cInteger\u003e list = Arrays.asList(1, 2, 3, 4, 5); int sum = 0; for (int i : list) { sum += i; } ✅ 使用Lambda表达式 List\u003cInteger\u003e list = Arrays.asList(1, 2, 3, 4, 5); int sum = list.stream().reduce(0, Integer::sum); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:5","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"分组 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Map\u003cInteger, List\u003cString\u003e\u003e grouped = new HashMap\u003cInteger, List\u003cString\u003e\u003e(); for (String fruit : list) { int length = fruit.length(); if (!grouped.containsKey(length)) { grouped.put(length, new ArrayList()); } grouped.get(length).add(fruit); } ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Map\u003cInteger, List\u003cString\u003e\u003e grouped = list.stream() .collect(Collectors.groupingBy(String::length)); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:6","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"函数式接口实现 ❌ 常规方法 public interface MyInterface { public void doSomething(String input); } MyInterface myObject = new MyInterface() { public void doSomething(String input) { System.out.println(input); } }; myObject.doSomething(\"Hello World\"); ✅ 使用Lambda表达式 public interface MyInterface { public void doSomething(String input); } MyInterface myObject = input -\u003e System.out.println(input); myObject.doSomething(\"Hello World\"); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:7","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"线程创建 ❌ 常规方法 Thread thread = new Thread(new Runnable() { public void run() { System.out.println(\"Thread is running.\"); } }); thread.start(); ✅ 使用Lambda表达式 Thread thread = new Thread(() -\u003e System.out.println(\"Thread is running.\")); thread.start(); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:8","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"Optional操作 ❌ 常规方法 String str = \"Hello World\"; if (str != null) { System.out.println(str.toUpperCase()); } ✅ 使用Lambda表达式 Optional.of(\"hello\") .map(String::toUpperCase) .ifPresent(System.out::println); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:9","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"Stream流水线操作 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List\u003cString\u003e filteredList = new ArrayList(); for (String fruit : list) { if (fruit.startsWith(\"a\")) { filteredList.add(fruit.toUpperCase()); } } Collections.sort(filteredList); ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List\u003cString\u003e filteredList = list.stream() .filter(fruit -\u003e fruit.startsWith(\"a\")) .map(String::toUpperCase) .sorted() .collect(Collectors.toList()); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:10","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"🏆总结 当你需要一个仅在一个地方有效的函数, 并且只做一件事情，那么就用 lambda。比如，lambda经常用在 sorted 函数的 key 参数中。所以，可以认为，lambda的主要目的是为了减少单行函数的定义。 lambda不会提高代码执行效率，它只是定义了一个匿名函数，使我们的代码更加简洁，而且在某种程度上可读性更高。 Note 如果可以使用for…if来完成的，坚决不用lambda。 如果使用lambda，lambda内不要包含循环，否则，最好定义函数来完成，使代码获得可重用性和更好的可读性。 ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:3:0","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"剑指Offer","date":"2023-05-15","objectID":"/blog/en/20230515_code/","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"剑指Offer ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:0:0","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"简单 ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:0","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"斐波那契数列 描述 输入描述： 一个正整数n 返回值描述： 输出一个正整数。 示例1 输入：4 返回值：3 说明：根据斐波那契数列的定义可知 fib(1)=1,fib(2)=1,fib(3)=fib(3-1)+fib(3-2)=2,fib(4)=fib(4-1)+fib(4-2)=3，所以答案为3。 示例2 输入：1 返回值：1 示例3 输入：2 返回值：1 代码实现 public class Solution { public int Fibonacci(int n) { if(n==1||n==2)return 1; int[] a=new int[n+1]; a[1]=a[2]=1; for(int i=3;i\u003c=n;i++){ a[i]=a[i-1]+a[i-2]; } return a[n]; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:1","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"数组中重复的数字 描述 示例1 输入：[2,3,1,0,2,5,3] 返回值：2 说明：2或3都是对的 代码实现 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param numbers int整型一维数组 * @return int整型 */ public int duplicate (int[] numbers) { // write code here int tep = 0; for(int i = 0;i \u003c numbers.length;i++){ tep = numbers[i]; int count = 0; for(int j = 0; j\u003c numbers.length;j++){ if(tep==numbers[j]){ count++; if(count\u003e1){ return tep; } } } } return -1; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:2","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"替换空格 描述 示例1 输入：\"We Are Happy\" 返回值：\"We%20Are%20Happy\" 示例2 输入：\" \" 返回值：\"%20\" 代码实现 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param s string字符串 * @return string字符串 */ public String replaceSpace (String s) { // write code here return s.replace(\" \", \"%20\"); } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:3","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"从尾到头打印链表 描述 示例1 输入：{1,2,3} 返回值：[3,2,1] 示例2 输入：{67,0,24,58} 返回值：[58,24,0,67] 代码实现 /** * public class ListNode { * int val; * ListNode next = null; * * ListNode(int val) { * this.val = val; * } * } * */ import java.util.ArrayList; public class Solution { public ArrayList\u003cInteger\u003e printListFromTailToHead(ListNode listNode) { ArrayList\u003cInteger\u003e list = new ArrayList\u003c\u003e(); ListNode tmp = listNode; while(tmp!=null){ list.add(0,tmp.val); tmp = tmp.next; } return list; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:4","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"用两个栈实现队列 描述 示例1 输入：[\"PSH1\",\"PSH2\",\"POP\",\"POP\"] 返回值：1,2 说明： \"PSH1\":代表将1插入队列尾部 \"PSH2\":代表将2插入队列尾部 \"POP“:代表删除一个元素，先进先出=\u003e返回1 \"POP“:代表删除一个元素，先进先出=\u003e返回2 代码实现 import java.util.Stack; public class Solution { Stack\u003cInteger\u003e stack1 = new Stack\u003cInteger\u003e(); Stack\u003cInteger\u003e stack2 = new Stack\u003cInteger\u003e(); public void push(int node) { stack1.push(node); } public int pop() { if (stack2.size() \u003c= 0){ while (stack1.size() != 0){ stack2.push(stack1.pop()); } } return stack2.pop(); } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:5","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"旋转数组的最小数字 描述 示例1 输入：[3,4,5,1,2] 返回值：1 示例2 输入：[3,100,200,3] 返回值：3 代码实现 import java.util.ArrayList; public class Solution { public int minNumberInRotateArray(int[] array) { if (array.length == 0) { return 0; } int min = array[0]; for (int e : array) { if (e \u003c min) { min = e; } } return min; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:6","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"二进制中1的个数 描述 示例1 输入：10 返回值：2 说明： 十进制中10的32位二进制表示为0000 0000 0000 0000 0000 0000 0000 1010，其中有两个1。 示例2 输入：-1 返回值：32 说明： 负数使用补码表示 ，-1的32位二进制表示为1111 1111 1111 1111 1111 1111 1111 1111，其中32个1 代码实现 import java.util.*; public class Solution { public int NumberOf1(int n) { Scanner in = new Scanner(System.in); int count = 0; for (int i = 0; i \u003c 32; i++) { if ((n \u0026 (1 \u003c\u003c i)) != 0) { count++; } } return count; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:7","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"打印从1到最大的n位数 描述 示例1 输入：1 返回值：[1,2,3,4,5,6,7,8,9] 代码实现 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param n int整型 最大位数 * @return int整型一维数组 */ public int[] printNumbers (int n) { // write code here int length = (int)Math.pow(10, n); int []nums = new int[length-1]; for(int i=1;i\u003clength;i++){ nums[i-1]=i; } return nums; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:8","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"删除链表的节点 描述 示例1 输入：{2,5,1,9},5 返回值：{2,1,9} 说明： 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 2 -\u003e 1 -\u003e 9 示例2 输入：{2,5,1,9},1 返回值：{2,5,9} 说明： 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 2 -\u003e 5 -\u003e 9 代码实现 import java.util.*; /* * public class ListNode { * int val; * ListNode next = null; * public ListNode(int val) { * this.val = val; * } * } */ public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param head ListNode类 * @param val int整型 * @return ListNode类 */ public ListNode deleteNode (ListNode head, int val) { // write code here if(head.val == val) { return head.next; } ListNode newHead = head; while(newHead.next != null) { if(newHead.next.val == val) { newHead.next = newHead.next.next; } newHead = newHead.next; } return head; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:9","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"链表中倒数最后k个结点 描述 示例1 输入：{1,2,3,4,5},2 返回值：{4,5} 说明：返回倒数第2个节点4，系统会打印后面所有的节点来比较。 示例2 输入：{2},8 返回值：{} 代码实现 import java.util.*; /* * public class ListNode { * int val; * ListNode next = null; * public ListNode(int val) { * this.val = val; * } * } */ public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param pHead ListNode类 * @param k int整型 * @return ListNode类 */ public ListNode FindKthToTail (ListNode pHead, int k) { // write code here // 快慢指针思想 ListNode fast = pHead; ListNode slow = pHead; int step=0; if (pHead == null) { return null; } // 快指针先走k步 while (fast != null \u0026\u0026 step != k) { fast = fast.next; step++; } if (step \u003c k) { return null; } // 慢指针与快指针同步 while (fast != null) { fast = fast.next; slow = slow.next; } return slow; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:10","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"反转链表 描述 示例1 输入：{1,2,3} 返回值：{3,2,1} 示例2 输入：{} 返回值：{} 说明：空链表则输出空 代码实现 /* public class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } }*/ public class Solution { public ListNode ReverseList(ListNode head) { ListNode pre = null; ListNode nextOne = null; while (head != null) { nextOne = head.next; head.next = pre; pre = head; head = nextOne; } return pre; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:11","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"合并两个排序的链表 描述 示例1 输入：{1,3,5},{2,4,6} 返回值：{1,2,3,4,5,6} 示例2 输入：{},{} 返回值：{} 示例3 输入：{-1,2,4},{1,3,4} 返回值：{-1,1,2,3,4,4} 代码实现 /* public class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } }*/ public class Solution { public ListNode Merge(ListNode list1, ListNode list2) { if (list1 == null \u0026\u0026 list2 == null) { return null; } ListNode head = new ListNode(-1); ListNode pre = head; while (list1 != null \u0026\u0026 list2 != null) { if (list1.val \u003c list2.val) { pre.next = list1; list1 = list1.next; } else if (list1.val \u003e list2.val) { pre.next = list2; list2 = list2.next; } else { pre.next = list1; list1 = list1.next; pre=pre.next; pre.next = list2; list2 = list2.next; } pre=pre.next; } pre.next = list1 == null ? list2 : list1; return head.next; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:12","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"二叉树的镜像 描述 示例1 输入：{8,6,10,5,7,9,11} 返回值：{8,10,6,11,9,7,5} 说明：如题面所示 示例2 输入：{} 返回值：{} 代码实现 import java.util.*; /* * public class TreeNode { * int val = 0; * TreeNode left = null; * TreeNode right = null; * public TreeNode(int val) { * this.val = val; * } * } */ public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param pRoot TreeNode类 * @return TreeNode类 */ public TreeNode Mirror (TreeNode pRoot) { // write code here if (pRoot == null) { return null; } TreeNode tmp = pRoot.left; pRoot.left = pRoot.right ; pRoot.right = tmp; Mirror(pRoot.left); Mirror(pRoot.right); return pRoot; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:13","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"对称的二叉树 描述 示例1 输入：{1,2,2,3,4,4,3} 返回值：true 示例2 输入：{8,6,9,5,7,7,5} 返回值：false 代码实现 /* public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ import java.util.*; public class Solution { boolean isSymmetrical(TreeNode pRoot) { if (pRoot == null) { return true; } Queue\u003cTreeNode\u003e left = new LinkedList(); Queue\u003cTreeNode\u003e right = new LinkedList(); left.offer(pRoot.left); right.offer(pRoot.right); while (!left.isEmpty() \u0026\u0026 !right.isEmpty()) { TreeNode tn_left = left.poll(); TreeNode tn_right = right.poll(); if (tn_left == null \u0026\u0026 tn_right == null) { continue; } if (tn_left == null || tn_right == null || tn_left.val != tn_right.val) { return false; } left.offer(tn_left.left); left.offer(tn_left.right); right.offer(tn_right.right); right.offer(tn_right.left); } return true ; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:14","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"顺时针打印矩阵 描述 示例1 输入：[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] 返回值：[1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10] 示例2 输入：[[1,2,3,1],[4,5,6,1],[4,5,6,1]] 返回值：[1,2,3,1,1,1,6,5,4,4,5,6] 代码实现 import java.util.*; public class Solution { public ArrayList\u003cInteger\u003e printMatrix(int [][] matrix) { ArrayList\u003cInteger\u003e nums = new ArrayList(); if (matrix == null || matrix.length == 0 || matrix[0].length == 0) { return nums; } int up = 0, down = matrix.length - 1, left = 0, right = matrix[0].length - 1; while (true) { // 往右走 for (int index = left; index \u003c= right; index++) { nums.add(matrix[up][index]); } up++; if (up \u003e down) { break; } // 往下走 for (int index = up; index \u003c= down; index++) { nums.add(matrix[index][right]); } right--; if (left \u003e right) { break; } // 往左走 for (int index = right; index \u003e= left; index--) { nums.add(matrix[down][index]); } down--; if (up \u003e down) { break; } // 往上走 for (int index = down; index \u003e= up; index--) { nums.add(matrix[index][left]); } left++; if (left \u003e right) { break; } } return nums; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:15","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"包含min函数的栈 描述 示例1 输入：[\"PSH-1\",\"PSH2\",\"MIN\",\"TOP\",\"POP\",\"PSH1\",\"TOP\",\"MIN\"] 返回值：-1,2,1,-1 示例2 输入：\" \" 返回值：\"%20\" 代码实现 import java.util.Stack; public class Solution { Stack\u003cInteger\u003enum = new Stack\u003c\u003e(); Stack\u003cInteger\u003emin = new Stack\u003c\u003e(); public void push(int node) { num.push(node); if (min.isEmpty() || min.peek() \u003e node) { min.push(node); } else { min.push(min.peek()); } } public void pop() { num.pop(); min.pop(); } public int top() { int top_val = num.peek(); return top_val; } public int min() { return min.peek(); } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:16","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"从上往下打印二叉树 描述 示例1 输入：{8,6,10,#,#,2,1} 返回值：[8,6,10,2,1] 示例2 输入：{5,4,#,3,#,2,#,1} 返回值：[5,4,3,2,1] 代码实现 import java.util.*; /** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ public class Solution { ArrayList\u003cInteger\u003e num = new ArrayList(); Queue\u003cTreeNode\u003enode = new LinkedList(); public ArrayList\u003cInteger\u003e PrintFromTopToBottom(TreeNode root) { node.add(root); while (!node.isEmpty()) { TreeNode tmp = node.poll(); if (tmp != null) { num.add(tmp.val); node.add(tmp.left); node.add(tmp.right); } } return num; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:17","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"数组中出现次数超过一半的数字 描述 示例1 输入： [1,2,3,2,2,2,5,4,2] 返回值：2 示例2 输入：[3,3,3,3,2,2,2] 返回值：3 示例3 输入：[1] 返回值：1 代码实现 public class Solution { public int MoreThanHalfNum_Solution(int [] array) { int []count = new int[10000]; if(array.length==1){ return array[0]; } for (int i = 0; i \u003c array.length; i++) { count[array[i]]++; } int mid = array.length \u003e\u003e 1; int target = 0; for (int i = 0; i \u003c count.length; i++) { if (count[i] \u003e mid) { target = i; break; } } return target; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:18","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"连续子数组的最大和 描述 示例1 输入：[1,-2,3,10,-4,7,2,-5] 返回值：18 说明：经分析可知，输入数组的子数组[3,10,-4,7,2]可以求得最大和为18 示例2 输入：[2] 返回值：2 示例3 输入：[-10] 返回值：-10 代码实现 public class Solution { public int FindGreatestSumOfSubArray(int[] array) { // 未优化 // int []dp = new int[array.length]; // int max = array[0]; // dp[0] = array[0]; // for (int i = 1; i \u003c array.length; i++) { // dp[i] = Math.max(array[i], dp[i - 1] + array[i]); // max = Math.max(max, dp[i]); // } // return max; // 优化空间复杂度 int sum=array[0]; int max=array[0]; for(int i=1;i\u003carray.length;i++){ sum=Math.max(sum+array[i],array[i]); max=Math.max(max,sum); } return max; } } 未完待续··· ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:19","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Redis"],"content":"Redis集群","date":"2023-05-03","objectID":"/blog/en/20230503_colony/","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"Redis集群搭建 Redis 是一个高性能的开源键值存储数据库，它支持多种数据结构，如字符串、哈希、列表、集合和有序集合。它的出色性能和易于使用的特性，使得 Redis 成为了许多应用程序的首选数据存储方案。然而，随着业务的增长，单节点 Redis 可能会面临诸如存储容量、读写性能等方面的限制。为了解决这些问题，Redis 提供了集群模式，使得用户可以通过水平扩展的方式来横向扩展 Redis 的性能和存储能力。在本此内容中，我 将介绍Redis 集群的几种部署方法，帮助读者了解如何使用 Redis 集群来满足业务需求，提高应用程序的性能和可扩展性。 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:0:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"Redis主从集群 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"集群结构 我们搭建的主从集群结构如图： 共包含三个节点，一个主节点，两个从节点。 这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下： IP PORT 角色 192.168.150.101 7001 master 192.168.150.101 7002 slave 192.168.150.101 7003 slave ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:1","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"准备实例和配置 要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。 1）创建目录 我们创建三个文件夹，名字分别叫7001、7002、7003： # 进入/tmp目录 cd /tmp # 创建目录 mkdir 7001 7002 7003 如图： 2）恢复原始配置 修改redis-6.2.4/redis.conf文件，将其中的持久化模式改为默认的RDB模式，AOF保持关闭状态。 # 开启RDB # save \"\" save 3600 1 save 300 100 save 60 10000 # 关闭AOF appendonly no 3）拷贝配置文件到每个实例目录 然后将redis-6.2.4/redis.conf文件拷贝到三个目录中（在/tmp目录执行下列命令）： # 方式一：逐个拷贝 cp redis-6.2.4/redis.conf 7001 cp redis-6.2.4/redis.conf 7002 cp redis-6.2.4/redis.conf 7003 # 方式二：管道组合命令，一键拷贝 echo 7001 7002 7003 | xargs -t -n 1 cp redis-6.2.4/redis.conf 4）修改每个实例的端口、工作目录 修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将rdb文件保存位置都修改为自己所在目录（在/tmp目录执行下列命令）： sed -i -e 's/6379/7001/g' -e 's/dir .\\//dir \\/tmp\\/7001\\//g' 7001/redis.conf sed -i -e 's/6379/7002/g' -e 's/dir .\\//dir \\/tmp\\/7002\\//g' 7002/redis.conf sed -i -e 's/6379/7003/g' -e 's/dir .\\//dir \\/tmp\\/7003\\//g' 7003/redis.conf 5）修改每个实例的声明IP 虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，格式如下： # redis实例的声明 IP replica-announce-ip 192.168.150.101 每个目录都要改，我们一键完成修改（在/tmp目录执行下列命令）： # 逐一执行 sed -i '1a replica-announce-ip 192.168.150.101' 7001/redis.conf sed -i '1a replica-announce-ip 192.168.150.101' 7002/redis.conf sed -i '1a replica-announce-ip 192.168.150.101' 7003/redis.conf # 或者一键修改 printf '%s\\n' 7001 7002 7003 | xargs -I{} -t sed -i '1a replica-announce-ip 192.168.150.101' {}/redis.conf ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:2","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"启动 为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令： # 第1个 redis-server 7001/redis.conf # 第2个 redis-server 7002/redis.conf # 第3个 redis-server 7003/redis.conf 启动后： 如果要一键停止，可以运行下面命令： printf '%s\\n' 7001 7002 7003 | xargs -I{} -t redis-cli -p {} shutdown ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:3","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"开启主从关系 现在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。 有临时和永久两种模式： 修改配置文件（永久生效） 在redis.conf中添加一行配置：slaveof \u003cmasterip\u003e \u003cmasterport\u003e 使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）： slaveof \u003cmasterip\u003e \u003cmasterport\u003e 注意：在5.0以后新增命令replicaof，与salveof效果一致。 这里我们为了演示方便，使用方式二。 通过redis-cli命令连接7002，执行下面命令： # 连接 7002 redis-cli -p 7002 # 执行slaveof slaveof 192.168.150.101 7001 通过redis-cli命令连接7003，执行下面命令： # 连接 7003 redis-cli -p 7003 # 执行slaveof slaveof 192.168.150.101 7001 然后连接 7001节点，查看集群状态： # 连接 7001 redis-cli -p 7001 # 查看状态 info replication 结果： ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:4","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"测试 执行下列操作以测试： 利用redis-cli连接7001，执行set num 123 利用redis-cli连接7002，执行get num，再执行set num 666 利用redis-cli连接7003，执行get num，再执行set num 888 可以发现，只有在7001这个master节点上可以执行写操作，7002和7003这两个slave节点只能执行读操作。 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:5","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"搭建哨兵集群 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"集群结构 这里我们搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图： 三个sentinel实例信息如下： 节点 IP PORT s1 192.168.150.101 27001 s2 192.168.150.101 27002 s3 192.168.150.101 27003 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:1","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"准备实例和配置 要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。 我们创建三个文件夹，名字分别叫s1、s2、s3： # 进入/tmp目录 cd /tmp # 创建目录 mkdir s1 s2 s3 如图： 然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容： port 27001 sentinel announce-ip 192.168.150.101 sentinel monitor mymaster 192.168.150.101 7001 2 sentinel down-after-milliseconds mymaster 5000 sentinel failover-timeout mymaster 60000 dir \"/tmp/s1\" 解读： port 27001：是当前sentinel实例的端口 sentinel monitor mymaster 192.168.150.101 7001 2：指定主节点信息 mymaster：主节点名称，自定义，任意写 192.168.150.101 7001：主节点的ip和端口 2：选举master时的quorum值 然后将s1/sentinel.conf文件拷贝到s2、s3两个目录中（在/tmp目录执行下列命令）： # 方式一：逐个拷贝 cp s1/sentinel.conf s2 cp s1/sentinel.conf s3 # 方式二：管道组合命令，一键拷贝 echo s2 s3 | xargs -t -n 1 cp s1/sentinel.conf 修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003： sed -i -e 's/27001/27002/g' -e 's/s1/s2/g' s2/sentinel.conf sed -i -e 's/27001/27003/g' -e 's/s1/s3/g' s3/sentinel.conf ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:2","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"启动 为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令： # 第1个 redis-sentinel s1/sentinel.conf # 第2个 redis-sentinel s2/sentinel.conf # 第3个 redis-sentinel s3/sentinel.conf 启动后： ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:3","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"测试 尝试让master节点7001宕机，查看sentinel日志： 查看7003的日志： 查看7002的日志： ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:4","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"搭建分片集群 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"集群结构 分片集群需要的节点数量较多，这里我们搭建一个最小的分片集群，包含3个master节点，每个master包含一个slave节点，结构如下： 这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下： IP PORT 角色 192.168.150.101 7001 master 192.168.150.101 7002 master 192.168.150.101 7003 master 192.168.150.101 8001 slave 192.168.150.101 8002 slave 192.168.150.101 8003 slave ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:1","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"准备实例和配置 删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录： # 进入/tmp目录 cd /tmp # 删除旧的，避免配置干扰 rm -rf 7001 7002 7003 # 创建目录 mkdir 7001 7002 7003 8001 8002 8003 在/tmp下准备一个新的redis.conf文件，内容如下： port 6379 # 开启集群功能 cluster-enabled yes # 集群的配置文件名称，不需要我们创建，由redis自己维护 cluster-config-file /tmp/6379/nodes.conf # 节点心跳失败的超时时间 cluster-node-timeout 5000 # 持久化文件存放目录 dir /tmp/6379 # 绑定地址 bind 0.0.0.0 # 让redis后台运行 daemonize yes # 注册的实例ip replica-announce-ip 192.168.150.101 # 保护模式 protected-mode no # 数据库数量 databases 1 # 日志 logfile /tmp/6379/run.log 将这个文件拷贝到每个目录下： # 进入/tmp目录 cd /tmp # 执行拷贝 echo 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 cp redis.conf 修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致： # 进入/tmp目录 cd /tmp # 修改配置文件 printf '%s\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t sed -i 's/6379/{}/g' {}/redis.conf ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:2","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"启动 因为已经配置了后台启动模式，所以可以直接启动服务： # 进入/tmp目录 cd /tmp # 一键启动所有服务 printf '%s\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t redis-server {}/redis.conf 通过ps查看状态： ps -ef | grep redis 发现服务都已经正常启动： 如果要关闭所有进程，可以执行命令： ps -ef | grep redis | awk '{print $2}' | xargs kill 或者（推荐这种方式）： printf '%s\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t redis-cli -p {} shutdown ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:3","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"创建集群 虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。 我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。 1）Redis5.0之前 Redis5.0之前集群命令都是用redis安装包下的src/redis-trib.rb来实现的。因为redis-trib.rb是有ruby语言编写的所以需要安装ruby环境。 # 安装依赖 yum -y install zlib ruby rubygems gem install redis 然后通过命令来管理集群： # 进入redis的src目录 cd /tmp/redis-6.2.4/src # 创建集群 ./redis-trib.rb create --replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003 2）Redis5.0以后 我们使用的是Redis6.2.4版本，集群管理以及集成到了redis-cli中，格式如下： redis-cli --cluster create --cluster-replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003 命令说明： redis-cli --cluster或者./redis-trib.rb：代表集群操作命令 create：代表是创建集群 --replicas 1或者--cluster-replicas 1 ：指定集群中每个master的副本个数为1，此时节点总数 ÷ (replicas + 1) 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master 运行后的样子： 这里输入yes，则集群开始创建： 通过命令可以查看集群状态： redis-cli -p 7001 cluster nodes ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:4","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"测试 尝试连接7001节点，存储一个数据： # 连接 redis-cli -p 7001 # 存储数据 set num 123 # 读取数据 get num # 再次存储 set a 1 结果悲剧了： 集群操作时，需要给redis-cli加上-c参数才可以： redis-cli -c -p 7001 这次可以了： ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:5","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Technology"],"content":"设计模式讲解","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"浅谈设计模式 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:0","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"前言 编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性 等多方面的挑战，设计模式是为了让程序(软件)，具有更好： 代码重用性（即：相同的代码，不用多次编写） 可读性（即：编程规范性，便于其他程序员的阅读与理解） 可扩展性（即：当需要增加新的功能时，非常方便，称为可维护性） 可靠性（即：当我们增加新的功能后，对原来的功能没有影响） 使程序呈现高内聚，低耦合的特性 设计模式包含了面向对象的精髓：“懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要”。 Scott Mayers 在其巨著《Effective C++》就曾经说过：C++老手和 C++新手的区别就是前者手背上有很多伤疤。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:1","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"设计模式七大原则 设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么这样设计的依据） 设计模式常用的七大原则 单一职责原则 接口隔离原则 依赖倒转（倒置）原则 里氏替换原则 开闭原则 迪米特法则 合成服用原则 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:2","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"单一职责原则 介绍 对类来说，一个类应该只负责一项职责。如类A负责两个不同的职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2。类图如下所示 单一职责原则注意事项和细节 单一职责原则 降低类的复杂度，一个类只负责一项职责。 提高类的可读性，可维护性。 降低变更引起的风险。 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中的方法数量足够少，可以在方法级别保持单一职责原则。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:3","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"接口隔离原则 介绍 客户端不应该依赖他不需要的接口，即对类对另一个类的依赖应该建立在最小的接口上。 类A通过接口Interface1依赖类B，类C通过Interface1依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法。 隔离原则应当如下处理： 将接口Interface1拆分成为几个独立的接口（这里我们拆分成为3个接口），类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。 使用接口隔离原则改进 步骤 类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法 将接口Interface1拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则 接口Interface1中出现的方法，根据实际情况拆分为三个接口 拆分实现如下： public class Segregation { public static void main(String[] args) { A a = new A(); a.depend1(new B()); // A类通过接口去依赖B类 a.depend2(new B()); a.depend3(new B()); C c = new C(); c.depend1(new D()); // C类通过接口去依赖D类 c.depend4(new D()); c.depend5(new D()); } } interface Interface1 { void operation1(); } interface Interface2 { void operation2(); void operation3(); } interface Interface3 { void operation4(); void operation5(); } class D implements Interface1, Interface3 { @Override public void operation1() { System.out.println(\"D 实现了 operation1\"); } @Override public void operation4() { System.out.println(\"D 实现了 operation4\"); } @Override public void operation5() { System.out.println(\"D 实现了 operation5\"); } } class B implements Interface1, Interface2 { @Override public void operation1() { System.out.println(\"B 实现了 operation1\"); } @Override public void operation2() { System.out.println(\"B 实现了 operation2\"); } @Override public void operation3() { System.out.println(\"B 实现了 operation3\"); } } // A类通过接口Interface依赖使用B类，用到了1，2，3方法 class A { public void depend1(Interface1 interface1) { interface1.operation1(); } public void depend2(Interface2 interface2) { interface2.operation2(); } public void depend3(Interface2 interface2) { interface2.operation3(); } } // C类通过接口Interface依赖D类，用到了1，4，5方法 class C { public void depend1(Interface1 interface1) { interface1.operation1(); } public void depend4(Interface3 interface3) { interface3.operation4(); } public void depend5(Interface3 interface3) { interface3.operation5(); } } ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:4","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"依赖倒转原则 介绍 依赖倒转原则(Dependence Inversion Principle)是指： 高层模块不应该依赖底层模块，二者都应该依赖其抽象 抽象不应该依赖细节，细节应该依赖抽象 依赖倒转(倒置)的中心思想是面向接口编程 依赖倒转原则是基于这样的设计原理：相较于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的框架比以细节为基础的框架要稳定的多。在Java中，抽象指的是借口或抽象类，细节就是具体的实现类 使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成 依赖关系传递的三种方式 接口传递 构造方法传递 setter方式传递 public class DependencyPass { public static void main(String[] args) { // TODO Auto-generated method stub } } // 方式1： 通过接口传递实现依赖 // 开关的接口 interface IOpenAndClose { public void open(ITV tv); //抽象方法,接收接口 } interface ITV { //ITV接口 public void play(); } // 实现接口 class OpenAndClose implements IOpenAndClose { public void open(ITV tv) { tv.play(); } } // 方式2: 通过构造方法依赖传递 interface IOpenAndClose { public void open(); //抽象方法 } interface ITV { //ITV接口 public void play(); } class OpenAndClose implements IOpenAndClose { public ITV tv; public OpenAndClose(ITV tv) { this.tv = tv; } public void open() { this.tv.play(); } } // 方式3 , 通过setter方法传递 interface IOpenAndClose { public void open(); // 抽象方法 public void setTv(ITV tv); } interface ITV { // ITV接口 public void play(); } class OpenAndClose implements IOpenAndClose { private ITV tv; public void setTv(ITV tv) { this.tv = tv; } public void open() { this.tv.play(); } } 依赖倒转原则的注意事项和细节 依赖倒转原则 底层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好 变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化 继承时遵循里氏替换原则 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:5","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"里氏替换原则 OO中的继承性的思考和说明 继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然他不强制要求所有的子类必须遵循这些契约，但是如果自类对这些已经实现的方法随意修改，就会对整个继承体系造成破坏 继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障 介绍 里氏替换原则(Liskov Substitution Principle)在1988年，由麻省理工学院里一位姓里的女士提出的 如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有的引用基类的地方必须能透明地使用其子类的对象 在使用继承，遵循里氏替换原则，在子类中尽量不要重写父类的方法 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过耦合、组合、依赖来解决问题 里氏替换原则通用做法：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合、组合等关系替代。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:6","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"开闭原则 介绍 开闭原则(Open Closed Principle)是编程中最基础、最重要的设计原则 一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化 编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则 public class Ocp { public static void main(String[] args) { //使用看看存在的问题 GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); graphicEditor.drawShape(new Triangle()); } } //这是一个用于绘图的类 [使用方] class GraphicEditor { //接收Shape对象，然后根据type，来绘制不同的图形 public void drawShape(Shape s) { if (s.m_type == 1) drawRectangle(s); else if (s.m_type == 2) drawCircle(s); else if (s.m_type == 3) drawTriangle(s); } //绘制矩形 public void drawRectangle(Shape r) { System.out.println(\" 绘制矩形 \"); } //绘制圆形 public void drawCircle(Shape r) { System.out.println(\" 绘制圆形 \"); } //绘制三角形 public void drawTriangle(Shape r) { System.out.println(\" 绘制三角形 \"); } } //Shape类，基类 class Shape { int m_type; } class Rectangle extends Shape { Rectangle() { super.m_type = 1; } } class Circle extends Shape { Circle() { super.m_type = 2; } } //新增画三角形 class Triangle extends Shape { Triangle() { super.m_type = 3; } } 演示方式优缺点 代码易于理解，操作简单 缺点是违反了设计模式的OCP原则，即对扩展开放（提供方），对修改关闭（适用方）。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码 比如我们这时要新增加一个图形种类三角形，我们需要修改较多地方 优化分析 把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承Shape，并实现draw方法即可。（使用方的代码就不需要修改，即可满足开闭原则） public class Ocp { public static void main(String[] args) { //使用看看存在的问题 GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); graphicEditor.drawShape(new Triangle()); graphicEditor.drawShape(new OtherGraphic()); } } //这是一个用于绘图的类 [使用方] class GraphicEditor { //接收Shape对象，调用draw方法 public void drawShape(Shape s) { s.draw(); } } //Shape类，基类 abstract class Shape { int m_type; public abstract void draw();//抽象方法 } class Rectangle extends Shape { Rectangle() { super.m_type = 1; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制矩形 \"); } } class Circle extends Shape { Circle() { super.m_type = 2; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制圆形 \"); } } //新增画三角形 class Triangle extends Shape { Triangle() { super.m_type = 3; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制三角形 \"); } } //新增一个图形 class OtherGraphic extends Shape { OtherGraphic() { super.m_type = 4; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制其它图形 \"); } } ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:7","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"迪米特法则 介绍 一个对象应该对其他对象保持最少的了解 类和类关于越密切，耦合度就越大 迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息 迪米特法则还有个更简单的定义：只与直接的朋友通信 直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式有很多：依赖、关联、组合、聚合等。其中，我们成出现的成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部 实例应用 描述：有一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的ID import java.util.ArrayList; import java.util.List; //客户端 public class Demeter { public static void main(String[] args) { //创建了一个 SchoolManager 对象 SchoolManager schoolManager = new SchoolManager(); //输出学院的员工id 和 学校总部的员工信息 schoolManager.printAllEmployee(new CollegeManager()); } } //学校总部员工类 class Employee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //学院的员工类 class CollegeEmployee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //管理学院员工的管理类 class CollegeManager { //返回学院的所有员工 public List\u003cCollegeEmployee\u003e getAllEmployee() { List\u003cCollegeEmployee\u003e list = new ArrayList\u003cCollegeEmployee\u003e(); for (int i = 0; i \u003c 10; i++) { //这里我们增加了10个员工到 list CollegeEmployee emp = new CollegeEmployee(); emp.setId(\"学院员工id= \" + i); list.add(emp); } return list; } } //学校管理类 //分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager //CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 class SchoolManager { //返回学校总部的员工 public List\u003cEmployee\u003e getAllEmployee() { List\u003cEmployee\u003e list = new ArrayList\u003cEmployee\u003e(); for (int i = 0; i \u003c 5; i++) { //这里我们增加了5个员工到 list Employee emp = new Employee(); emp.setId(\"学校总部员工id= \" + i); list.add(emp); } return list; } //该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) { //分析问题 //1. 这里的 CollegeEmployee 不是 SchoolManager的直接朋友 //2. CollegeEmployee 是以局部变量方式出现在 SchoolManager //3. 违反了 迪米特法则 //获取到学院员工 List\u003cCollegeEmployee\u003e list1 = sub.getAllEmployee(); System.out.println(\"------------学院员工------------\"); for (CollegeEmployee e : list1) { System.out.println(e.getId()); } //获取到学校总部员工 List\u003cEmployee\u003e list2 = this.getAllEmployee(); System.out.println(\"------------学校总部员工------------\"); for (Employee e : list2) { System.out.println(e.getId()); } } } 应用实例改进 前面设计的问题在于SchoolManager中，CollegeEmployee类并不是SchoolManager类的直接朋友 按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合 import java.util.ArrayList; import java.util.List; //客户端 public class Demeter { public static void main(String[] args) { System.out.println(\"~~~使用迪米特法则的改进~~~\"); //创建了一个 SchoolManager 对象 SchoolManager schoolManager = new SchoolManager(); //输出学院的员工id 和 学校总部的员工信息 schoolManager.printAllEmployee(new CollegeManager()); } } //学校总部员工类 class Employee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //学院的员工类 class CollegeEmployee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //管理学院员工的管理类 class CollegeManager { //返回学院的所有员工 public List\u003cCollegeEmployee\u003e getAllEmployee() { List\u003cCollegeEmployee\u003e list = new ArrayList\u003cCollegeEmployee\u003e(); for (int i = 0; i \u003c 10; i++) { //这里我们增加了10个员工到 list CollegeEmployee emp = new CollegeEmployee(); emp.setId(\"学院员工id= \" + i); list.add(emp); } return list; } //输出学院员工的信息 public void printEmployee() { //获取到学院员工 List\u003cCollegeEmployee\u003e list1 = getAllEmployee(); System.out.println(\"------------学院员工------------\"); for (CollegeEmployee e : list1) { System.out.println(e.getId()); } } } //学校管理类 //分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager //CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 class SchoolManager { //返回学校总部的员工 public List\u003cEmployee\u003e getAllEmployee() { List\u003cEmployee\u003e list = new ArrayList\u003cEmployee\u003e(); for (int i = 0; i \u003c 5; i++) { //这里我们增加了5个员工到 list Employee emp = new Employee(); emp.setId(\"学校总部员工id= \" + i); list.add(emp); } return list; } //该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) { //分析问题 //1. 将输出学院的员工方法，封装到CollegeManager sub.printEmployee(); //获取到学校总部员工 List\u003cEmployee\u003e list2 = this.getAllEmployee(); System.out.println(\"------------学校总部员工-----","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:8","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Hugo"],"content":"basic Markdown syntax. Note This article is a shameful copy of the great Grav original page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2022-09-19","objectID":"/blog/en/markdown/:0:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:1:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2022-09-19","objectID":"/blog/en/markdown/:2:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2022-09-19","objectID":"/blog/en/markdown/:3:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2022-09-19","objectID":"/blog/en/markdown/:4:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2022-09-19","objectID":"/blog/en/markdown/:5:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"6 Emphasis ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:4","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2022-09-19","objectID":"/blog/en/markdown/:7:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"8 Lists ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"9 Code ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:4","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2022-09-19","objectID":"/blog/en/markdown/:10:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"11 Links ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2022-09-19","objectID":"/blog/en/markdown/:12:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") Like links, images also have a footnote style syntax: ![Alt text][id] This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2022-09-19","objectID":"/blog/en/markdown/:13:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Technology"],"content":"Docker安装SQLServer","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Mac 安装 SQL Server ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:0","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"前言 由于最近学习需要使用到 SQL Server 数据库，但我本人使用的操作系统是 Mac ，众所周知， SQL Server 是微软旗下的关系型数据库（具体有关SQL Server优点自行去微软官方查看👀 Microsoft - SQL Server | Microsoft Docs ），所以微软肯定更加亲近自己的亲儿子 Windows 操作系统，以至于到现在 SQL Server 并不支持 Mac，那怎么办呢？总不能安装虚拟机使用吧，对于我们如此珍惜内存使用的程序猿那是不可能的😂，经过我查阅资料，我发现微软当前支持 Ubuntu 16.04，和 RHEL 7.2（红帽子企业版 Linux ），既然支持 Linux 那就好办了，我们可以使用Docker🤔应用去虚拟化实例。 ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:1","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Docker 介绍 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 Docker 最好的一点在于你需要什么环境就可以下载仅拥有该环境的 Linux 系统，即缩小了使用的体积，也拥有了需要使用的环境，轻便又高效。 ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:2","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Mac 安装 Docker Docker 官网手动安装 Docker HomeBrew 托管安装 brew cask install docker 对于能偷懒就偷懒的我来说😎，肯定选择后者一条命令解决了，官网安装下载还需要去寻找点击下载，对于程序猿来说多不优雅呀🤓，想要了解 macOS（或 Linux）缺失的软件包的管理器 — Homebrew 的可以自行去了解一下，真是可以大大提高效率，让你安装程序变得如此优雅。 ==\u003e Downloading https://download.docker.com/mac/stable/42716/Docker.dmg ######################################################################## 100.0% ==\u003e Verifying SHA-256 checksum for Cask 'docker'. ==\u003e Installing Cask docker ==\u003e Moving App 'Docker.app' to '/Applications/Docker.app'. docker was successfully installed! 显示 successfully 便已经成功下载 ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:3","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Docker 配置并拉取容器镜像 基本环境配置 根据自己电脑相应配置，自己分配Docker占用资源大小，内存一定要大于2G，我记得好像SQL Server最基本要保证内存2G才能成功启动（以下是我的Docker资源分配配置）。 镜像加速 鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。 配置完成后重启 Docker 应用，打开 Terminal 输入 docker info 查看配置是否成功。 docker info .... Registry Mirrors: http://hub-mirror.c.163.com/ Live Restore Enabled: false Product License: Community Engine 拉取并运行 SQL Server 容器镜像 拉取并运行 SQL Server 容器映像，参考了Docker: Install containers for SQL Server on Linux - SQL Server | Microsoft Docs 从 Microsoft 容器注册表中拉取 SQL Server 2017 Linux 容器映像，打开我们的终端，输入命令： sudo docker pull mcr.microsoft.com/mssql/server:2017-latest 这里会将sql server for linux docker下载到我们计算机上。 使用 Docker 运行容器镜像 要使用 Docker 运行容器映像，可以从 Terminal (Linux/macOS) 使用以下命令。(也就是终端)。 sudo docker run -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=\u003cYourStrong@Passw0rd\u003e\" \\ -p 1433:1433 --name sqlserver \\ -d mcr.microsoft.com/mssql/server:2017-latest 备注: 密码应符合 SQL Server 默认密码策略，否则容器无法设置 SQL Server，将停止工作。 默认情况下，密码的长度必须至少为 8 个字符，并且必须包含以下四种字符中的三种：大写字母、小写字母、十进制数字和符号。 你可以通过执行 docker logs 命令检查错误日志。 参数说明: -e \"ACCEPT_EULA=Y\" 将 ACCEPT_EULA 变量设置为任意值，以确认接受最终用户许可协议。 SQL Server 映像的必须设置。 \"SA_PASSWORD=\u003cYourStrong@Passw0rd\u003e\" 指定至少包含 8 个字符且符合 SQL Server 密码要求的强密码。 SQL Server 映像的必需设置。 -p 1433:1433 将主机环境中的 TCP 端口（第一个值）映射到容器中的 TCP 端口（第二个值）。 在此示例中，SQL Server 侦听容器中的 TCP 1433，并对主机上的端口 1433 公开。 name sqlserver 为容器指定一个自定义名称，而不是使用随机生成的名称。 如果运行多个容器，则无法重复使用相同的名称。 mcr.microsoft.com/mssql/server:2017-latest SQL Server 2017 Linux 容器映像 查看 Docker 容器 要查看 Docker 容器，请在 Terminal 中使用 docker ps 命令。 sudo docker ps -a 显示结果如下： CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 78c2deca0bd6 mcr.microsoft.com/mssql/server:2017-latest \"/opt/mssql/bin/nonr…\" 30 minutes ago Exited (0) 2 minutes ago sqlserver 如果“状态”列显示“正常运行”，则 SQL Server 将在容器中运行，并侦听“端口”列中指定的端口（我现在是关闭状态，可以使用 docker start CONTAINER ID 重新启动 ） 。 更改 SA 密码 SA 帐户是安装过程中在 SQL Server 实例上创建的系统管理员。 创建 SQL Server 容器后，通过在容器中运行 echo $SA_PASSWORD，可发现指定的 SA_PASSWORD 环境变量。 出于安全考虑，请考虑更改 SA 密码。 选择 SA 用户要使用的强密码。 使用 docker exec 运行sqlcmd ，以使用 Transact-SQL 更改密码。 在下面的示例中，将旧密码 \u003cYourStrong!Passw0rd\u003e和新密码 \u003cYourNewStrong!Passw0rd\u003e 替换为你自己的密码值。 sudo docker exec -it sqlserver /opt/mssql-tools/bin/sqlcmd \\ -S localhost -U SA -P \"\u003cYourStrong@Passw0rd\u003e\" \\ -Q 'ALTER LOGIN SA WITH PASSWORD=\"\u003cYourNewStrong@Passw0rd\u003e\"' 连接 SQL Server 下列步骤在容器内部使用 SQL Server 命令行工具 sqlcmd 来连接 SQL Server。 使用 docker exec -it 命令在运行的容器内部启动交互式 Bash Shell。 在下面的示例中，sqlserver 是在创建容器时由 –name 参数指定的名称。 sudo docker exec -it sql1 \"bash\" 在容器内部使用 sqlcmd 进行本地连接。 默认情况下，sqlcmd 不在路径之中，因此需要指定完整路径。 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"\u003cYourNewStrong@Passw0rd\u003e\" 如果成功，应会显示 sqlcmd 命令提示符：1\u003e ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:4","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"利用Navicat可视化工具连接Sql Server 下载 navicat 应用选择SQL Server服务，输入连接名、主机、用户名、密码进行连接。 提示： 密码一定不要填错，如果密码填错，会出现以下错误(一定要学会去Docker里面查看LOG): 注意： 创建sa账号时候的密码的左右\u003c\u003e两个尖括号也是属于密码的 我就是在实际操作中犯了如此低级的错误，望以鉴！ ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:5","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"总结 越努力越幸运! 以上就是本次分享的在Mac上如何使用 SQL Server 的详细教程,我们一起讨论！如果哪里有写的不好的地方，还希望大家提出来，在下方评论区留言，我加以修正！ ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:6","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Java "],"content":"Java学习路线","date":"2022-08-13","objectID":"/blog/en/20220813_route/","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 学习路线 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:0:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"前言 首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致，目前，Java 的岗位需求多，是后台开发的主流编程语言，功能强大，还是很值得学习的。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:1:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 1：Java 入门 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 培养兴趣、快速上手 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"前期准备 准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手 推荐网站 - 菜鸟工具：https://c.runoob.com/compile/10 准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。 推荐软件 Typora：https://www.typora.io/ 推荐使用 Markdown 语法编写，鱼皮教程：https://www.bilibili.com/video/BV1no4y1k7YT/ 想学好编程，别背代码，要多写，把这句话刻到脑子里。 选视频和找资料的小技巧：多看评论区、多看隔壁评论区，不要看过期的视频。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 编程基础（45 天） 知识 Java 特点（看不懂没事，别背！） 环境搭建 Java 基础语法 数据类型 流程控制 数组 面向对象 方法 重载 封装 继承 多态 抽象类 接口 枚举 常用类 String 日期时间 集合类 泛型 注解 异常处理 多线程 IO 流 反射 学习建议 一定要持续学习，不能断！ 跟着书上的例子敲代码后，自主编写代码，并完成课后练习。 资源 视频 ⭐ 韩顺平 - 零基础 30 天学会 Java：https://www.bilibili.com/video/BV1fh411y7R8（900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想） 文档 ⭐ 菜鸟教程：https://www.runoob.com/java/java-tutorial.html（可以在线练习） 廖雪峰 Java 教程：https://www.liaoxuefeng.com/wiki/1252599548343744 书籍 《Head First Java》 在线游戏 Codegym：https://codegym.cc/zh（玩玩前几关培养兴趣不错，但后面收费了） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 8（3 天） 知识 Stream API Lambda 表达式 新日期时间 API 接口默认方法 资源 视频 ⭐ 宋红康 - 全网最全Java零基础入门教程：https://www.bilibili.com/video/BV1Kb411W75N（只看 Java 8 部分即可） 文档 ⭐ 菜鸟教程：https://www.runoob.com/java/java8-new-features.html 书籍 《Java 8 实战》 工具 ⭐ 在线编写运行 Java 8：https://www.tutorialspoint.com/compile_java8_online.php 项目 Java 8 小代码片段：https://github.com/biezhi/30-seconds-of-java8 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"尾声 学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？ 不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？ 当然是数据结构和算法！ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:5","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 2：巩固基础 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 想学好编程，计算机基础知识要学好。 比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。 我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 的基础。 那直接用 Java 来写算法题目，一举两得，岂不美哉？ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 基础（30 天） 学习建议 建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固 Java 的不二之选，其中图形界面章节可以选择不看。 之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍。 资源 书籍 ⭐《Java 核心技术卷 1》 练习 ⭐ 牛客题库：https://www.nowcoder.com/intelligentTest ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"数据结构与算法 知识 时间 / 空间复杂度分析 数据结构 数组 字符串 队列 栈 链表 集合 哈希表 二叉树 算法 排序 双指针 查找 分治 动态规划 递归 回溯 贪心 位运算 DFS BFS 图 学习建议 学算法一定要多思考、多练习！！！ 在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。 不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。 之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。 有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~ 资源 文章 ⭐ 刷了 1000 多道算法题，一点心得：https://t.1yb.co/oT9q（鱼皮原创） 在线教程 ⭐ LeetCode LeetBook：https://leetcode-cn.com/leetbook/ 在线刷题 ⭐ LeetCode：https://leetcode-cn.com/ 书籍 ⭐《小灰的漫画算法》 ⭐《剑指 Offer》 《程序员代码面试指南》 图解算法数据结构：https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/ LeetCode 101（C++）：https://github.com/changgyhub/leetcode_101 LeetCode 题解（C++）：https://github.com/soulmachine/leetcode LeetCode Cookbook（Go 语言）：https://github.com/halfrost/LeetCode-Go 视频 尚硅谷 Java 数据结构与算法：https://www.bilibili.com/video/BV1E4411H73v（难度比面试的要求大一些，适合希望更全面学习的朋友） Leetcode 真题解析：https://www.bilibili.com/video/BV1a54y1b74k 工具 VisuAlgo 数据结构和算法动态可视化：https://visualgo.net/zh 数据结构可视化：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html 网站 五分钟学算法：https://www.cxyxiaowu.com/ ###计算机基础 知识 计算机网络 HTTP / HTTPS 协议 网络模型 UDP / TCP 协议 网络安全 域名解析 操作系统 进程、线程 进程 / 线程间通讯方式 进程调度算法 进程 / 线程状态 死锁 内存管理 学习建议 在巩固基础期间，我建议大家多去了解计算机基础知识，比如操作系统、计算机网络。 但这一块知识说实话挺枯燥的，对吧，你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃。 我的建议是，可以先看有趣的课外书，比如《图解 HTTP》等等，对基础知识先有个大致的印象，等后面有时间了再系统学习。 比如还在校园就跟着学校的进度学习就成，自学的话可以看下 《计算机网络微课堂》、 《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了。 资源 视频 《计算机网络微课堂》：https://www.bilibili.com/video/BV1c4411d7jb 《清华操作系统原理》：https://www.bilibili.com/video/BV1uW411f72n 书籍 ⭐《图解 HTTP》 《网络是怎样连接的》 ⭐《图解 TCP / IP》 《编码》 《30天自制操作系统》 《计算机网络-自顶向下方法》（难度较大，不推荐新手看） 《现代操作系统》（难度较大，不推荐新手看） 《深入理解计算机系统》（难度较大，不推荐新手看） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"尾声 巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 3：Java 企业开发基础 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 面向薪资编程，学习实际工作要用的技术，并能 独立 做出一个具有完整功能的 Java Web 项目。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"MySQL 数据库（7 天） 企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。 知识 基本概念 MySQL 搭建 SQL 语句编写 约束 索引 事务 设计数据库表 性能优化 学习建议 其中，SQL 语句编写 和 设计数据库表 这两个能力一定要有！ 比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。 这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。 资源 视频 ⭐ 老杜 - mysql入门基础 + 数据库实战：https://www.bilibili.com/video/BV1Vy4y1z7EX（较新、内容相对精炼，有习题） 尚硅谷 - MySQL基础教程：https://www.bilibili.com/video/BV1xW411u7ax（小姐姐讲课，但感觉音质一般） 在线练习 ⭐ SQL 自学网：http://xuesql.cn/ ⭐ SQL 在线运行：https://www.bejson.com/runcode/sql/ 文档 SQL - 菜鸟教程：https://www.runoob.com/sql/sql-tutorial.html MySQL - 菜鸟教程：https://www.runoob.com/mysql/mysql-tutorial.html ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"开发框架（60 天） Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。 开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！ 不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。 下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。 知识 Java Web 描述：Java 网页应用开发基础 前端基础 XML JSON Servlet Filter Listener JSP JSTL Cookie Session Spring 5 描述：Java 轻量级应用框架 IOC AOP 事务 SpringMVC 描述：Java 轻量级 web 开发框架 什么是 MVC？ 请求与响应 Restful API 拦截器 配置 执行过程 MyBatis 描述：数据访问框架，操作数据库进行增删改查等操作 增删改查 全局配置 动态 SQL 缓存 和其他框架的整合 逆向工程 MyBatis Plus 描述：Mybatis 的增强工具，能够简化开发、提高效率 引入 通用 CRUD 条件构造器 代码生成器 插件扩展 自定义全局操作 SpringBoot 2 描述：简化 Spring 应用的初始搭建以及开发过程，提高效率 常用注解 资源整合 高级特性 本地热部署 Spring Security 描述：Spring 的安全管理框架 用户认证 权限管理 Maven / Gradle 描述：项目管理工具 构建 依赖管理 插件 配置 子父工程 学习建议 由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。 学这些技术的时候，千万不能懒 ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。 学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 SpringBoot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。 Maven / Gradle 当工具用就好，面试基本不问，跟着框架教程去用就行了，先不用花太多时间去深入学。 资源 视频（按顺序看） ⭐ 尚硅谷最新版 JavaWeb 全套教程：https://www.bilibili.com/video/BV1Y7411K7zz（前端部分最好也看下） ⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：https://www.bilibili.com/video/BV1Vf4y127N5 ⭐ 尚硅谷 - SpringMVC 2021 最新教程：https://www.bilibili.com/video/BV1Ry4y1574R ⭐ 尚硅谷 - MyBatis 实战教程全套完整版：https://www.bilibili.com/video/BV1mW411M737 ⭐ 尚硅谷 - MyBatisPlus 教程：https://www.bilibili.com/video/BV1Ds411E76Y Maven 零基础入门教程：https://www.bilibili.com/video/BV1TW411g7hP（搞不懂 Maven 可以看看） ⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：https://www.bilibili.com/video/BV19K4y1L7MT 尚硅谷 - SpringSecurity 框架教程：https://www.bilibili.com/video/BV15a411A7kP ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"开发规范（3 天） 开发不规范，同事两行泪。 开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。 知识 代码规范 代码风格 命名 其他规则 提交规范 学习建议 简单过一遍大厂团队的规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范，再去遵守。 项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。 资源 书籍 ⭐ 阿里巴巴 Java 开发手册：https://developer.aliyun.com/graph/java（搜索《Java开发手册》） 视频 华山版《Java开发手册》独家讲解：https://developer.aliyun.com/live/1201 文档 Google Java Style Guide：https://google.github.io/styleguide/javaguide.html（谷歌 Java 代码规范） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Git（3 天） 此前大家可能听说过 GitHub，一流的代码开源托管平台。 Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。 无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。 知识 工作区 分支 代码提交、推送、拉取、回退、重置 分支操作 代码合并、解决冲突 标签 cherry-pick 学习建议 每个命令跟着敲一遍，有个大致的印象，会用即可，用的多了自然熟悉了。 资源 视频 ⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版https://www.bilibili.com/video/BV1vy4y1s7k6 书籍 猴子都能懂的 Git 入门 https://backlog.com/git-tutorial/cn/ ⭐ GitHub 漫游指南 https://github.phodal.com/ 文档 GitHub 官方文档：https://docs.github.com/cn 游戏 Learning Git Branching：https://learngitbranching.js.org/?locale=zh_CN ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:5","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Linux（10 天） 企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。 后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。 知识 Linux 系统安装 环境变量 文件管理 用户管理 内存管理 磁盘管理 进程管理 网络管理 软件包管理 服务管理 日志管理 Linux 内核 常用命令 常用环境搭建 Shell 脚本编程 VIM 的使用 学习建议 多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。 一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。 每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。 记不住没关系，用文档查就行了。 先会用，再理解。 资源 视频 ⭐ 2021 韩顺平 一周学会Linux https://www.bilibili.com/video/BV1Sv411r7vd（基于 CentOS 7.6 版本较新） 书籍 《鸟哥的 Linux 私房菜 —— 基础篇》http://cn.linux.vbird.org/linux_basic/linux_basic.php（经典） 文档 Linux 工具快速教程：https://linuxtools-rst.readthedocs.io（基础、工具进阶、工具参考） 实战 ⭐ 蓝桥云课 Linux 基础入门：https://www.lanqiao.cn/courses/1 腾讯云动手实验室：https://cloud.tencent.com/developer/labs 阿里云体验实验室：https://developer.aliyun.com/adc/labs/ 阿里云知行实验室：https://start.aliyun.com/ 华为云沙箱实验室：https://lab.huaweicloud.com/ 社区 Linux 中国：https://linux.cn/ 工具 ⭐ Linux 命令搜索：https://wangchujiang.com/linux-command Linux 命令大全手册：https://www.linuxcool.com/ Linux 命令示例：http://linux-commands-examples.com/ 宝塔 Linux 面板：https://www.bt.cn/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:6","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"前端基础（14 天） 虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。 知识 HTML CSS JavaScript Ajax Vue 学习建议 不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。 资源 参见鱼皮原创的前端学习路线：https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:7","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 4：Java 企业开发进阶 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，解决实际问题 。 要了解为什么需要这个技术？什么时候用哪些技术？ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"设计模式（21 天） 设计模式是软件开发中解决一类问题的通用方法。 使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。 知识 创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程 单例模式 工厂方法模式 抽象工厂 建造者模式 原型模式 结构型模式：把类或对象结合在一起形成一个更大的结构 适配器模式 组合模式 装饰器模式 代理模式 享元模式 外观模式 桥接模式 行为型模式：类和对象如何交互，及划分责任和算法 迭代器模式 模板方法模式 策略模式 命令模式 状态模式 责任链模式 备忘录模式 观察者模式 访问者模式 中介者模式 解释器模式 学习建议 先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。 资源 书籍 ⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错） 《Head First 设计模式》 《大话设计模式》 《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读） 视频 尚硅谷图解 Java 设计模式：https://www.bilibili.com/video/BV1G4411c7N4 文档 菜鸟教程：https://www.runoob.com/design-pattern/design-pattern-tutorial.html 图说设计模式：https://design-patterns.readthedocs.io/zh_CN/latest/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"中间件（14 天） 除了框架外，企业项目开发也会用到大量独立的中间件，以解决某些实际问题，比如提高项目的性能、提高项目的稳定性和可靠性等。 下面分享几个最常用的主流中间件。 知识 Redis 缓存 数据类型 常用操作 Java 操作 Redis 主从模型搭建 哨兵集群搭建 日志持久化 应用场景 RabbitMQ 消息队列 消息队列的作用 生产消费模型 交换机模型 死信队列 延迟队列 消息持久化 Java 操作 集群搭建 Nginx 网关 Nginx 作用 正向代理 反向代理（负载均衡） 常用命令 配置 动静分离（网站部署） 集群搭建 学习建议 学会如何使用中间件并不难，先能够独立使用，了解他们的应用场景；再用 Java 来操作中间件，和项目相结合。 跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。 资源 视频 ⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：https://www.bilibili.com/video/BV1Rv41177Af（基于 Redis 6 的，推荐） ⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：https://www.bilibili.com/video/BV1cb4y1o7zz（很新很全面） ⭐ 尚硅谷 - Nginx 教程由浅入深：https://www.bilibili.com/video/BV1zJ411w7SV（讲的比较全面） ⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：https://www.bilibili.com/video/BV1rU4y1J785/（简单演示 Nginx 部署网站） 文档 Redis 命令参考：http://redisdoc.com/ Redis 面试题整理：https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md RabbitMQ 中文文档：http://rabbitmq.mr-ping.com/ Nginx 中文文档：https://www.nginx.cn/doc/index.html 书籍 《Redis 实战》（经典） 《RabbitMQ 实战：高效部署分布式消息队列》（经典） 工具 ⭐ Redis 在线练习：https://try.redis.io/（强烈推荐） ⭐ RabbitMQ 在线模拟器：http://tryrabbitmq.com/ Nginx 配置在线生成：https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN 相关技术 缓存：Memcached、Ehcache 队列：Kafka、ActiveMQ、TubeMQ、RocketMQ 网关：HAProxy ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Netty 网络编程（14 天） 开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。 很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。 知识 IO 模型（BIO / NIO） Channel Buffer Seletor Netty 模型 WebSocket 编程（动手做个聊天室） 学习建议 不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。 还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 思想。 资源 视频 ⭐ 尚硅谷Netty教程：https://www.bilibili.com/video/BV1DJ411m7NR Netty 技术演讲（中文字幕版）：https://www.youtube.com/watch?v=I8yy2Cy7dDI 文档 Netty 4 用户指南：https://www.w3cschool.cn/netty_4_user_guide/ 书籍 《Netty 实战》 相关技术 Vertx：http://vertxchina.github.io/vertx-translation-chinese/（比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"微服务（60 天） 随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。 因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。 换言之，想做大型项目，这块儿一定要好好学！ 知识 Dubbo 架构演进 RPC Zookeeper 服务提供者 服务消费者 项目搭建 微服务 微服务概念 Spring Cloud 框架 子父工程 服务注册与发现 注册中心 Eureka、Zookeeper、Consul Ribbon 负载均衡 Feign 服务调用 Hystrix 服务限流、降级、熔断 Resilience4j 服务容错 Gateway（Zuul）微服务网关 Config 分布式配置中心 分布式服务总线 分布式链路追踪 Spring Cloud Alibaba Nacos 注册、配置中心 OpenFeign 服务调用 Sentinel 流控 Seata 分布式事务 接口管理 Swagger 接口文档 Postman 接口测试 学习建议 时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。 这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。 分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。 资源 视频 ⭐ 尚硅谷 Dubbo 教程：https://www.bilibili.com/video/BV1ns411c7jV ⭐ 尚硅谷 SpringCloud（H版\u0026alibaba）框架开发教程（微服务分布式架构）：https://www.bilibili.com/video/BV18E411x7eT（把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！） 文档 Apache Dubbo 官方文档：https://dubbo.apache.org/zh/ Spring Cloud Alibaba 官方文档：https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md ⭐ Swagger 教学文档：https://doc.xiaominfo.com/（跟着快速开始直接用就好了） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:5","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"容器（7 天） 将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。 便于实现微服务、持续集成和交付。 知识 Docker 容器概念 镜像 部署服务 Dockerfile K8S（Kubernetes） 架构 部署应用 暴露服务 动态扩缩容 学习建议 会用 Docker / K8S 部署项目和服务就行，企业一般都有现成的平台直接用，面试考察不多，不用花太多时间。 资源 视频 ⭐【狂神说】Docker 最新超详细版教程通俗易懂：https://www.bilibili.com/video/BV1og4y1q7M4 K8S 视频教程：https://www.bilibili.com/video/BV1K5411N7j8 书籍 《深入浅出 Docker》：https://www.zhihu.com/pub/reader/119632192 文档 Docker — 从入门到实践：https://vuepress.mirror.docker-practice.com/ 菜鸟教程 Docker：https://www.runoob.com/docker/docker-tutorial.html 国外 Docker 官方文档：https://docs.docker.com/get-started/ 网站 Docker 中文社区：https://www.docker.org.cn/（强烈推荐，有很多 Docker 技术文章和学习笔记） Docker Blog：https://www.docker.com/blog/（国外 Docker 技术博客） 镜像源 Docker Hub：https://hub.docker.com 腾讯软件源：http://mirrors.tencent.com/#/index 阿里云 Docker 仓库：https://cr.console.aliyun.com/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:6","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"CI / CD（3 天） 持续集成 / 持续交付，贯穿整个研发到项目上线的过程，提高效率。 大公司一般都有自己的 CI / CD 平台。 知识 什么是 CI / CD CI / CD 有什么好处 使用任一 CI / CD 平台 学习建议 了解它是什么，并且实战使用任一 CI / CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。 真正要自己去搭建的时候，跟着官方文档来就行。 资源 视频 ⭐【狂神说】CI/CD到底是什么？十分钟理解企业级DevOps：https://www.bilibili.com/video/BV1zf4y127vu（讲的非常棒！带你快速理解 CI / CD 的作用和部分原理） 尚硅谷 - Jenkins 持续集成工具教程：https://www.bilibili.com/video/BV1GW411w7pn（实在要用到 Jenkins 再去学） 文档 Jenkins 官方文档：\u003chttps://www.jenkins.io/zh/ \u003e（有很多案例，要用的时候查一下就行了） 实战平台 ⭐ 微信云托管：https://cloud.weixin.qq.com/cloudrun 前端托管 Webify：https://cloud.tencent.com/product/webify（鱼皮给大家出过视频教程的 https://www.bilibili.com/video/BV11V411p7vf/） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:7","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 5：项目实战 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"学习建议 其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。 有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。 暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！ 有能力的朋友也可以试着用 GitHub 上的源码来学习啦~ 做一个完整的项目的确很不容易，建议大家根据自己的 时间、兴趣 选择 较新的、有配套源码的 教程，保持耐心。 下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"视频教程 尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：https://www.bilibili.com/video/BV1dQ4y1A75e（全栈项目，前后端讲得都很全面） 尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：https://www.bilibili.com/video/BV1bE411T7oZ（500 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面） 黑马 - 24 小时搞定 Java 毕设电商项目：https://www.bilibili.com/video/BV13f4y1r7fS 黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：https://www.bilibili.com/video/BV1Bo4y117zV 黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：https://www.bilibili.com/video/BV1Ub4y1f7rk 黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：https://www.bilibili.com/video/BV18A411L7UX 黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：https://www.bilibili.com/video/BV17v411V79c 黑马程序员 Java 项目《好客租房》：https://www.bilibili.com/video/BV1sZ4y1F7PD ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"项目源码（50 套） 电商秒杀 天猫整站 J2EE：https://how2j.cn/module/115.htm 天猫整站 SSM：https://how2j.cn/module/134.html 天猫整站 Springboot：https://how2j.cn/module/156.html mall-learning：https://github.com/macrozheng/mall-learningmall（学习教程，架构、业务、技术要点全方位解析） SpringBoot 电商商城系统 Mall4j：https://github.com/gz-yami/mall4j SpringBoot 完整电商系统 Mall：https://github.com/macrozheng/mall（包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现） newbee-mall：https://github.com/newbee-ltd/newbee-mall （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发） paascloud-master：https://github.com/paascloud/paascloud-master（基于 spring cloud + vue + oAuth2.0，前后端分离商城系统） mall-swarm：https://github.com/macrozheng/mall-swarm（一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统） onemall：https://github.com/YunaiV/onemall（mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba） litemall：https://github.com/linlinjava/litemall（又一个小商城，litemall = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端） xmall：https://github.com/Exrick/xmall （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统） miaosha：https://github.com/qiurunze123/miaosha （秒杀系统设计与实现） SecKill：https://github.com/hfbin/Seckill（基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统） 博客论坛 Mblog：开源 Java 博客系统 halo：一个优秀的开源博客发布应用 forum-java：一款用 Java（spring boot） 实现的现代化社区（论坛/问答/BBS/社交网络/博客）系统平台 vhr：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。 favorites-web:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。 community：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap NiterForum：尼特社区-NiterForum-一个论坛/社区程序。后端Springboot/MyBatis/Maven/MySQL，前端Thymeleaf/Layui。可供初学者，学习、交流使用。 VBlog：V部落，Vue+SpringBoot实现的多用户博客管理平台! NiceFish：SpringBoot/SpringCloud 前后端分离项目 My-Blog： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。 My-Blog-layui：layui 版本的 My-Blog : A simple \u0026 beautiful blogging system implemented with spring-boot \u0026 layui \u0026 thymeleaf \u0026 mybatis My Blog 是由 SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验 symphony：Java 实现的现代化社区 管理系统 Spring-Cloud-Admin：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。 bootshiro：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端 悟空CRM：基于jfinal+vue+ElementUI的前后端分离CRM系统 EL-ADMIN：基于 SpringBoot 的后台管理系统 pig：基于 Spring Boot 2.2、 Spring Cloud Hoxton \u0026 Alibaba、 OAuth2 的 RBAC 权限管理系统。 FEBS-Shiro：Spring Boot 2.1.3，Shiro1.4.0 \u0026 Layui 2.5.4 权限管理系统。 Spring Boot-Shiro-Vue：基于Spring Boot-Shiro-Vue 的权限管理 studentmanager：基于springboot+mybatis学生管理系统 jshERP：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。 HotelSystem：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架 开发平台 open-capacity-platform：微服务能力开发平台 jeecg-boot：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant Design\u0026Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！ 其他 学之思在线考试系统：一款 java + vue 的前后端分离的考试系统 PassJava-Platform：一款面试刷题的 Spring Cloud 开源系统 kkFileView：使用spring boot打造文件文档在线预览项目 dynamic-datasource：一个基于springboot的快速集成多数据源的启动器 moti-cloud：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者 threadandjuc：three-high-import 高可用\\高可靠\\高性能，三高多线程导入系统（该项目意义为理论贯通) proxyee-down：http下载工具，基于http代理，支持多连接分块下载 hosp_order：医院预约挂号系统，基于 SSM 框架 趋势投资 SpringCloud DiyTomcat ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 6：Java 高级 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 不满足于能做，而是通过更 深入 和 广泛 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"并发编程（21 天） 对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。 把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。 知识 线程和进程 线程状态 并行和并发 同步和异步 Synchronized Volatile 关键字 Lock 锁 死锁 可重入锁 线程安全 线程池 JUC 的使用 AQS Fork Join CAS 学习建议 并发编程入门不难，依然是 先学会使用 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。 资源 视频 ⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：https://www.bilibili.com/video/BV1Kw411Z7dF（特点是短、精、新） 黑马程序员全面深入学习Java并发编程：https://www.bilibili.com/video/BV16J411h7Rd（讲的很细、全面深入） 书籍 ⭐《Java并发编程实战》（国外的经典） ⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看） 项目 ⭐ Java 并发知识点总结：https://github.com/CL0610/Java-concurrency ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"JVM（30 天） 想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。 了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。 在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。 知识 JVM 内存结构 JVM 生命周期 主流虚拟机 Java 代码执行流程 类加载 类加载器 类加载过程 双亲委派机制 垃圾回收 垃圾回收器 垃圾回收策略 垃圾回收算法 StopTheWorld 字节码 内存分配和回收 JVM 性能调优 性能分析方法 常用工具 参数设置 学习建议 JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。 第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。 如果只是为了通过面试可以直接看更精简的视频，比如狂神的。 资源 视频 ⭐ 尚硅谷宋红康 - JVM 全套教程详解：https://www.bilibili.com/video/BV1PJ411n7xZ（讲得相当全面！附有实操） 【狂神说Java】JVM快速入门篇：https://www.bilibili.com/video/BV1iJ411d7jS（讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个） 书籍 ⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发） 项目 ⭐ Java 虚拟机底层原理知识总结：https://github.com/doocs/jvm 实战 阿里云 JVM 实战：https://developer.aliyun.com/graph/java/point/64 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"架构设计 分布式 分布式理论 CAP BASE 分布式缓存 Redis Memcached Etcd 一致性算法 Raft 一致性哈希 分布式事务 分布式 id 生成 分布式服务调用 分布式存储 分布式数据库 分布式文件系统 分布式协调 Zookeeper 分布式监控 Prometheus 分布式消息队列 RabbitMQ Kafka Apache Pulsar 分布式日志收集 Elastic Stack Loki 分布式搜索引擎 Elasticsearch 分布式链路追踪 Apache SkyWalking 分布式配置中心 Apollo Nacos 高可用 主从 异地多活 容灾备份 高并发 数据库 分库分表 读写分离 缓存 缓存雪崩 缓存击穿 缓存穿透 负载均衡 负载均衡算法 软硬件负载均衡（2、3、4、7 层） 其他 监控告警 领域驱动设计 应用安全 线上故障分析 服务网格 Serverless 云原生 学习建议 多看文章多思考 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 7：Java 求职 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 找到好工作 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"建议 尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求 雕琢一份优秀的简历，推荐阅读：https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA 多读面经，坚持刷算法 多参与面试，持续复盘总结 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"资源 岗位要求 阿里 Java 开发：https://campus.alibaba.com/position.htm?refno=12699 腾讯后台开发：https://join.qq.com/post_detail.html?pid=1\u0026id=101\u0026tid=2 腾讯全栈开发：https://join.qq.com/post_detail.html?pid=1\u0026id=137\u0026tid=2 腾讯运营开发：https://join.qq.com/post_detail.html?pid=1\u0026id=105\u0026tid=2 美团后端开发：https://campus.meituan.com/jobs?jobFamily=1\u0026jobId=4005\u0026jobType=1\u0026pageNo=2 华为软件开发：https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044 知识总结 ⭐ 牛客 Java 面试宝典：https://www.nowcoder.com/tutorial/94 ⭐ JavaGuide：https://snailclimb.gitee.io/javaguide/#/ ⭐ CS-Notes：http://www.cyc2018.xyz/ 阿里 Java 技术图谱：https://developer.aliyun.com/graph/java 面经 ⭐ 2021 最新 Java 笔试、面试题合集：https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ（密码：lkw1） ⭐ 牛客面经：https://www.nowcoder.com/discuss/experience?tagId=639 视频 ⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：https://www.bilibili.com/video/BV1Hy4y1B78T ⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：https://www.bilibili.com/video/BV1yU4y1J7Bb ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 8：持续学习 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 持续追求技术的深度和广度，培养自己的 核心竞争力 和 不可替代性 ，学无止境！ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"学习建议 自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"学习方向 框架源码 Spring SpringBoot SpringMVC MyBatis Netty Dubbo SpringCloud 计算机原理 《算法导论》：https://www.bilibili.com/video/av48922404 《现代操作系统》：https://www.bilibili.com/video/av9555596 《深入理解计算机系统》：https://www.bilibili.com/video/av31289365 《编译原理》： https://www.bilibili.com/video/av17649289 《计算机网络：自顶向下方法》：https://www.bilibili.com/video/av41404195 《计算机程序的构造和解释》：https://www.bilibili.com/video/av8515129 《数据库系统概念》：https://www.bilibili.com/video/av52007695 数据库 / 中间件 / 分布式 数据库 MySQL PostgreSQL 缓存 Redis 队列 Apache Kafka Apache Pulsar 搜索引擎 Elastic Stack 容器 Docker K8S 解决方案 广告 电商 搜索 游戏 即时通讯 社交 CMS ERP OA 架构 亿级流量架构 秒杀系统 架构选型能力 大数据 5V 特点 Hadoop HDFS MapReduce Spark Flink Storm Hive HBase Druid Kylin Pig Mahout 前沿技术 云原生：https://www.jianshu.com/p/a37baa7c3eff Quasar Framework：http://www.quasarchs.com/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"自学 Java 专题资源 GitHub Java 专区：https://github.com/topics/java GitHub Java 合集：https://github.com/akullpp/awesome-java StackOverflow：https://stackoverflow.com/questions/tagged/java（解决问题必备） 掘金 Java 专区：https://juejin.cn/tag/Java 美团技术团队：https://tech.meituan.com/ 阿里技术团队：https://102.alibaba.com/tech/list/ 有赞技术团队：https://tech.youzan.com/tag/back-end/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"尾声 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:10:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"编程误区 我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己） 忽视基础，急于求成 ❌（勿以浮沙筑高台） 数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升） 编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行） 每行代码都要追求完美 ❌（何为完美？每个人的定义不同） 用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹） 我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长） 跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 \u003e 2，切勿闭门造车，不过也要找到合适的同学去交流） 做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？） 遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长） 遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》） 花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵） 只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的） 单元测试不重要 ❌（一棍打死） 写文档不重要 ❌（一棍打死） 和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野） 收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？） 不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考） 资料参照：程序员鱼皮 （原作者创作不易，转载请注明原创者，谢谢） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:10:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Daily"],"content":"消去浮躁，沉淀精华.","date":"2022-08-07","objectID":"/blog/en/20220807/","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"去浮去燥，砥砺前行 ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:0","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"起因 回想起自己因为备考以及种种原因，已经将近一年没有真正自己独立开发代码了，会想之前手撕代码的日子还是很怀念的，虽让当时很累，天天能在电脑面前坐上个十几个小时（非卷王），但那时真的收获满满，心满意足😀，现在虽然已经成功上岸，但新的目标也随之而来，进入大厂，我深知进入大厂的难度，毕竟谁不想年入百万呢😁，今天我再次登陆我的GitHub时，看着当年满腔热血搭建的Blog，至今还没有发布任何像样文章，真是感慨万千，于是我今天又重新部署完成了我的Blog，以便记录自己的成长，完善自我，早日成为别人眼中的大牛🐮。 ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:1","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"计划 从现在开始，我要给自己制定相应日程目标，不能再每天只是娱乐至上了🙈 根据学习路线图查漏补缺（学习路线图后面会制作） 每天刷题，保持头脑（选择+编程） 遇到经常犯的错误或难题解决后，通过Blog记录下来，以便自己温习 每天空闲时间看看大牛技术分享以及分享的面经 ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:2","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"总结 虽然不知道后面会继续到哪里，但总算迈出了今天的第一步，后面我也会继续努力，朝着自己预期的目标拼劲全力，加油阿豪，未来可期！ ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:3","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Hugo"],"content":"Guide to emoji usage in Hugo and LoveIt.","date":"2019-10-01","objectID":"/blog/en/emoji/","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Emoji can be enabled in a Hugo project in a number of ways. The emojify function can be called directly in templates or Inline Shortcodes. To enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files. These begin and end with a colon and include the code of an emoji: Gone camping! :tent: Be back soon. That is so funny! :joy: The rendered output looks like this: Gone camping! ⛺ Be back soon. That is so funny! 😂 The following cheat sheet is a useful reference for emoji shorthand codes. ","date":"2019-10-01","objectID":"/blog/en/emoji/:0:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Smileys \u0026 Emotion ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Smiling icon code icon code 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Affection icon code icon code 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Tongue icon code icon code 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Hand icon code icon code 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Neutral Skeptical icon code icon code 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Sleepy icon code icon code 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Unwell icon code icon code 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Hat icon code icon code 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Glasses icon code icon code 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Concerned icon code icon code 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Negative icon code icon code 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Costume icon code icon code 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Cat Face icon code icon code 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Monkey Face icon code icon code 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:14","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Emotion icon code icon code 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:15","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"People \u0026 Body ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Fingers Open icon code icon code 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Fingers Partial icon code icon code 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Single Finger icon code icon code 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Fingers Closed icon code icon code 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hands icon code icon code 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Prop icon code icon code ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Body Parts icon code icon code 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person icon code icon code 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Gesture icon code icon code 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇 bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Role icon code icon code 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Fantasy icon code icon code 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Activity icon code icon code 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Sport icon code icon code 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Resting icon code icon code 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:14","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Family icon code icon code 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 💑 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:15","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Symbol icon code icon code 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:16","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animals \u0026 Nature ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Mammal icon code icon code 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Bird icon code icon code 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Amphibian icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Reptile icon code icon code 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Marine icon code icon code 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Bug icon code icon code 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Plant Flower icon code icon code 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Plant Other icon code icon code 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food \u0026 Drink ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Fruit icon code icon code 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Vegetable icon code icon code 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Prepared icon code icon code 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Asian icon code icon code 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Marine icon code icon code 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Sweet icon code icon code 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Drink icon code icon code 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Dishware icon code icon code 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Travel \u0026 Places ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Map icon code icon code 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Geographic icon code icon code 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Building icon code icon code 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Religious icon code icon code ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Other icon code icon code ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Ground icon code icon code 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Water icon code icon code ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Air icon code icon code ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hotel icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Time icon code icon code ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Sky \u0026 Weather icon code icon code 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Activities ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Event icon code icon code 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Award Medal icon code icon code 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Sport icon code icon code ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Game icon code icon code 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Arts \u0026 Crafts icon code icon code 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Objects ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Clothing icon code icon code 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Sound icon code icon code 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Music icon code icon code 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Musical Instrument icon code icon code 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Phone icon code icon code 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Computer icon code icon code 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Light \u0026 Video icon code icon code 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Book Paper icon code icon code 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Money icon code icon code 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Mail icon code icon code ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Writing icon code icon code ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Office icon code icon code 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Lock icon code icon code 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Tool icon code icon code 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:14","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Science icon code icon code ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:15","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Medical icon code icon code 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:16","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Household icon code icon code 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:17","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Other Object icon code icon code 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:18","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Symbols ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Sign icon code icon code 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Warning icon code icon code ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Arrow icon code icon code ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Religion icon code icon code 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Zodiac icon code icon code ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Av Symbol icon code icon code 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Math icon code icon code ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Punctuation icon code icon code ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Currency icon code icon code 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Keycap icon code icon code #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Alphabet icon code icon code 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Geometric icon code icon code 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Other Symbol icon code icon code ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Flags ","date":"2019-10-01","objectID":"/blog/en/emoji/:9:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Common Flags icon code icon code 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/blog/en/emoji/:9:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Country and Region Flags icon code icon code 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/blog/en/emoji/:9:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"}]
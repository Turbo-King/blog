[{"categories":["Java"],"content":"Lambda表达式","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"📝介绍 Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。 Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。 使用 Lambda 表达式可以使代码变的更加简洁紧凑。 Lambda表达式特性 可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。 可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。 可选的大括号：如果主体包含了一个语句，就不需要使用大括号。 可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。 ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:1:0","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"🌈使用场景 ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:0","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"遍历 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); for (String fruit : list) { System.out.println(fruit); } ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); list.forEach(fruit -\u003e System.out.println(fruit)); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:1","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"排序 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Collections.sort(list, new Comparator() { public int compare(String s1, String s2) { return s1.compareTo(s2); } }); ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Collections.sort(list, (s1, s2) -\u003e s1.compareTo(s2)); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:2","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"过滤 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List filteredList = new ArrayList(); for (String fruit : list) { if (fruit.startsWith(\"a\")) { filteredList.add(fruit); } } ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List filter = list.stream() .filter(fruit -\u003e fruit.startsWith(\"a\")) .collect(Collectors.toList()); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:3","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"映射 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List lengths = new ArrayList(); for (String fruit : list) { lengths.add(fruit.length()); } ✅ 使用Lambda表达式 List\u003cString\u003e list1 = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List\u003cInteger\u003elengths=list1.stream() .map(String::length) .collect(Collectors.toList()); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:4","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"规约 ❌ 常规方法 List\u003cInteger\u003e list = Arrays.asList(1, 2, 3, 4, 5); int sum = 0; for (int i : list) { sum += i; } ✅ 使用Lambda表达式 List\u003cInteger\u003e list = Arrays.asList(1, 2, 3, 4, 5); int sum = list.stream().reduce(0, Integer::sum); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:5","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"分组 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Map\u003cInteger, List\u003cString\u003e\u003e grouped = new HashMap\u003cInteger, List\u003cString\u003e\u003e(); for (String fruit : list) { int length = fruit.length(); if (!grouped.containsKey(length)) { grouped.put(length, new ArrayList()); } grouped.get(length).add(fruit); } ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); Map\u003cInteger, List\u003cString\u003e\u003e grouped = list.stream() .collect(Collectors.groupingBy(String::length)); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:6","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"函数式接口实现 ❌ 常规方法 public interface MyInterface { public void doSomething(String input); } MyInterface myObject = new MyInterface() { public void doSomething(String input) { System.out.println(input); } }; myObject.doSomething(\"Hello World\"); ✅ 使用Lambda表达式 public interface MyInterface { public void doSomething(String input); } MyInterface myObject = input -\u003e System.out.println(input); myObject.doSomething(\"Hello World\"); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:7","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"线程创建 ❌ 常规方法 Thread thread = new Thread(new Runnable() { public void run() { System.out.println(\"Thread is running.\"); } }); thread.start(); ✅ 使用Lambda表达式 Thread thread = new Thread(() -\u003e System.out.println(\"Thread is running.\")); thread.start(); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:8","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"Optional操作 ❌ 常规方法 String str = \"Hello World\"; if (str != null) { System.out.println(str.toUpperCase()); } ✅ 使用Lambda表达式 Optional.of(\"hello\") .map(String::toUpperCase) .ifPresent(System.out::println); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:9","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"Stream流水线操作 ❌ 常规方法 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List\u003cString\u003e filteredList = new ArrayList(); for (String fruit : list) { if (fruit.startsWith(\"a\")) { filteredList.add(fruit.toUpperCase()); } } Collections.sort(filteredList); ✅ 使用Lambda表达式 List\u003cString\u003e list = Arrays.asList(\"apple\", \"banana\", \"cherry\"); List\u003cString\u003e filteredList = list.stream() .filter(fruit -\u003e fruit.startsWith(\"a\")) .map(String::toUpperCase) .sorted() .collect(Collectors.toList()); ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:2:10","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"🏆总结 当你需要一个仅在一个地方有效的函数, 并且只做一件事情，那么就用 lambda。比如，lambda经常用在 sorted 函数的 key 参数中。所以，可以认为，lambda的主要目的是为了减少单行函数的定义。 lambda不会提高代码执行效率，它只是定义了一个匿名函数，使我们的代码更加简洁，而且在某种程度上可读性更高。 Note 如果可以使用for…if来完成的，坚决不用lambda。 如果使用lambda，lambda内不要包含循环，否则，最好定义函数来完成，使代码获得可重用性和更好的可读性。 ","date":"2023-05-19","objectID":"/blog/en/20230519_lambda/:3:0","tags":["java","lambda","函数式编程"],"title":"Lambda常见场景用法","uri":"/blog/en/20230519_lambda/"},{"categories":["Java"],"content":"剑指Offer","date":"2023-05-15","objectID":"/blog/en/20230515_code/","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"剑指Offer ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:0:0","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"简单 ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:0","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"斐波那契数列 描述 斐波那契数列 输入描述： 一个正整数n 返回值描述： 输出一个正整数。 示例1 输入：4 返回值：3 说明：根据斐波那契数列的定义可知 fib(1)=1,fib(2)=1,fib(3)=fib(3-1)+fib(3-2)=2,fib(4)=fib(4-1)+fib(4-2)=3，所以答案为3。 示例2 输入：1 返回值：1 示例3 输入：2 返回值：1 代码实现 public class Solution { public int Fibonacci(int n) { if(n==1||n==2)return 1; int[] a=new int[n+1]; a[1]=a[2]=1; for(int i=3;i\u003c=n;i++){ a[i]=a[i-1]+a[i-2]; } return a[n]; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:1","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"数组中重复的数字 描述 数组中重复的数字 示例1 输入：[2,3,1,0,2,5,3] 返回值：2 说明：2或3都是对的 代码实现 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param numbers int整型一维数组 * @return int整型 */ public int duplicate (int[] numbers) { // write code here int tep = 0; for(int i = 0;i \u003c numbers.length;i++){ tep = numbers[i]; int count = 0; for(int j = 0; j\u003c numbers.length;j++){ if(tep==numbers[j]){ count++; if(count\u003e1){ return tep; } } } } return -1; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:2","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"替换空格 描述 替换空格 示例1 输入：\"We Are Happy\" 返回值：\"We%20Are%20Happy\" 示例2 输入：\" \" 返回值：\"%20\" 代码实现 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param s string字符串 * @return string字符串 */ public String replaceSpace (String s) { // write code here return s.replace(\" \", \"%20\"); } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:3","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"从尾到头打印链表 描述 从尾到头打印链表 示例1 输入：{1,2,3} 返回值：[3,2,1] 示例2 输入：{67,0,24,58} 返回值：[58,24,0,67] 代码实现 /** * public class ListNode { * int val; * ListNode next = null; * * ListNode(int val) { * this.val = val; * } * } * */ import java.util.ArrayList; public class Solution { public ArrayList\u003cInteger\u003e printListFromTailToHead(ListNode listNode) { ArrayList\u003cInteger\u003e list = new ArrayList\u003c\u003e(); ListNode tmp = listNode; while(tmp!=null){ list.add(0,tmp.val); tmp = tmp.next; } return list; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:4","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"用两个栈实现队列 描述 用两个栈实现队列 示例1 输入：[\"PSH1\",\"PSH2\",\"POP\",\"POP\"] 返回值：1,2 说明： \"PSH1\":代表将1插入队列尾部 \"PSH2\":代表将2插入队列尾部 \"POP“:代表删除一个元素，先进先出=\u003e返回1 \"POP“:代表删除一个元素，先进先出=\u003e返回2 代码实现 import java.util.Stack; public class Solution { Stack\u003cInteger\u003e stack1 = new Stack\u003cInteger\u003e(); Stack\u003cInteger\u003e stack2 = new Stack\u003cInteger\u003e(); public void push(int node) { stack1.push(node); } public int pop() { if (stack2.size() \u003c= 0){ while (stack1.size() != 0){ stack2.push(stack1.pop()); } } return stack2.pop(); } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:5","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"旋转数组的最小数字 描述 旋转数组的最小数字 示例1 输入：[3,4,5,1,2] 返回值：1 示例2 输入：[3,100,200,3] 返回值：3 代码实现 import java.util.ArrayList; public class Solution { public int minNumberInRotateArray(int[] array) { if (array.length == 0) { return 0; } int min = array[0]; for (int e : array) { if (e \u003c min) { min = e; } } return min; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:6","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"二进制中1的个数 描述 二进制中1的个数 示例1 输入：10 返回值：2 说明： 十进制中10的32位二进制表示为0000 0000 0000 0000 0000 0000 0000 1010，其中有两个1。 示例2 输入：-1 返回值：32 说明： 负数使用补码表示 ，-1的32位二进制表示为1111 1111 1111 1111 1111 1111 1111 1111，其中32个1 代码实现 import java.util.*; public class Solution { public int NumberOf1(int n) { Scanner in = new Scanner(System.in); int count = 0; for (int i = 0; i \u003c 32; i++) { if ((n \u0026 (1 \u003c\u003c i)) != 0) { count++; } } return count; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:7","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"打印从1到最大的n位数 描述 打印从1到最大的n位数 示例1 输入：1 返回值：[1,2,3,4,5,6,7,8,9] 代码实现 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param n int整型 最大位数 * @return int整型一维数组 */ public int[] printNumbers (int n) { // write code here int length = (int)Math.pow(10, n); int []nums = new int[length-1]; for(int i=1;i\u003clength;i++){ nums[i-1]=i; } return nums; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:8","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"删除链表的节点 描述 删除链表的节点 示例1 输入：{2,5,1,9},5 返回值：{2,1,9} 说明： 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 2 -\u003e 1 -\u003e 9 示例2 输入：{2,5,1,9},1 返回值：{2,5,9} 说明： 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 2 -\u003e 5 -\u003e 9 代码实现 import java.util.*; /* * public class ListNode { * int val; * ListNode next = null; * public ListNode(int val) { * this.val = val; * } * } */ public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param head ListNode类 * @param val int整型 * @return ListNode类 */ public ListNode deleteNode (ListNode head, int val) { // write code here if(head.val == val) { return head.next; } ListNode newHead = head; while(newHead.next != null) { if(newHead.next.val == val) { newHead.next = newHead.next.next; } newHead = newHead.next; } return head; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:9","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"链表中倒数最后k个结点 描述 链表中倒数最后k个结点 示例1 输入：{1,2,3,4,5},2 返回值：{4,5} 说明：返回倒数第2个节点4，系统会打印后面所有的节点来比较。 示例2 输入：{2},8 返回值：{} 代码实现 import java.util.*; /* * public class ListNode { * int val; * ListNode next = null; * public ListNode(int val) { * this.val = val; * } * } */ public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param pHead ListNode类 * @param k int整型 * @return ListNode类 */ public ListNode FindKthToTail (ListNode pHead, int k) { // write code here // 快慢指针思想 ListNode fast = pHead; ListNode slow = pHead; int step=0; if (pHead == null) { return null; } // 快指针先走k步 while (fast != null \u0026\u0026 step != k) { fast = fast.next; step++; } if (step \u003c k) { return null; } // 慢指针与快指针同步 while (fast != null) { fast = fast.next; slow = slow.next; } return slow; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:10","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"反转链表 描述 反转链表 示例1 输入：{1,2,3} 返回值：{3,2,1} 示例2 输入：{} 返回值：{} 说明：空链表则输出空 代码实现 /* public class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } }*/ public class Solution { public ListNode ReverseList(ListNode head) { ListNode pre = null; ListNode nextOne = null; while (head != null) { nextOne = head.next; head.next = pre; pre = head; head = nextOne; } return pre; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:11","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"合并两个排序的链表 描述 合并两个排序的链表 示例1 输入：{1,3,5},{2,4,6} 返回值：{1,2,3,4,5,6} 示例2 输入：{},{} 返回值：{} 示例3 输入：{-1,2,4},{1,3,4} 返回值：{-1,1,2,3,4,4} 代码实现 /* public class ListNode { int val; ListNode next = null; ListNode(int val) { this.val = val; } }*/ public class Solution { public ListNode Merge(ListNode list1, ListNode list2) { if (list1 == null \u0026\u0026 list2 == null) { return null; } ListNode head = new ListNode(-1); ListNode pre = head; while (list1 != null \u0026\u0026 list2 != null) { if (list1.val \u003c list2.val) { pre.next = list1; list1 = list1.next; } else if (list1.val \u003e list2.val) { pre.next = list2; list2 = list2.next; } else { pre.next = list1; list1 = list1.next; pre=pre.next; pre.next = list2; list2 = list2.next; } pre=pre.next; } pre.next = list1 == null ? list2 : list1; return head.next; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:12","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"二叉树的镜像 描述 二叉树的镜像 示例1 输入：{8,6,10,5,7,9,11} 返回值：{8,10,6,11,9,7,5} 说明：如题面所示 示例2 输入：{} 返回值：{} 代码实现 import java.util.*; /* * public class TreeNode { * int val = 0; * TreeNode left = null; * TreeNode right = null; * public TreeNode(int val) { * this.val = val; * } * } */ public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * * * @param pRoot TreeNode类 * @return TreeNode类 */ public TreeNode Mirror (TreeNode pRoot) { // write code here if (pRoot == null) { return null; } TreeNode tmp = pRoot.left; pRoot.left = pRoot.right ; pRoot.right = tmp; Mirror(pRoot.left); Mirror(pRoot.right); return pRoot; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:13","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"对称的二叉树 描述 对称的二叉树 示例1 输入：{1,2,2,3,4,4,3} 返回值：true 示例2 输入：{8,6,9,5,7,7,5} 返回值：false 代码实现 /* public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ import java.util.*; public class Solution { boolean isSymmetrical(TreeNode pRoot) { if (pRoot == null) { return true; } Queue\u003cTreeNode\u003e left = new LinkedList(); Queue\u003cTreeNode\u003e right = new LinkedList(); left.offer(pRoot.left); right.offer(pRoot.right); while (!left.isEmpty() \u0026\u0026 !right.isEmpty()) { TreeNode tn_left = left.poll(); TreeNode tn_right = right.poll(); if (tn_left == null \u0026\u0026 tn_right == null) { continue; } if (tn_left == null || tn_right == null || tn_left.val != tn_right.val) { return false; } left.offer(tn_left.left); left.offer(tn_left.right); right.offer(tn_right.right); right.offer(tn_right.left); } return true ; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:14","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"顺时针打印矩阵 描述 顺时针打印矩阵 示例1 输入：[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] 返回值：[1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10] 示例2 输入：[[1,2,3,1],[4,5,6,1],[4,5,6,1]] 返回值：[1,2,3,1,1,1,6,5,4,4,5,6] 代码实现 import java.util.*; public class Solution { public ArrayList\u003cInteger\u003e printMatrix(int [][] matrix) { ArrayList\u003cInteger\u003e nums = new ArrayList(); if (matrix == null || matrix.length == 0 || matrix[0].length == 0) { return nums; } int up = 0, down = matrix.length - 1, left = 0, right = matrix[0].length - 1; while (true) { // 往右走 for (int index = left; index \u003c= right; index++) { nums.add(matrix[up][index]); } up++; if (up \u003e down) { break; } // 往下走 for (int index = up; index \u003c= down; index++) { nums.add(matrix[index][right]); } right--; if (left \u003e right) { break; } // 往左走 for (int index = right; index \u003e= left; index--) { nums.add(matrix[down][index]); } down--; if (up \u003e down) { break; } // 往上走 for (int index = down; index \u003e= up; index--) { nums.add(matrix[index][left]); } left++; if (left \u003e right) { break; } } return nums; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:15","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"包含min函数的栈 描述 包含min函数的栈 示例1 输入：[\"PSH-1\",\"PSH2\",\"MIN\",\"TOP\",\"POP\",\"PSH1\",\"TOP\",\"MIN\"] 返回值：-1,2,1,-1 示例2 输入：\" \" 返回值：\"%20\" 代码实现 import java.util.Stack; public class Solution { Stack\u003cInteger\u003enum = new Stack\u003c\u003e(); Stack\u003cInteger\u003emin = new Stack\u003c\u003e(); public void push(int node) { num.push(node); if (min.isEmpty() || min.peek() \u003e node) { min.push(node); } else { min.push(min.peek()); } } public void pop() { num.pop(); min.pop(); } public int top() { int top_val = num.peek(); return top_val; } public int min() { return min.peek(); } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:16","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"从上往下打印二叉树 描述 从上往下打印二叉树 示例1 输入：{8,6,10,#,#,2,1} 返回值：[8,6,10,2,1] 示例2 输入：{5,4,#,3,#,2,#,1} 返回值：[5,4,3,2,1] 代码实现 import java.util.*; /** public class TreeNode { int val = 0; TreeNode left = null; TreeNode right = null; public TreeNode(int val) { this.val = val; } } */ public class Solution { ArrayList\u003cInteger\u003e num = new ArrayList(); Queue\u003cTreeNode\u003enode = new LinkedList(); public ArrayList\u003cInteger\u003e PrintFromTopToBottom(TreeNode root) { node.add(root); while (!node.isEmpty()) { TreeNode tmp = node.poll(); if (tmp != null) { num.add(tmp.val); node.add(tmp.left); node.add(tmp.right); } } return num; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:17","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"数组中出现次数超过一半的数字 描述 数组中出现次数超过一半的数字 示例1 输入： [1,2,3,2,2,2,5,4,2] 返回值：2 示例2 输入：[3,3,3,3,2,2,2] 返回值：3 示例3 输入：[1] 返回值：1 代码实现 public class Solution { public int MoreThanHalfNum_Solution(int [] array) { int []count = new int[10000]; if(array.length==1){ return array[0]; } for (int i = 0; i \u003c array.length; i++) { count[array[i]]++; } int mid = array.length \u003e\u003e 1; int target = 0; for (int i = 0; i \u003c count.length; i++) { if (count[i] \u003e mid) { target = i; break; } } return target; } } ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:18","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Java"],"content":"连续子数组的最大和 描述 连续子数组的最大和 示例1 输入：[1,-2,3,10,-4,7,2,-5] 返回值：18 说明：经分析可知，输入数组的子数组[3,10,-4,7,2]可以求得最大和为18 示例2 输入：[2] 返回值：2 示例3 输入：[-10] 返回值：-10 代码实现 public class Solution { public int FindGreatestSumOfSubArray(int[] array) { // 未优化 // int []dp = new int[array.length]; // int max = array[0]; // dp[0] = array[0]; // for (int i = 1; i \u003c array.length; i++) { // dp[i] = Math.max(array[i], dp[i - 1] + array[i]); // max = Math.max(max, dp[i]); // } // return max; // 优化空间复杂度 int sum=array[0]; int max=array[0]; for(int i=1;i\u003carray.length;i++){ sum=Math.max(sum+array[i],array[i]); max=Math.max(max,sum); } return max; } } 未完待续··· ","date":"2023-05-15","objectID":"/blog/en/20230515_code/:1:19","tags":["算法","Java"],"title":"剑指Offer-个人题解","uri":"/blog/en/20230515_code/"},{"categories":["Redis"],"content":"Redis集群","date":"2023-05-03","objectID":"/blog/en/20230503_colony/","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"Redis集群搭建 Redis 是一个高性能的开源键值存储数据库，它支持多种数据结构，如字符串、哈希、列表、集合和有序集合。它的出色性能和易于使用的特性，使得 Redis 成为了许多应用程序的首选数据存储方案。然而，随着业务的增长，单节点 Redis 可能会面临诸如存储容量、读写性能等方面的限制。为了解决这些问题，Redis 提供了集群模式，使得用户可以通过水平扩展的方式来横向扩展 Redis 的性能和存储能力。在本此内容中，我 将介绍Redis 集群的几种部署方法，帮助读者了解如何使用 Redis 集群来满足业务需求，提高应用程序的性能和可扩展性。 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:0:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"Redis主从集群 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"集群结构 我们搭建的主从集群结构如图： 主从集群结构 共包含三个节点，一个主节点，两个从节点。 这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下： IP PORT 角色 192.168.150.101 7001 master 192.168.150.101 7002 slave 192.168.150.101 7003 slave ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:1","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"准备实例和配置 要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。 1）创建目录 我们创建三个文件夹，名字分别叫7001、7002、7003： # 进入/tmp目录 cd /tmp # 创建目录 mkdir 7001 7002 7003 如图： 2）恢复原始配置 修改redis-6.2.4/redis.conf文件，将其中的持久化模式改为默认的RDB模式，AOF保持关闭状态。 # 开启RDB # save \"\" save 3600 1 save 300 100 save 60 10000 # 关闭AOF appendonly no 3）拷贝配置文件到每个实例目录 然后将redis-6.2.4/redis.conf文件拷贝到三个目录中（在/tmp目录执行下列命令）： # 方式一：逐个拷贝 cp redis-6.2.4/redis.conf 7001 cp redis-6.2.4/redis.conf 7002 cp redis-6.2.4/redis.conf 7003 # 方式二：管道组合命令，一键拷贝 echo 7001 7002 7003 | xargs -t -n 1 cp redis-6.2.4/redis.conf 4）修改每个实例的端口、工作目录 修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将rdb文件保存位置都修改为自己所在目录（在/tmp目录执行下列命令）： sed -i -e 's/6379/7001/g' -e 's/dir .\\//dir \\/tmp\\/7001\\//g' 7001/redis.conf sed -i -e 's/6379/7002/g' -e 's/dir .\\//dir \\/tmp\\/7002\\//g' 7002/redis.conf sed -i -e 's/6379/7003/g' -e 's/dir .\\//dir \\/tmp\\/7003\\//g' 7003/redis.conf 5）修改每个实例的声明IP 虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，格式如下： # redis实例的声明 IP replica-announce-ip 192.168.150.101 每个目录都要改，我们一键完成修改（在/tmp目录执行下列命令）： # 逐一执行 sed -i '1a replica-announce-ip 192.168.150.101' 7001/redis.conf sed -i '1a replica-announce-ip 192.168.150.101' 7002/redis.conf sed -i '1a replica-announce-ip 192.168.150.101' 7003/redis.conf # 或者一键修改 printf '%s\\n' 7001 7002 7003 | xargs -I{} -t sed -i '1a replica-announce-ip 192.168.150.101' {}/redis.conf ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:2","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"启动 为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令： # 第1个 redis-server 7001/redis.conf # 第2个 redis-server 7002/redis.conf # 第3个 redis-server 7003/redis.conf 启动后： redis集群启动 如果要一键停止，可以运行下面命令： printf '%s\\n' 7001 7002 7003 | xargs -I{} -t redis-cli -p {} shutdown ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:3","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"开启主从关系 现在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。 有临时和永久两种模式： 修改配置文件（永久生效） 在redis.conf中添加一行配置：slaveof \u003cmasterip\u003e \u003cmasterport\u003e 使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）： slaveof \u003cmasterip\u003e \u003cmasterport\u003e 注意：在5.0以后新增命令replicaof，与salveof效果一致。 这里我们为了演示方便，使用方式二。 通过redis-cli命令连接7002，执行下面命令： # 连接 7002 redis-cli -p 7002 # 执行slaveof slaveof 192.168.150.101 7001 通过redis-cli命令连接7003，执行下面命令： # 连接 7003 redis-cli -p 7003 # 执行slaveof slaveof 192.168.150.101 7001 然后连接 7001节点，查看集群状态： # 连接 7001 redis-cli -p 7001 # 查看状态 info replication 结果： 查看redis集群状态 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:4","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"测试 执行下列操作以测试： 利用redis-cli连接7001，执行set num 123 利用redis-cli连接7002，执行get num，再执行set num 666 利用redis-cli连接7003，执行get num，再执行set num 888 可以发现，只有在7001这个master节点上可以执行写操作，7002和7003这两个slave节点只能执行读操作。 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:1:5","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"搭建哨兵集群 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"集群结构 这里我们搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图： redis哨兵集群结构 三个sentinel实例信息如下： 节点 IP PORT s1 192.168.150.101 27001 s2 192.168.150.101 27002 s3 192.168.150.101 27003 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:1","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"准备实例和配置 要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。 我们创建三个文件夹，名字分别叫s1、s2、s3： # 进入/tmp目录 cd /tmp # 创建目录 mkdir s1 s2 s3 如图： 准备实例 然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容： port 27001 sentinel announce-ip 192.168.150.101 sentinel monitor mymaster 192.168.150.101 7001 2 sentinel down-after-milliseconds mymaster 5000 sentinel failover-timeout mymaster 60000 dir \"/tmp/s1\" 解读： port 27001：是当前sentinel实例的端口 sentinel monitor mymaster 192.168.150.101 7001 2：指定主节点信息 mymaster：主节点名称，自定义，任意写 192.168.150.101 7001：主节点的ip和端口 2：选举master时的quorum值 然后将s1/sentinel.conf文件拷贝到s2、s3两个目录中（在/tmp目录执行下列命令）： # 方式一：逐个拷贝 cp s1/sentinel.conf s2 cp s1/sentinel.conf s3 # 方式二：管道组合命令，一键拷贝 echo s2 s3 | xargs -t -n 1 cp s1/sentinel.conf 修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003： sed -i -e 's/27001/27002/g' -e 's/s1/s2/g' s2/sentinel.conf sed -i -e 's/27001/27003/g' -e 's/s1/s3/g' s3/sentinel.conf ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:2","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"启动 为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令： # 第1个 redis-sentinel s1/sentinel.conf # 第2个 redis-sentinel s2/sentinel.conf # 第3个 redis-sentinel s3/sentinel.conf 启动后： 哨兵集群启动 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:3","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"测试 尝试让master节点7001宕机，查看sentinel日志： sentinel日志 查看7003的日志： 7003的日志 查看7002的日志： 7002的日志 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:2:4","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"搭建分片集群 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:0","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"集群结构 分片集群需要的节点数量较多，这里我们搭建一个最小的分片集群，包含3个master节点，每个master包含一个slave节点，结构如下： redis分片集群结构 这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下： IP PORT 角色 192.168.150.101 7001 master 192.168.150.101 7002 master 192.168.150.101 7003 master 192.168.150.101 8001 slave 192.168.150.101 8002 slave 192.168.150.101 8003 slave ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:1","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"准备实例和配置 删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录： # 进入/tmp目录 cd /tmp # 删除旧的，避免配置干扰 rm -rf 7001 7002 7003 # 创建目录 mkdir 7001 7002 7003 8001 8002 8003 在/tmp下准备一个新的redis.conf文件，内容如下： port 6379 # 开启集群功能 cluster-enabled yes # 集群的配置文件名称，不需要我们创建，由redis自己维护 cluster-config-file /tmp/6379/nodes.conf # 节点心跳失败的超时时间 cluster-node-timeout 5000 # 持久化文件存放目录 dir /tmp/6379 # 绑定地址 bind 0.0.0.0 # 让redis后台运行 daemonize yes # 注册的实例ip replica-announce-ip 192.168.150.101 # 保护模式 protected-mode no # 数据库数量 databases 1 # 日志 logfile /tmp/6379/run.log 将这个文件拷贝到每个目录下： # 进入/tmp目录 cd /tmp # 执行拷贝 echo 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 cp redis.conf 修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致： # 进入/tmp目录 cd /tmp # 修改配置文件 printf '%s\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t sed -i 's/6379/{}/g' {}/redis.conf ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:2","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"启动 因为已经配置了后台启动模式，所以可以直接启动服务： # 进入/tmp目录 cd /tmp # 一键启动所有服务 printf '%s\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t redis-server {}/redis.conf 通过ps查看状态： ps -ef | grep redis 发现服务都已经正常启动： redis服务状态 如果要关闭所有进程，可以执行命令： ps -ef | grep redis | awk '{print $2}' | xargs kill 或者（推荐这种方式）： printf '%s\\n' 7001 7002 7003 8001 8002 8003 | xargs -I{} -t redis-cli -p {} shutdown ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:3","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"创建集群 虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。 我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。 1）Redis5.0之前 Redis5.0之前集群命令都是用redis安装包下的src/redis-trib.rb来实现的。因为redis-trib.rb是有ruby语言编写的所以需要安装ruby环境。 # 安装依赖 yum -y install zlib ruby rubygems gem install redis 然后通过命令来管理集群： # 进入redis的src目录 cd /tmp/redis-6.2.4/src # 创建集群 ./redis-trib.rb create --replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003 2）Redis5.0以后 我们使用的是Redis6.2.4版本，集群管理以及集成到了redis-cli中，格式如下： redis-cli --cluster create --cluster-replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003 命令说明： redis-cli --cluster或者./redis-trib.rb：代表集群操作命令 create：代表是创建集群 --replicas 1或者--cluster-replicas 1 ：指定集群中每个master的副本个数为1，此时节点总数 ÷ (replicas + 1) 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master 运行后的样子： 服务运行详情 这里输入yes，则集群开始创建： 构建状态 通过命令可以查看集群状态： redis-cli -p 7001 cluster nodes 集群状态 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:4","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Redis"],"content":"测试 尝试连接7001节点，存储一个数据： # 连接 redis-cli -p 7001 # 存储数据 set num 123 # 读取数据 get num # 再次存储 set a 1 结果悲剧了： 连接7001节点 集群操作时，需要给redis-cli加上-c参数才可以： redis-cli -c -p 7001 这次可以了： 连接重试 ","date":"2023-05-03","objectID":"/blog/en/20230503_colony/:3:5","tags":["Redis","Java","NoSQL"],"title":"Redis集群","uri":"/blog/en/20230503_colony/"},{"categories":["Technology"],"content":"设计模式讲解","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"浅谈设计模式 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:0:0","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"前言 Note 一个 注意 横幅 Abstract 一个 摘要 横幅 Info 一个 信息 横幅 Tip 一个 技巧 横幅 Success 一个 成功 横幅 Question 一个 问题 横幅 Warning 一个 警告 横幅 Failure 一个 失败 横幅 Danger 一个 危险 横幅 Bug 一个 Bug 横幅 Example 一个 示例 横幅 Quote 一个 引用 横幅 编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性 等多方面的挑战，设计模式是为了让程序(软件)，具有更好： 代码重用性（即：相同的代码，不用多次编写） 可读性（即：编程规范性，便于其他程序员的阅读与理解） 可扩展性（即：当需要增加新的功能时，非常方便，称为可维护性） 可靠性（即：当我们增加新的功能后，对原来的功能没有影响） 使程序呈现高内聚，低耦合的特性 设计模式包含了面向对象的精髓：“懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要”。 Scott Mayers 在其巨著《Effective C++》就曾经说过：C++老手和 C++新手的区别就是前者手背上有很多伤疤。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:1:0","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"设计模式七大原则 设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么这样设计的依据） 设计模式常用的七大原则 单一职责原则 接口隔离原则 依赖倒转（倒置）原则 里氏替换原则 开闭原则 迪米特法则 合成服用原则 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:0","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"单一职责原则 介绍 对类来说，一个类应该只负责一项职责。如类A负责两个不同的职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2。类图如下所示 单一职责原则 单一职责原则注意事项和细节 单一职责原则 降低类的复杂度，一个类只负责一项职责。 提高类的可读性，可维护性。 降低变更引起的风险。 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中的方法数量足够少，可以在方法级别保持单一职责原则。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:1","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"接口隔离原则 介绍 客户端不应该依赖他不需要的接口，即对类对另一个类的依赖应该建立在最小的接口上。 接口隔离原则-未拆分 类A通过接口Interface1依赖类B，类C通过Interface1依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法。 隔离原则应当如下处理： 将接口Interface1拆分成为几个独立的接口（这里我们拆分成为3个接口），类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。 使用接口隔离原则改进 步骤 类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法 将接口Interface1拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则 接口Interface1中出现的方法，根据实际情况拆分为三个接口 拆分实现如下： 接口隔离原则-拆分 public class Segregation { public static void main(String[] args) { A a = new A(); a.depend1(new B()); // A类通过接口去依赖B类 a.depend2(new B()); a.depend3(new B()); C c = new C(); c.depend1(new D()); // C类通过接口去依赖D类 c.depend4(new D()); c.depend5(new D()); } } interface Interface1 { void operation1(); } interface Interface2 { void operation2(); void operation3(); } interface Interface3 { void operation4(); void operation5(); } class D implements Interface1, Interface3 { @Override public void operation1() { System.out.println(\"D 实现了 operation1\"); } @Override public void operation4() { System.out.println(\"D 实现了 operation4\"); } @Override public void operation5() { System.out.println(\"D 实现了 operation5\"); } } class B implements Interface1, Interface2 { @Override public void operation1() { System.out.println(\"B 实现了 operation1\"); } @Override public void operation2() { System.out.println(\"B 实现了 operation2\"); } @Override public void operation3() { System.out.println(\"B 实现了 operation3\"); } } // A类通过接口Interface依赖使用B类，用到了1，2，3方法 class A { public void depend1(Interface1 interface1) { interface1.operation1(); } public void depend2(Interface2 interface2) { interface2.operation2(); } public void depend3(Interface2 interface2) { interface2.operation3(); } } // C类通过接口Interface依赖D类，用到了1，4，5方法 class C { public void depend1(Interface1 interface1) { interface1.operation1(); } public void depend4(Interface3 interface3) { interface3.operation4(); } public void depend5(Interface3 interface3) { interface3.operation5(); } } ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:2","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"依赖倒转原则 介绍 依赖倒转原则(Dependence Inversion Principle)是指： 高层模块不应该依赖底层模块，二者都应该依赖其抽象 抽象不应该依赖细节，细节应该依赖抽象 依赖倒转(倒置)的中心思想是面向接口编程 依赖倒转原则是基于这样的设计原理：相较于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的框架比以细节为基础的框架要稳定的多。在Java中，抽象指的是借口或抽象类，细节就是具体的实现类 使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成 依赖倒转 依赖关系传递的三种方式 接口传递 构造方法传递 setter方式传递 public class DependencyPass { public static void main(String[] args) { // TODO Auto-generated method stub } } // 方式1： 通过接口传递实现依赖 // 开关的接口 interface IOpenAndClose { public void open(ITV tv); //抽象方法,接收接口 } interface ITV { //ITV接口 public void play(); } // 实现接口 class OpenAndClose implements IOpenAndClose { public void open(ITV tv) { tv.play(); } } // 方式2: 通过构造方法依赖传递 interface IOpenAndClose { public void open(); //抽象方法 } interface ITV { //ITV接口 public void play(); } class OpenAndClose implements IOpenAndClose { public ITV tv; public OpenAndClose(ITV tv) { this.tv = tv; } public void open() { this.tv.play(); } } // 方式3 , 通过setter方法传递 interface IOpenAndClose { public void open(); // 抽象方法 public void setTv(ITV tv); } interface ITV { // ITV接口 public void play(); } class OpenAndClose implements IOpenAndClose { private ITV tv; public void setTv(ITV tv) { this.tv = tv; } public void open() { this.tv.play(); } } 依赖倒转原则的注意事项和细节 依赖倒转原则 底层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好 变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化 继承时遵循里氏替换原则 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:3","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"里氏替换原则 OO中的继承性的思考和说明 继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然他不强制要求所有的子类必须遵循这些契约，但是如果自类对这些已经实现的方法随意修改，就会对整个继承体系造成破坏 继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障 介绍 里氏替换原则(Liskov Substitution Principle)在1988年，由麻省理工学院里一位姓里的女士提出的 如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有的引用基类的地方必须能透明地使用其子类的对象 在使用继承，遵循里氏替换原则，在子类中尽量不要重写父类的方法 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过耦合、组合、依赖来解决问题 里氏替换 里氏替换原则通用做法：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合、组合等关系替代。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:4","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"开闭原则 介绍 开闭原则(Open Closed Principle)是编程中最基础、最重要的设计原则 一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化 编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则 类图演示 public class Ocp { public static void main(String[] args) { //使用看看存在的问题 GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); graphicEditor.drawShape(new Triangle()); } } //这是一个用于绘图的类 [使用方] class GraphicEditor { //接收Shape对象，然后根据type，来绘制不同的图形 public void drawShape(Shape s) { if (s.m_type == 1) drawRectangle(s); else if (s.m_type == 2) drawCircle(s); else if (s.m_type == 3) drawTriangle(s); } //绘制矩形 public void drawRectangle(Shape r) { System.out.println(\" 绘制矩形 \"); } //绘制圆形 public void drawCircle(Shape r) { System.out.println(\" 绘制圆形 \"); } //绘制三角形 public void drawTriangle(Shape r) { System.out.println(\" 绘制三角形 \"); } } //Shape类，基类 class Shape { int m_type; } class Rectangle extends Shape { Rectangle() { super.m_type = 1; } } class Circle extends Shape { Circle() { super.m_type = 2; } } //新增画三角形 class Triangle extends Shape { Triangle() { super.m_type = 3; } } 演示方式优缺点 代码易于理解，操作简单 缺点是违反了设计模式的OCP原则，即对扩展开放（提供方），对修改关闭（适用方）。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码 比如我们这时要新增加一个图形种类三角形，我们需要修改较多地方 优化分析 把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承Shape，并实现draw方法即可。（使用方的代码就不需要修改，即可满足开闭原则） public class Ocp { public static void main(String[] args) { //使用看看存在的问题 GraphicEditor graphicEditor = new GraphicEditor(); graphicEditor.drawShape(new Rectangle()); graphicEditor.drawShape(new Circle()); graphicEditor.drawShape(new Triangle()); graphicEditor.drawShape(new OtherGraphic()); } } //这是一个用于绘图的类 [使用方] class GraphicEditor { //接收Shape对象，调用draw方法 public void drawShape(Shape s) { s.draw(); } } //Shape类，基类 abstract class Shape { int m_type; public abstract void draw();//抽象方法 } class Rectangle extends Shape { Rectangle() { super.m_type = 1; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制矩形 \"); } } class Circle extends Shape { Circle() { super.m_type = 2; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制圆形 \"); } } //新增画三角形 class Triangle extends Shape { Triangle() { super.m_type = 3; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制三角形 \"); } } //新增一个图形 class OtherGraphic extends Shape { OtherGraphic() { super.m_type = 4; } @Override public void draw() { // TODO Auto-generated method stub System.out.println(\" 绘制其它图形 \"); } } ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:5","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"迪米特法则 介绍 一个对象应该对其他对象保持最少的了解 类和类关于越密切，耦合度就越大 迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息 迪米特法则还有个更简单的定义：只与直接的朋友通信 直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式有很多：依赖、关联、组合、聚合等。其中，我们成出现的成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部 实例应用 描述：有一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的ID import java.util.ArrayList; import java.util.List; //客户端 public class Demeter { public static void main(String[] args) { //创建了一个 SchoolManager 对象 SchoolManager schoolManager = new SchoolManager(); //输出学院的员工id 和 学校总部的员工信息 schoolManager.printAllEmployee(new CollegeManager()); } } //学校总部员工类 class Employee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //学院的员工类 class CollegeEmployee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //管理学院员工的管理类 class CollegeManager { //返回学院的所有员工 public List\u003cCollegeEmployee\u003e getAllEmployee() { List\u003cCollegeEmployee\u003e list = new ArrayList\u003cCollegeEmployee\u003e(); for (int i = 0; i \u003c 10; i++) { //这里我们增加了10个员工到 list CollegeEmployee emp = new CollegeEmployee(); emp.setId(\"学院员工id= \" + i); list.add(emp); } return list; } } //学校管理类 //分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager //CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 class SchoolManager { //返回学校总部的员工 public List\u003cEmployee\u003e getAllEmployee() { List\u003cEmployee\u003e list = new ArrayList\u003cEmployee\u003e(); for (int i = 0; i \u003c 5; i++) { //这里我们增加了5个员工到 list Employee emp = new Employee(); emp.setId(\"学校总部员工id= \" + i); list.add(emp); } return list; } //该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) { //分析问题 //1. 这里的 CollegeEmployee 不是 SchoolManager的直接朋友 //2. CollegeEmployee 是以局部变量方式出现在 SchoolManager //3. 违反了 迪米特法则 //获取到学院员工 List\u003cCollegeEmployee\u003e list1 = sub.getAllEmployee(); System.out.println(\"------------学院员工------------\"); for (CollegeEmployee e : list1) { System.out.println(e.getId()); } //获取到学校总部员工 List\u003cEmployee\u003e list2 = this.getAllEmployee(); System.out.println(\"------------学校总部员工------------\"); for (Employee e : list2) { System.out.println(e.getId()); } } } 应用实例改进 前面设计的问题在于SchoolManager中，CollegeEmployee类并不是SchoolManager类的直接朋友 按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合 import java.util.ArrayList; import java.util.List; //客户端 public class Demeter { public static void main(String[] args) { System.out.println(\"~~~使用迪米特法则的改进~~~\"); //创建了一个 SchoolManager 对象 SchoolManager schoolManager = new SchoolManager(); //输出学院的员工id 和 学校总部的员工信息 schoolManager.printAllEmployee(new CollegeManager()); } } //学校总部员工类 class Employee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //学院的员工类 class CollegeEmployee { private String id; public void setId(String id) { this.id = id; } public String getId() { return id; } } //管理学院员工的管理类 class CollegeManager { //返回学院的所有员工 public List\u003cCollegeEmployee\u003e getAllEmployee() { List\u003cCollegeEmployee\u003e list = new ArrayList\u003cCollegeEmployee\u003e(); for (int i = 0; i \u003c 10; i++) { //这里我们增加了10个员工到 list CollegeEmployee emp = new CollegeEmployee(); emp.setId(\"学院员工id= \" + i); list.add(emp); } return list; } //输出学院员工的信息 public void printEmployee() { //获取到学院员工 List\u003cCollegeEmployee\u003e list1 = getAllEmployee(); System.out.println(\"------------学院员工------------\"); for (CollegeEmployee e : list1) { System.out.println(e.getId()); } } } //学校管理类 //分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager //CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 class SchoolManager { //返回学校总部的员工 public List\u003cEmployee\u003e getAllEmployee() { List\u003cEmployee\u003e list = new ArrayList\u003cEmployee\u003e(); for (int i = 0; i \u003c 5; i++) { //这里我们增加了5个员工到 list Employee emp = new Employee(); emp.setId(\"学校总部员工id= \" + i); list.add(emp); } return list; } //该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) { //分析问题 //1. 将输出学院的员工方法，封装到CollegeManager sub.printEmployee(); //获取到学校总部员工 List\u003cEmployee\u003e list2 = this.getAllEmployee(); System.out.println(\"------------学校总部员工-----","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:6","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"合成复用原则 介绍 原则是尽量使用合成/聚合的方式，而不是使用继承 合成复用原则 设计原则核心思想 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起 针对接口编程，而不是针对实现编程 为了交互对象之间的松耦合设计而努力 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:2:7","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"UML类图 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:0","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"介绍 UML–Unified modeling language UML（统一建模语言），是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果 UML本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等 类关系 UML图例分类 用例图（use case） 静态结构图：类图、对象图、包图、组件图、部署图 动态行为图：交互图（时序图与协作图）、状态图、活动图 说明： 类图用于描述系统中类（对象）本身的组成和类（对象）之间的各种静态关系，是UML图中最核心的图例 设计模式中使用类图描述模式设计过程 类之间关系：依赖、泛化（继承）、实现、关联、聚合与组合 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:1","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"依赖关系（Dependence） 只要在类中使用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编译都通过不了。 依赖关系 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:2","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"泛化关系（Generalization） 如果一个模型元素（子代）基于另一个模型元素（父代），那么这两个元素之间就存在泛化关系（继承关系） 泛化关系 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:3","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"实现关系（Implementation） 实现关系实际上是A类实现B接口，它是依赖关系的特例 实现关系 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:4","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"关联关系（Association） 关联关系实际上是类与类之间的联系，它是依赖关系的特例 关联具有导航性：即双向关系或单向关系 关系具有多重性：如“1”（表示有且仅有一个），“0…”（表示0个或者多个），“0，1”（表示0个或者一个），“n…m”（表示n到m个都可以），“m…*”（表示至少m个） 关联关系 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:5","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"聚合关系（Aggregation） 是整体与部分的关系, 且部分可以离开整体而单独存在。 聚合关系是关联关系的一种，是强的关联关系 关联和聚合在语法上无法区分，必须考察具体的逻辑关系 如下所示：车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在 聚合关系 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:6","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"组合关系（Composition） 组合关系：也是整体与部分的关系，但是整体与部分不可以分开 组合关系是关联关系中的一种，也是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期 如下所示：公司和部分是整体和部门的关系，没有公司就不存在部门 组合关系 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:3:7","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"设计模式 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:0","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"介绍 设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式不是代码，而是某类问题的通用解决方案，设计模式（Design Pattern）代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 设计模式的本质是提高软件的维护性、通用型和扩展性，并降低软件的复杂度。 《设计模式》是经典的书，作者是Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides Design（俗称“四人组GOF”） 设计模式并不局限于某种语言，Java、PHP、C++都有设计模式。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:1","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"设计模式分类 模式分为三种类型 创建型模式： 单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。 结构型模式： 适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。 行为型模式： 模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模式、策略模式、职责模式（责任链模式）。 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:2","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"单例模式 介绍 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类中只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）。 单例模式举例： 比如Hibernate的SessionFactory，它充当数据存储源的代理，并负责创建Session对象。SessionFactory并不是一个轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这时就会使用到单例模式。 单例模式的八种方式 饿汉式（静态常量） 饿汉式（静态代码块） 懒汉式（线程不安全） 懒汉式（线程安全，同步方法） 懒汉式（线程安全，同步代码块） 双重检查 静态内部类 枚举 饿汉式（静态常量） 实现步骤 构造器私有化（防止new） 类的内部创建对象 向外暴露一个静态的公共方法 代码实现 public class SingletonTest01 { public static void main(String[] args) { //测试 Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\"instance.hashCode=\" + instance.hashCode()); System.out.println(\"instance2.hashCode=\" + instance2.hashCode()); } } //饿汉式(静态变量) class Singleton { //1. 构造器私有化, 外部能new private Singleton() { } //2.本类内部创建对象实例 private final static Singleton instance = new Singleton(); //3. 提供一个公有的静态方法，返回实例对象 public static Singleton getInstance() { return instance; } } 模式优缺点说明： 优点： 这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。 缺点： 在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。 这种方式基于classoder机制避免了多线程的同步问题，不过，instabce在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这个时候初始化instance就没有达到lazy loading的效果。 结论：这种单例模式可用，可能造成内存浪费。 饿汉式（静态代码块） 实例应用 package com.atguigu.singleton.type2; public class SingletonTest02 { public static void main(String[] args) { //测试 Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\"instance.hashCode=\" + instance.hashCode()); System.out.println(\"instance2.hashCode=\" + instance2.hashCode()); } } //饿汉式(静态变量) class Singleton { //1. 构造器私有化, 外部能new private Singleton() { } //2.本类内部创建对象实例 private static Singleton instance; static { // 在静态代码块中，创建单例对象 instance = new Singleton(); } //3. 提供一个公有的静态方法，返回实例对象 public static Singleton getInstance() { return instance; } } 模式优缺点说明 这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。（优缺点与上面一致） 结论：这种单例模式可用，但是可能造成内存浪费。 懒汉式（线程不安全） 实例应用 public class SingletonTest03 { public static void main(String[] args) { System.out.println(\"懒汉式1 ， 线程不安全~\"); Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\"instance.hashCode=\" + instance.hashCode()); System.out.println(\"instance2.hashCode=\" + instance2.hashCode()); } } class Singleton { private static Singleton instance; private Singleton() {} //提供一个静态的公有方法，当使用到该方法时，才去创建 instance //即懒汉式 public static Singleton getInstance() { if(instance == null) { instance = new Singleton(); } return instance; } } 模式优缺点说明 起到了Lazy Loading的效果，但是只能在单线程下使用。 如果在多线程下，一个线程进入了if(singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可以使用这种方式。 结论：在实际开发中，不要使用这种方式。 懒汉式（线程安全，同步方法） 应用实例 public class SingletonTest04 { public static void main(String[] args) { System.out.println(\"懒汉式2 ， 线程安全~\"); Singleton instance = Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true System.out.println(\"instance.hashCode=\" + instance.hashCode()); System.out.println(\"instance2.hashCode=\" + instance2.hashCode()); } } // 懒汉式(线程安全，同步方法) class Singleton { private static Singleton instance; private Singleton() {} //提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题 //即懒汉式 public static synchronized Singleton getInstance() { if(instance == null) { instance = new Singleton(); } return instance; } } 模式优缺点说明 解决了线程不安全问题 效率太低了，每个线程再想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低。 结论：在实际开发中，不推荐使用这种方式 懒汉式（线程安全，同步代码块） 应用实例 class Singleton { private static Singleton singleton; private Singleton() {} public Singleton getInstance() { if(singleton == null) { synchronized (Singleton.class) { singleton = new Singleton(); } } return singleton; } } // 不推荐使用 双重检查 public class SingletonTest06 { public static void main(String[] args) { System.out.println(\"双重检查\"); Singleton inst","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:3","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"工厂模式 简单工厂模式 应用举例 需求：有一个披萨的项目，要便于披萨种类的扩展，要便于维护 披萨的种类很多（比如 GreekPizz、CheesePizz等） 披萨的制作有 prepare、back、cut、box 完成披萨店的订购功能 传统方法分析 思路分析（类图） 披萨项目类图 简单工厂模式的设计方案：定义一个可以实例化的Pizaa对象的类，封装创建对象的代码。 //将Pizza 类做成抽象 public abstract class Pizza { protected String name; //名字 //准备原材料, 不同的披萨不一样，因此，我们做成抽象方法 public abstract void prepare(); public void bake() { System.out.println(name + \" baking;\"); } public void cut() { System.out.println(name + \" cutting;\"); } //打包 public void box() { System.out.println(name + \" boxing;\"); } public void setName(String name) { this.name = name; } } public class PepperPizza extends Pizza { @Override public void prepare() { // TODO Auto-generated method stub System.out.println(\" 给胡椒披萨准备原材料 \"); } } public class GreekPizza extends Pizza { @Override public void prepare() { // TODO Auto-generated method stub System.out.println(\" 给希腊披萨 准备原材料 \"); } } public class CheesePizza extends Pizza { @Override public void prepare() { // TODO Auto-generated method stub System.out.println(\" 给制作奶酪披萨 准备原材料 \"); } } import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class OrderPizza { Pizza pizza = null; String orderType = \"\"; // 构造器 public OrderPizza2() { do { orderType = getType(); pizza = SimpleFactory.createPizza2(orderType); // 输出pizza if (pizza != null) { // 订购成功 pizza.prepare(); pizza.bake(); pizza.cut(); pizza.box(); } else { System.out.println(\" 订购披萨失败 \"); break; } } while (true); } // 写一个方法，可以获取客户希望订购的披萨种类 private String getType() { try { BufferedReader strin = new BufferedReader(new InputStreamReader(System.in)); System.out.println(\"input pizza 种类:\"); String str = strin.readLine(); return str; } catch (IOException e) { e.printStackTrace(); return \"\"; } } } 传统方法的优缺点 优点是比较好理解，简单易操作 缺点是违反了设计模式的OCP原则，即对扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码 比如我们这时要新增加一个Pizza的种类（Pepper披萨），我们需要另外增加新种类进行修改 改进思路与分析 分析： 修改代码可以接受，但是如果我们在其他的地方有创建Pizza的代码，就意味着，也需要修改，而创建Pizza的代码，往往有多处 思路：把创建Pizza对象封装到一个类中，这样我们有新的Pizza种类时，只需要修改该类即可，其它有创建到Pizza对象的代码就不需要修改了 -\u003e 简单工厂模式 简单工厂模式介绍 简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式 简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码） 在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式 简单工厂模式改造 简单工厂模式的设计方案：定义一个可以实例化Pizza对象的类，封装创建对象的代码。 package com.atguigu.factory.simplefactory.pizzastore.order; //简单工厂类 public class SimpleFactory { //更加orderType 返回对应的Pizza 对象 public Pizza createPizza(String orderType) { Pizza pizza = null; System.out.println(\"使用简单工厂模式\"); if (orderType.equals(\"greek\")) { pizza = new GreekPizza(); pizza.setName(\" 希腊披萨 \"); } else if (orderType.equals(\"cheese\")) { pizza = new CheesePizza(); pizza.setName(\" 奶酪披萨 \"); } else if (orderType.equals(\"pepper\")) { pizza = new PepperPizza(); pizza.setName(\"胡椒披萨\"); } return pizza; } //简单工厂模式 也叫 静态工厂模式 public static Pizza createPizza2(String orderType) { Pizza pizza = null; System.out.println(\"使用简单工厂模式2\"); if (orderType.equals(\"greek\")) { pizza = new GreekPizza(); pizza.setName(\" 希腊披萨 \"); } else if (orderType.equals(\"cheese\")) { pizza = new CheesePizza(); pizza.setName(\" 奶酪披萨 \"); } else if (orderType.equals(\"pepper\")) { pizza = new PepperPizza(); pizza.setName(\"胡椒披萨\"); } return pizza; } } import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; public class OrderPizza { // 构造器 // public OrderPizza() { // Pizza pizza = null; // String orderType; // 订购披萨的类型 // do { // orderType = getType(); // if (orderType.equals(\"greek\")) { // pizza = new GreekPizza(); // pizza.setName(\" 希腊披萨 \"); // } else if (orderType.equals(\"cheese\")) { // pizza = new CheesePizza(); // pizza.setName(\" 奶酪披萨 \"); // } else if (orderType.equals(\"pepper\")) { // pizza = new PepperPizza(); // pizza.setName(\"胡椒披萨\"); // } else { // break; // } // //输出pizza 制作过程 // pizza.prepare(); // pizza.bake(); // pizza.cut(); // pizza.box(); // // } while (true); // } //定义一个简单工厂对象 SimpleFactory simpleFactory; Pizza pizza = null; //构造器 public OrderPizza(SimpleFactory simpleFactory) { setFactory(simpleFactory); } public void setFac","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:4","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"原型模式 传统方法 克隆羊问题 现在有一只羊tom，姓名为：tom，年龄为：1，颜色为：白色，请编写程序创建和tom羊属性完全相同的10只羊。 传统方式解决 思路分析：类图图解 克隆羊类图 public class Sheep { private String name; private int age; private String color; public Sheep(String name, int age, String color) { super(); this.name = name; this.age = age; this.color = color; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } @Override public String toString() { return \"Sheep [name=\" + name + \", age=\" + age + \", color=\" + color + \"]\"; } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //传统的方法 Sheep sheep = new Sheep(\"tom\", 1, \"白色\"); Sheep sheep2 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); Sheep sheep3 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); Sheep sheep4 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); Sheep sheep5 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor()); //.... System.out.println(sheep); System.out.println(sheep2); System.out.println(sheep3); System.out.println(sheep4); System.out.println(sheep5); //... } } 传统方式的优缺点 有点是比较好理解，简单易操作。 在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低。 总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不够灵活。 改进思路与分析 思路：Java中Object类是所有类的根类，Object类提供了一个clone()方法，该方法可以将一个Java对象复制一份，但是需要实现clone的Java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力-\u003e原型模式 原型模式 介绍 原型模式（Prototype模式）是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。 原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。 工作原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 对象.clone() 形象的理解：孙大圣拔出猴毛，变出其他孙大圣。 原型模式原理结构图-UML类图 原型模式类图 原理结构图说明 Prototype：原型类，声明一个克隆自己的接口 ConcretePrototype：具体的原型类，实现一个克隆自己的操作 Client：让一个原型对象克隆自己，从而创建一个新的对象（属性一样） 原型模式解决克隆羊问题 使用原型模式改进传统方式，让程序具有更高的效率和扩展性 public class Sheep implements Cloneable { private String name; private int age; private String color; private String address = \"蒙古羊\"; public Sheep friend; //是对象, 克隆是会如何处理 public Sheep(String name, int age, String color) { super(); this.name = name; this.age = age; this.color = color; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } @Override public String toString() { return \"Sheep [name=\" + name + \", age=\" + age + \", color=\" + color + \", address=\" + address + \"]\"; } //克隆该实例，使用默认的clone方法来完成 @Override protected Object clone() { Sheep sheep = null; try { sheep = (Sheep)super.clone(); } catch (Exception e) { // TODO: handle exception System.out.println(e.getMessage()); } // TODO Auto-generated method stub return sheep; } } public class Client { public static void main(String[] args) { System.out.println(\"原型模式完成对象的创建\"); // TODO Auto-generated method stub Sheep sheep = new Sheep(\"tom\", 1, \"白色\"); sheep.friend = new Sheep(\"jack\", 2, \"黑色\"); Sheep sheep2 = (Sheep)sheep.clone(); //克隆 Sheep sheep3 = (Sheep)sheep.clone(); //克隆 Sheep sheep4 = (Sheep)sheep.clone(); //克隆 Sheep sheep5 = (Sheep)sheep.clone(); //克隆 System.out.println(\"sheep2 =\" + sheep2 + \"sheep2.friend=\" + sheep2.friend.hashCode()); System.out.println(\"sheep3 =\" + sheep3 + \"sheep3.friend=\" + sheep3.friend.hashCode()); System.out.println(\"sheep4 =\" + sheep4 + \"sheep4.friend=\" + sheep4.friend.hashCode()); System.out.println(\"sheep5 =\" + sheep5 + \"sheep5.friend=\" + sheep5.friend.hashCode()); } } 原型模式在Spring框架中源码分析 Spring中原型bean的创建，就是原型模式的应用 代码分析 /** * 注释 * @author Administrator * */ public class Monster { private Integer id = 10 ; private String nickname = \"牛魔王\"; private String skill = \"芭蕉扇\"; public Monster() { System.out.println(\"monster 创建..\"); } public Monster(Integer id, String nickname, String skill) { //System.out.println(\"Integer id, String nickname, String skill被调用\");","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:5","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"建造者模式 传统方法 盖房问题 项目需求： 需要建造房子：这一过程为打桩、砌墙、封顶 房子有各种各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不要相同的。 传统方式解决 传统方式分析类图 public abstract class AbstractHouse { //打地基 public abstract void buildBasic(); //砌墙 public abstract void buildWalls(); //封顶 public abstract void roofed(); public void build() { buildBasic(); buildWalls(); roofed(); } } public class CommonHouse extends AbstractHouse { @Override public void buildBasic() { // TODO Auto-generated method stub System.out.println(\" 普通房子打地基 \"); } @Override public void buildWalls() { // TODO Auto-generated method stub System.out.println(\" 普通房子砌墙 \"); } @Override public void roofed() { // TODO Auto-generated method stub System.out.println(\" 普通房子封顶 \"); } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub CommonHouse commonHouse = new CommonHouse(); commonHouse.build(); } } 传统方式的问题分析 优点是比较好理解，简单易操作。 设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好，也就是说，这种设计方案，把产品（即：房子）和创建产品的过程（即：建房子流程）封装在一起，耦合性增强了。 解决方案：将产品和产品建造过程耦合-\u003e建造者模式 建造者模式基本介绍 建造者模式（Builder Pattern）又叫生成器模式，是一种对象构造模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。 **建造者模式 **是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构造他们，用户不需要知道内部的具体构建细节。 建造者模式的四个角色 Product（产品角色）：一个具体的产品对象 Builder（抽象建造者）：创建一个Product对象的各个部件指定的接口/抽象类。 ConcreteBuilder（具体建造者）：实现接口，构造和装配各个部件。 Director（指挥者）：构建一个使用Builder接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一：隔离了客户与对象的生产过程，二：负责控制产品对象的生产过程。 建造者模式原理类图 建造者模式类图 建造者模式解决盖房问题 盖房问题类图 // 抽象的建造者 public abstract class HouseBuilder { protected House house = new House(); //将建造的流程写好, 抽象的方法 public abstract void buildBasic(); public abstract void buildWalls(); public abstract void roofed(); //建造房子好， 将产品(房子) 返回 public House buildHouse() { return house; } } //指挥者，这里去指定制作流程，返回产品 public class HouseDirector { HouseBuilder houseBuilder = null; //构造器传入 houseBuilder public HouseDirector(HouseBuilder houseBuilder) { this.houseBuilder = houseBuilder; } //通过setter 传入 houseBuilder public void setHouseBuilder(HouseBuilder houseBuilder) { this.houseBuilder = houseBuilder; } //如何处理建造房子的流程，交给指挥者 public House constructHouse() { houseBuilder.buildBasic(); houseBuilder.buildWalls(); houseBuilder.roofed(); return houseBuilder.buildHouse(); } } //产品-\u003eProduct public class House { private String baise; private String wall; private String roofed; public String getBaise() { return baise; } public void setBaise(String baise) { this.baise = baise; } public String getWall() { return wall; } public void setWall(String wall) { this.wall = wall; } public String getRoofed() { return roofed; } public void setRoofed(String roofed) { this.roofed = roofed; } } public class HighBuilding extends HouseBuilder { @Override public void buildBasic() { // TODO Auto-generated method stub System.out.println(\" 高楼的打地基100米 \"); } @Override public void buildWalls() { // TODO Auto-generated method stub System.out.println(\" 高楼的砌墙20cm \"); } @Override public void roofed() { // TODO Auto-generated method stub System.out.println(\" 高楼的透明屋顶 \"); } } public class CommonHouse extends HouseBuilder { @Override public void buildBasic() { // TODO Auto-generated method stub System.out.println(\" 普通房子打地基5米 \"); } @Override public void buildWalls() { // TODO Auto-generated method stub System.out.println(\" 普通房子砌墙10cm \"); } @Override public void roofed() { // TODO Auto-generated method stub System.out.println(\" 普通房子屋顶 \"); } } public class Client { public static void main(String[] args) { //盖普通房子 CommonHouse commonHouse = new CommonHouse(); //准备创建房子的指挥者 HouseDirector houseDirector = new HouseDirector(commonHouse); //完成盖房子，返回产品(普通房子) House house = houseDirector.constructHouse(); //System.out.println(\"输出流程\"); System.out.println(\"--------------------------\"); //盖高楼 HighBuilding highBuilding = new HighBuilding(); //重置建造者 houseDirector.setHouseBuilder(highBuilding); //完成盖房子，返回产品(高楼) houseDirector.constructHouse(); } } 建造者模式在JDK的应用和源码分析 java.lang.StringBuilder中的建造者模式 abstract class AbstractStringBuilder implements Appendable, CharSequence { /** * The value is used for character storage. */ char[] value; ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:6","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"适配器模式 介绍 适配器模式（Adapter Pattern）将某个类的接口转换成客户端期望的另一个接口表示，主要目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器（Wrapper） 适配器模式属于结构型模式 主要分为三类：类适配器模式、对象适配器模式、接口适配器模式 适配器模式工作原理 适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容 从用户的角度看不到适配者，是解耦的 用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法 用户用收到反馈结果，感觉只是和目标交互 类适配器模式 介绍 Adapter类，通过继承src类，实现dst类接口，完成 src -\u003e dst 的适配 应用实例 生活中充电器的例子来反应适配器模式，充电器本身相当于Adapter，220V交流电相当于src（即被适配者），我们的dst（即目标)是5V直流电 类适配器实例 //适配接口 public interface IVoltage5V { public int output5V(); } //被适配的类 public class Voltage220V { //输出220V的电压 public int output220V() { int src = 220; System.out.println(\"电压=\" + src + \"伏\"); return src; } } //适配器类 public class VoltageAdapter extends Voltage220V implements IVoltage5V { @Override public int output5V() { // TODO Auto-generated method stub //获取到220V电压 int srcV = output220V(); int dstV = srcV / 44 ; //转成 5v return dstV; } } public class Phone { //充电 public void charging(IVoltage5V iVoltage5V) { if(iVoltage5V.output5V() == 5) { System.out.println(\"电压为5V, 可以充电~~\"); } else if (iVoltage5V.output5V() \u003e 5) { System.out.println(\"电压大于5V, 不能充电~~\"); } } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(\" === 类适配器模式 ====\"); Phone phone = new Phone(); phone.charging(new VoltageAdapter()); } } 类适配器模式注意事项和细节 Java是单继承机制，所以类适配器需要继承src类这一点算是一个缺点，因为这要求dst必须是接口，有一定局限性 src类的方法在Adapter中都会暴露出来，也增加了使用的成本 由于其继承了src类，所以它可以根据需求重写src类的方法，使得Adapter的灵活性增强了。 对象适配器模式 介绍 基本思路和类的适配器模式相同，只是将Adapter类作修改，不是继承src类，而是持有src类的实例，以解决兼容性的问题。即：持有src类，实现dst类接口，完成 src -\u003e dst 的适配 根据“合成复用原则”，在系统中尽量使用关联关系来代替继承关系 对象适配器模式是适配器模式常用的一种 应用实例 生活中充电器的例子来讲解适配器，充电器本身相当于Adapter，220V交流电相当于src（即被适配者），我们的dst（即目标）是5V直流电，使用对象适配器模式完成 ![对象适配器实例](https://cdn.jsdelivr.net/gh/Turbo-King/images/%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8%E5%AE%9E%E4%BE%8B.png ““对象适配器实例””) //适配接口 public interface IVoltage5V { public int output5V(); } //被适配的类 public class Voltage220V { //输出220V的电压，不变 public int output220V() { int src = 220; System.out.println(\"电压=\" + src + \"伏\"); return src; } } //适配器类 public class VoltageAdapter implements IVoltage5V { private Voltage220V voltage220V; // 关联关系-聚合 //通过构造器，传入一个 Voltage220V 实例 public VoltageAdapter(Voltage220V voltage220v) { this.voltage220V = voltage220v; } @Override public int output5V() { int dst = 0; if(null != voltage220V) { int src = voltage220V.output220V();//获取220V 电压 System.out.println(\"使用对象适配器，进行适配~~\"); dst = src / 44; System.out.println(\"适配完成，输出的电压为=\" + dst); } return dst; } } public class Phone { //充电 public void charging(IVoltage5V iVoltage5V) { if(iVoltage5V.output5V() == 5) { System.out.println(\"电压为5V, 可以充电~~\"); } else if (iVoltage5V.output5V() \u003e 5) { System.out.println(\"电压大于5V, 不能充电~~\"); } } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(\" === 对象适配器模式 ====\"); Phone phone = new Phone(); phone.charging(new VoltageAdapter(new Voltage220V())); } } 对象适配器模式注意事项和细节 对象适配器 对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合替代继承，所以它解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口 使用成本更低，更灵活 接口适配器模式 介绍 一些书籍称为：适配器模式（Default Adapter Pattern）或缺省适配器模式 当不需要全部实现接口提供的方法时，可以先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的字类可有选择地覆盖父类的某些方法来实现需求 适用于一个接口不想使用其所有的方法的情况 应用实例 接口适配器实例 public interface InterfaceAdapter { public void m1(); public void m2(); public void m3(); public void m4(); } //在AbsAdapter 我们将 Interface4 的方法进行默认实现 public abstract class AbsAdapter implements InterfaceAdapter { //默认实现 public void m1() { } public void m2() { } public void m3() { } public void m4() { } } public class Client { public static void main(String[] args) { AbsAdapter absAdapter = new AbsAdapter() { //只需要去覆盖我们 需要使用 接口方法 @Override public void m1() { // TODO Auto-generated method stub System.out.println(\"使用了m1的方法\"); } }; absAdapter.m1(); } } 有时候我们不想实现InterfaceAdapter接口中的全部方法，我们只想监听m1方法，我们只需按如上方式实现接口适配器。 AbsAdapter类，就是一个接口适配器，它空实现了InterfaceAdapter接口中的所有方法。 适配器模式在SpringMVC框架应用的源码分析 SpringMVC中的HandleAdapter，就使用了适配器模式 使用HandleAdapter的原因分析： 根据源码分析可以看到处理器的类型不同，有多重实现方式，那么","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:7","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"桥接模式 传统方法 手机操作问题 现在对于不同手机类型的不同品牌实现操作编程（比如：开机、关机、上网、打电话等），如下图所示： Phone 传统方案解决手机使用问题 传统方法对应的类图 手机使用问题类图 传统方案解决手机操作类型 扩展性问题（类爆炸），如果我们再增加手机的样式（旋转式）,就需要增加各个品牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加 违反了单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护成本 解决方案-使用桥接模式 桥接模式 基本介绍 **桥接模式（Bridge模式）**是指：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变 是一种结构型设计模式 Bridge模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象（Abstraction）与行为实现（Implementation）分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展 桥接模式原理类图 桥接模式类图 类图说明 Client类：桥接模式模式的调用者 抽象类（Abstraction）：维护了Implementor/即它的实现类Concrete ImplementorA..，二者是聚合关系，Abstraction充当桥接类 RefinedAbstraction：是Abstraction抽象类的字类 Implementor：行为实现类的接口 Concrete ImplementorA/B：行为的具体实现类 从UML图：这里的抽象类和接口是聚合的关系，其实调用和被调用关系 桥接模式解决手机操作问题 使用桥接模式改进传统方式，让程序具有搞好的扩展性，利用程序维护 桥接模式解决手机操作问题类图 //接口 public interface Brand { void open(); void close(); void call(); } public abstract class Phone { //组合品牌 private Brand brand; //构造器 public Phone(Brand brand) { super(); this.brand = brand; } protected void open() { this.brand.open(); } protected void close() { brand.close(); } protected void call() { brand.call(); } } //折叠式手机类，继承 抽象类 Phone public class FoldedPhone extends Phone { //构造器 public FoldedPhone(Brand brand) { super(brand); } public void open() { super.open(); System.out.println(\" 折叠样式手机 \"); } public void close() { super.close(); System.out.println(\" 折叠样式手机 \"); } public void call() { super.call(); System.out.println(\" 折叠样式手机 \"); } } public class UpRightPhone extends Phone { //构造器 public UpRightPhone(Brand brand) { super(brand); } public void open() { super.open(); System.out.println(\" 直立样式手机 \"); } public void close() { super.close(); System.out.println(\" 直立样式手机 \"); } public void call() { super.call(); System.out.println(\" 直立样式手机 \"); } } public class Vivo implements Brand { @Override public void open() { // TODO Auto-generated method stub System.out.println(\" Vivo手机开机 \"); } @Override public void close() { // TODO Auto-generated method stub System.out.println(\" Vivo手机关机 \"); } @Override public void call() { // TODO Auto-generated method stub System.out.println(\" Vivo手机打电话 \"); } } public class XiaoMi implements Brand { @Override public void open() { // TODO Auto-generated method stub System.out.println(\" 小米手机开机 \"); } @Override public void close() { // TODO Auto-generated method stub System.out.println(\" 小米手机关机 \"); } @Override public void call() { // TODO Auto-generated method stub System.out.println(\" 小米手机打电话 \"); } } public class Client { public static void main(String[] args) { //获取折叠式手机 (样式 + 品牌 ) Phone phone1 = new FoldedPhone(new XiaoMi()); phone1.open(); phone1.call(); phone1.close(); System.out.println(\"=======================\"); Phone phone2 = new FoldedPhone(new Vivo()); phone2.open(); phone2.call(); phone2.close(); System.out.println(\"==============\"); UpRightPhone phone3 = new UpRightPhone(new XiaoMi()); phone3.open(); phone3.call(); phone3.close(); System.out.println(\"==============\"); UpRightPhone phone4 = new UpRightPhone(new Vivo()); phone4.open(); phone4.call(); phone4.close(); } } 桥接模式在JDBC的源码剖析 JDBC的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有MySQL的Driver，Oracle的Driver，这些就可以当作实现接口类 JDBC源码分析类图 import java.sql.SQLException; /** * The Java SQL framework allows for multiple database drivers. Each driver should supply a class that implements the Driver interface * * \u003cp\u003e * The DriverManager will try to load as many drivers as it can find and then for any given connection request, it will ask each driver in turn to try to * connect to the target URL. * * \u003cp\u003e * It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast * quantities of supporting code. * * \u003cp\u003e * When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a * driver by doing Class.forName(\"foo.bah.Driver\") */ public class Driver extends NonRegisteringDriver implements java.sql.Driver { // // Register ourselves with the DriverM","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:8","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"装饰者模式 传统方法 咖啡订单项目（咖啡馆） 咖啡种类/单品咖啡：Espresso（意大利浓缩咖啡）、ShortBlack、LongBlack（美式咖啡）、Decaf（无因咖啡） 调料：Milk、Soy（豆浆）、Chocolate 要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便 使用OO的来计算不同种类咖啡的费用：客户可以点单品咖啡、也可以点单品咖啡+调料组合 解决方案一 咖啡订单解决方案一 方案一问题分析 Drink是一个抽象类，表示饮料 des就是对咖啡的描述，比如咖啡的名字 cost()方法就是计算费用，Drink类中做一个抽象方法 Decaf就是单品咖啡，继承Drink，并实现cost方法 Espress \u0026\u0026 Milk 就是单品咖啡+调料，这个组合很多 问题：这样设计会有很多类，当我们增加一个单品咖啡或者一个新的调料，类的数量就会倍增，就会出现类爆炸 解决方案二 前面分析到方案一因为咖啡单品+调料组合会造成类的倍增，因此可以做改进，将调料内置到Drink类，这样就不会造成类数量过多。从而提高项目的维护性（如下图） 咖啡馆解决方案二 **说明：**milk，soy，chocolate 可以设计为Boolean，表示是否要添加相应的调料 方案二分析 方案二可以控制类的数量，不至于造成很多的类 在增加或者删除调料种类时，代码的维护量很大 考虑到用户可以添加多份调料时，可以将hasMIlk返回一个对应的int 考虑使用装饰者模式 装饰者模式 基本介绍 装饰者模式：动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则（OCP） 这里提到的动态的将新功能附加到对象和OCP原则，在后面的应用实例上会以代码的形式体现，请读者注意。 装饰者模式原理 原理图 装饰者模式就像打包一个快递 主体：比如：陶瓷、衣服（Component） //被装饰者 包装：比如：报纸填充、塑料泡沫、纸板、木板（Decorator） Component主体：比如类似前面的Drink ConcreteComponent：具体的主体，比如前面各个单品咖啡 Decorator：装饰者，比如各种调料 如图中Component与ConcreteComponent之间，如果ConcreteComponent类很多，还可以设计一个缓冲层，将共有的部分提取出来，抽象层一个类 装饰者模式解决咖啡订单 装饰者模式解决咖啡订单 说明： Drink 类就是前面说的抽象类，Component ShortBlack 就是单品咖啡 Decorator是一个装饰类，含有一个被装饰的对象（Drink obj） Decorator的cost方法进行一个费用的叠加计算，递归的计算价格 装饰者模式下的订单：2份巧克力+1份牛奶的LongBlack 装饰者模式下的订单 说明： Milk包含了LongBlack 一份Chocolate包含了（Milk+LongBlack） 一份Chocolate包含了（Chocolate+Milk+LongBlack） 这样是不管什么形式的单品咖啡+调料组合，通过递归方式可以方便的组合和维护 装饰者模式咖啡订单应用实例 public abstract class Drink { public String des; // 描述 private float price = 0.0f; public String getDes() { return des; } public void setDes(String des) { this.des = des; } public float getPrice() { return price; } public void setPrice(float price) { this.price = price; } //计算费用的抽象方法 //子类来实现 public abstract float cost(); } public class Coffee extends Drink { @Override public float cost() { // TODO Auto-generated method stub return super.getPrice(); } } public class DeCaf extends Coffee { public DeCaf() { setDes(\" 无因咖啡 \"); setPrice(1.0f); } } public class Decorator extends Drink { private Drink obj; public Decorator(Drink obj) { //组合 // TODO Auto-generated constructor stub this.obj = obj; } @Override public float cost() { // TODO Auto-generated method stub // getPrice 自己价格 return super.getPrice() + obj.cost(); } @Override public String getDes() { // TODO Auto-generated method stub // obj.getDes() 输出被装饰者的信息 return des + \" \" + getPrice() + \" \u0026\u0026 \" + obj.getDes(); } } public class Espresso extends Coffee { public Espresso() { setDes(\" 意大利咖啡 \"); setPrice(6.0f); } } //具体的Decorator， 这里就是调味品 public class Chocolate extends Decorator { public Chocolate(Drink obj) { super(obj); setDes(\" 巧克力 \"); setPrice(3.0f); // 调味品 的价格 } } public class LongBlack extends Coffee { public LongBlack() { setDes(\" longblack \"); setPrice(5.0f); } } public class ShortBlack extends Coffee{ public ShortBlack() { setDes(\" shortblack \"); setPrice(4.0f); } } public class Milk extends Decorator { public Milk(Drink obj) { super(obj); // TODO Auto-generated constructor stub setDes(\" 牛奶 \"); setPrice(2.0f); } } public class Soy extends Decorator{ public Soy(Drink obj) { super(obj); // TODO Auto-generated constructor stub setDes(\" Soy \"); setPrice(1.5f); } } public class CoffeeBar { public static void main(String[] args) { // TODO Auto-generated method stub // 装饰者模式下的订单：2份巧克力+一份牛奶的LongBlack // 1. 点一份 LongBlack Drink order = new LongBlack(); System.out.println(\"费用1=\" + order.cost()); System.out.println(\"描述=\" + order.getDes()); // 2. order 加入一份牛奶 order = new Milk(order); System.out.println(\"order 加入一份牛奶 费用 =\" + order.cost()); System.out.println(\"order 加入一份牛奶 描述 = \" + order.getDes()); // 3. order 加入一份巧克力 order = new Chocolate(order); System.out.println(\"order 加入一份牛奶 加入一份巧克力 费用 =\" + order.cost()); System.out.println(\"order 加入一份牛奶 加入一份巧克力 描述 = \" + order.getDes()); // 3. order 加入一份巧克力 order = new Chocolate(order); System.out.println(\"order 加入一份牛奶 加入2份巧克力 费用 =\" + order.cost()); System.out.println(\"order 加入一份牛奶 加入2份巧克力 描述 = \" + order.getDes()); System.out.println(\"===========================\"); Drink order2 = new DeCaf(); System.out.println(\"order2 无因咖啡 费用 =\" + orde","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:9","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"组合模式 传统方法 学校院系展示需求 编写程序展示一个学校院系结构：需求是这样的，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。如下图所示。 学院展示需求 传统方案解决学校院系展示（类图） 传统解决方案类图 传统方案解决学校院系展示存在的问题分析 将学院看作是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的 实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个院系，因此这种方案，不能很好实现的管理操作，比如对学院、系的添加，删除，遍历等 解决方案：把学校、院、系都看做是组织结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作-\u003e(组合模式) 组合模式 基本介绍 组合模式（Composite Pattern），又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系 组合模式依据树形结构来组合对象，用来表示部分以及整体层次 这种类型的设计模式属于结构型模式 组合模式使得用户对单个对象和组合对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象 组合模式的原理类图 组合模式原理类图 组合模式的角色及职责 Component：这是组合中对象声明接口，在适当情况下，实现所有类共有的接口默认行为，用于访问和管理Component子部件，Component可以是抽象类或者接口 Leaf：在组合中表示叶子节点，叶子节点没有子节点 Composite：非叶子节点，用于存储子部件，在Component接口中实现子部件的相关操作，比如增加（add），删除（delete） 组合模式解决学校院系展示的应用实例 需求：编写程序展示一个学校院系结构，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系 组合模式解决学校院系展示 public abstract class OrganizationComponent { private String name; // 名字 private String des; // 说明 protected void add(OrganizationComponent organizationComponent) { //默认实现 throw new UnsupportedOperationException(); } protected void remove(OrganizationComponent organizationComponent) { //默认实现 throw new UnsupportedOperationException(); } //构造器 public OrganizationComponent(String name, String des) { super(); this.name = name; this.des = des; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDes() { return des; } public void setDes(String des) { this.des = des; } //方法print, 做成抽象的, 子类都需要实现 protected abstract void print(); } import java.util.ArrayList; import java.util.List; //University 就是 Composite , 可以管理College public class University extends OrganizationComponent { List\u003cOrganizationComponent\u003e organizationComponents = new ArrayList\u003cOrganizationComponent\u003e(); // 构造器 public University(String name, String des) { super(name, des); // TODO Auto-generated constructor stub } // 重写add @Override protected void add(OrganizationComponent organizationComponent) { // TODO Auto-generated method stub organizationComponents.add(organizationComponent); } // 重写remove @Override protected void remove(OrganizationComponent organizationComponent) { // TODO Auto-generated method stub organizationComponents.remove(organizationComponent); } @Override public String getName() { // TODO Auto-generated method stub return super.getName(); } @Override public String getDes() { // TODO Auto-generated method stub return super.getDes(); } // print方法，就是输出University 包含的学院 @Override protected void print() { // TODO Auto-generated method stub System.out.println(\"--------------\" + getName() + \"--------------\"); //遍历 organizationComponents for (OrganizationComponent organizationComponent : organizationComponents) { organizationComponent.print(); } } } public class Department extends OrganizationComponent { //没有集合 public Department(String name, String des) { super(name, des); // TODO Auto-generated constructor stub } //add , remove 就不用写了，因为他是叶子节点 @Override public String getName() { // TODO Auto-generated method stub return super.getName(); } @Override public String getDes() { // TODO Auto-generated method stub return super.getDes(); } @Override protected void print() { // TODO Auto-generated method stub System.out.println(getName()); } } import java.util.ArrayList; import java.util.List; public class College extends OrganizationComponent { //List 中 存放的Department List\u003cOrganizationComponent\u003e organizationComponents = new ArrayList\u003cOrganizationComponent\u003e(); // 构造器 public College(String name, String des) { super(name, des); // TODO Auto-generated constructor stub } // 重写add @Override protected void add(OrganizationComponent organizationComponent) { // TODO Auto-generated method stub // 将来实际业务中，Colleage 的 add 和 University add 不一定完全一样 organizationComponents.add(organizationComponent); } // 重写remove @Override protected void remove(OrganizationComponent organizationComponent) { // TODO Auto-generated method stub organizationComponents.remove(organizationComponent); } @Override public String getName() { // TODO Auto-generated method","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:10","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"外观模式 传统方法 影院管理项目 组建一个家庭影院： DVD播放器、投影仪、自动屏幕、环绕立体声、爆米花机，要求完成使用家庭影院的功能，其过程如下： 直接用遥控器：统筹各系统开关 开爆米花机 放下投影幕布 开投影仪 开音响 开DVD，选DVD片源 去拿爆米花 调暗灯关 播放 观影结束，关闭各种设备 传统方式解决影院管理 传统方式解决影院管理 传统方式解决影院管理问题分析 在ClientTest的main方法中，创建各个子系统的对象，并直接去调用子系统（对象）相关方法，会造成调用过程混乱，没有清晰的过程 不利于在ClientTest中，去维护对子系统的操作 解决思路：定义一个高层接口，给子系统中的一组接口提供一个一致的界面（比如在高层接口提供四个方法：ready，play，pause，end），用来访问子系统中的一群接口 就是通过定义一个一致的接口（界面类），用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无须关心这个子系统的内部细节-\u003e外观模式 外观模式 基本介绍 外观模式（Facade），也叫“过程模式：外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用” 外观模式通过定义个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节 外观模式原理类图 外观模式原理类图 外观模式的角色及职责 外观类（Facade）：为调用端提供统一的调用接口，外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给适当子系统对象 调用着（Client）：外观接口的调用者 子系统的集合：指模块或者子系统，处理Facade对象指派的任务，它是功能的实际提供者 外观模式解决影院管理 外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口才能达到目的。比如：在PC上安装软件的时候经常有一键安装选项（省去选择安装目录、安装的组件等等），还有就是手机的重启功能（把关机和启动合为一个操作） 外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用 示意图说明如下： 外观模式解决影院管理示意图 外观模式解决影院管理应用实例 外观模式解决影院管理应用实例 public class HomeTheaterFacade { //定义各个子系统对象 private TheaterLight theaterLight; private Popcorn popcorn; private Stereo stereo; private Projector projector; private Screen screen; private DVDPlayer dVDPlayer; //构造器 public HomeTheaterFacade() { super(); this.theaterLight = TheaterLight.getInstance(); this.popcorn = Popcorn.getInstance(); this.stereo = Stereo.getInstance(); this.projector = Projector.getInstance(); this.screen = Screen.getInstance(); this.dVDPlayer = DVDPlayer.getInstanc(); } //操作分成 4 步 public void ready() { popcorn.on(); popcorn.pop(); screen.down(); projector.on(); stereo.on(); dVDPlayer.on(); theaterLight.dim(); } public void play() { dVDPlayer.play(); } public void pause() { dVDPlayer.pause(); } public void end() { popcorn.off(); theaterLight.bright(); screen.up(); projector.off(); stereo.off(); dVDPlayer.off(); } } public class Stereo { private static Stereo instance = new Stereo(); public static Stereo getInstance() { return instance; } public void on() { System.out.println(\" Stereo on \"); } public void off() { System.out.println(\" Screen off \"); } public void up() { System.out.println(\" Screen up.. \"); } //... } public class DVDPlayer { //使用单例模式, 使用饿汉式 private static DVDPlayer instance = new DVDPlayer(); public static DVDPlayer getInstanc() { return instance; } public void on() { System.out.println(\" dvd on \"); } public void off() { System.out.println(\" dvd off \"); } public void play() { System.out.println(\" dvd is playing \"); } //.... public void pause() { System.out.println(\" dvd pause ..\"); } } public class TheaterLight { private static TheaterLight instance = new TheaterLight(); public static TheaterLight getInstance() { return instance; } public void on() { System.out.println(\" TheaterLight on \"); } public void off() { System.out.println(\" TheaterLight off \"); } public void dim() { System.out.println(\" TheaterLight dim.. \"); } public void bright() { System.out.println(\" TheaterLight bright.. \"); } } public class Projector { private static Projector instance = new Projector(); public static Projector getInstance() { return instance; } public void on() { System.out.println(\" Projector on \"); } public void off() { System.out.println(\" Projector ff \"); } public void focus() { System.out.println(\" Projector is Projector \"); } //... } public class Popcorn { private static Popcorn instance = new Popcorn(); public static Popcorn getInstance() { return instance; } public void on() { System.out.println(\" popcorn on \"); } public void off() { System.out.println(\" popcorn ff \"); } public void pop() { System.out.println(\" popcorn is poping \"); } } public class Screen { private static Screen instance = new Screen(); public static Screen getInstance() { return instance; } public void up() { System.out.println(\" Screen up \"); } public void down() { System.out.println(\" Screen down \"); } } 外观模式在MyBatis框架应用的源码分析 Mybatis中的Configuration去创建MetaObject对象使用到外观模式 mybatis中使用外观模式角色类图 public class Configuration { protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory(); protected","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:11","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"享元模式 传统方法 展示网站项目需求 小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同： 客户要求以新闻的形式发布 有客户人要求以博客的形式发布 有客户希望以微信公众号的形式发布 传统方案解决网站展现项目 直觉复制粘贴一份，然后根据客户不同要求，进行定制修改 给每个网站租用一个空间 方案设计示意图如下： 展示网站方案设计示意图 传统方案解决网站展现项目问题分析 需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理，相当于一个相同的网站的实例对象有很多，造成服务器的资源浪费 解决思路：整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPu、数据库空间等服务器资源都可以达到共享，减少服务器资源 对于上面代码来说，由于是一份实例，维护和扩展都更加容易 上面的解决思路就可以使用享元模式来解决 享元模式 基本介绍 享元模式（Flyweight Pattern）也叫蝇量模式，运用共享技术有效地支持大量细粒度的对象 常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个 享元模式能够解决重复对象的内存浪费问题，当系统中有大量相似对象，需要缓存池时。不需总是创建新对象，可以从缓存池里拿。这样可以降低系统内存，同时提高效率 享元模式经典的应用常见就是池技术了，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元吗模式是池技术的重要实现方式 String常量池 享元模式的原理类图 享元模式原理类图 享元模式的角色及职责 FlyWeight是抽象的享元角色，它是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现 ConcreteFlyWeight是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务 UnSharedConcreteFlyWeight是不可共享的角色，一般不会出现在享元工厂 FlyWeightFactory享元工厂类，用于创建一个池容器（集合），同时提供从池中获取对象方法 内部状态和外部状态 比如围棋、五子棋、跳棋、它们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一点，所以棋子颜色就是棋子的内部状态；而各个棋子之间的差别就是位置的不同，当我们落子后，落子颜色是定的，但位置是变化的，所以棋子坐标就是棋子的外部状态 享元模式提出两个要求：细粒度和共享对象。这里就涉及到内部状态和外部状态了，即将对象的信息分为两个部分，内部状态和外部状态 内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而变化 外部状态指对象得以依赖的一个标记，是随环境改变而变化的、不可共享的状态 举个例子：围棋理论上有361个空位可以放棋子，每个棋盘都有可能有两三百个棋子对象产生，因为内存空间有限，一台服务器很难支持更多的玩家玩围棋游戏，如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例，这样就很好的解决了对象的开销问题 享元模式解决网站展现项目应用实例 享元模式解决网站展现类图 import java.util.HashMap; // 网站工厂类，根据需要返回压一个网站 public class WebSiteFactory { //集合， 充当池的作用 private HashMap\u003cString, ConcreteWebSite\u003e pool = new HashMap\u003c\u003e(); //根据网站的类型，返回一个网站, 如果没有就创建一个网站，并放入到池中,并返回 public WebSite getWebSiteCategory(String type) { if(!pool.containsKey(type)) { //就创建一个网站，并放入到池中 pool.put(type, new ConcreteWebSite(type)); } return (WebSite)pool.get(type); } //获取网站分类的总数 (池中有多少个网站类型) public int getWebSiteCount() { return pool.size(); } } public abstract class WebSite { public abstract void use(User user);//抽象方法 } //具体网站 public class ConcreteWebSite extends WebSite { //共享的部分，内部状态 private String type = \"\"; //网站发布的形式(类型) //构造器 public ConcreteWebSite(String type) { this.type = type; } @Override public void use(User user) { // TODO Auto-generated method stub System.out.println(\"网站的发布形式为:\" + type + \" 在使用中 .. 使用者是\" + user.getName()); } } public class User { private String name; public User(String name) { super(); this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub // 创建一个工厂类 WebSiteFactory factory = new WebSiteFactory(); // 客户要一个以新闻形式发布的网站 WebSite webSite1 = factory.getWebSiteCategory(\"新闻\"); webSite1.use(new User(\"tom\")); // 客户要一个以博客形式发布的网站 WebSite webSite2 = factory.getWebSiteCategory(\"博客\"); webSite2.use(new User(\"jack\")); // 客户要一个以博客形式发布的网站 WebSite webSite3 = factory.getWebSiteCategory(\"博客\"); webSite3.use(new User(\"smith\")); // 客户要一个以博客形式发布的网站 WebSite webSite4 = factory.getWebSiteCategory(\"博客\"); webSite4.use(new User(\"king\")); System.out.println(\"网站的分类共=\" + factory.getWebSiteCount()); } } 享元模式在JDK-Interge的应用源码分析 public class FlyWeight { public static void main(String[] args) { // TODO Auto-generated method stub //如果 Integer.valueOf(x) x 在 -128 --- 127 直接，就是使用享元模式返回,如果不在 //范围类，则仍然 new //小结: //1. 在valueOf 方法中，先判断值是否在 IntegerCache 中，如果不在，就创建新的Integer(new), 否则，就直接从 缓存池返回 //2. valueOf 方法，就使用到享元模式 //3. 如果使用valueOf 方法得到一个Integer 实例，范围在 -128 - 127 ，执行速度比 new 快 Integer x = Integer.valueOf(127); // 得到 x实例，类型 Integer Integer y = new Integer(127); // 得到 y 实例，类型 Integer Integer z = Integer.valueOf(127);//.. Integer w = new Integer(127); System.out.println(x.equals(y)); // 大小，true System.out.println(x == y ); // false System.out.println(x == z ); // true System.out.println(w == x ); // false System.out.println(w == y ); // false Integer x1 = Integer.valueOf(200); Integer x2 = Integer.valueOf(200); System.out.println(\"x1==x2\" + (x1 == x2)); // false } } 享元模式的注意事项和细节 享元模式 在享元模式这样理解，“享”就表示共享，“元”表示对象 系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式 用唯一标识码判断，如果在内存中有，则返回这个唯","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:12","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"代理模式 基本介绍 代理模式(Proxy)：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象，这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。 被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。 代理模式有不同的形式，主要有三种：静态代理、动态代理（JDK代理、接口代理）和Cglib代理（可以在内存动态的创建对象，而不需要实现接口，它是属于动态代理的范畴） 代理模式示意图如下： 代理模式示意图 静态代理 基本介绍 静态代理在使用时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现相同的接口或者是继承相同父类 应用实例 具体要求 定义一个接口：ITeacherDao 目标对象TeacherDao实现接口ITeacherDAO 使用静态代理方式，就需要在代理对象TeacherDAOProxy中也实现ITeacherDAO 调用的时候通过调用代理对象的方法来调用目标对象 特别提醒：代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法 静态代理分类图解（类图） //代理对象,静态代理 public class TeacherDaoProxy implements ITeacherDao{ private ITeacherDao target; // 目标对象，通过接口来聚合 //构造器 public TeacherDaoProxy(ITeacherDao target) { this.target = target; } @Override public void teach() { // TODO Auto-generated method stub System.out.println(\"开始代理 完成某些操作。。。。。 \");//方法 target.teach(); System.out.println(\"提交。。。。。\");//方法 } } //接口 public interface ITeacherDao { void teach(); // 授课的方法 } public class TeacherDao implements ITeacherDao { @Override public void teach() { // TODO Auto-generated method stub System.out.println(\" 老师授课中 。。。。。\"); } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //创建目标对象(被代理对象) TeacherDao teacherDao = new TeacherDao(); //创建代理对象, 同时将被代理对象传递给代理对象 TeacherDaoProxy teacherDaoProxy = new TeacherDaoProxy(teacherDao); //通过代理对象，调用到被代理对象的方法 //即：执行的是代理对象的方法，代理对象再去调用目标对象的方法 teacherDaoProxy.teach(); } } 静态代理优缺点 优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展 缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类 一旦接口增加方法，目标对象与代理对象都要维护 动态代理 基本介绍 代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理 代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象 动态代理也叫做：JDK代理、接口代理 JDK中生成代理对象的API 代理类所在包：java.lang.reflect.Proxy JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接收三个参数，完成写法如下： static Object newProxyInstance(ClassLoader loader,Class\u003c?\u003e[] interfaces,InvocationHandler handler) 应用实例 将前面的静态代理该进成动态代理模式（即：JDK代理模式） 动态代理应用实例类图 Cglib代理模式 基本介绍 静态代理和JDK代理模式都要求目标对象是实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理-\u003e这就是Cglib代理 Cglib代理也叫作子类代理，它是在内存中构建一个字类对象从而实现对目标对象功能扩展，有些书也将Cglib代理归属到动态代理 Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口，它广泛的被许多AOP的框架使用，例如Spring AOP，实现方法拦截 在AOP编程中如何选择代理模式 目标对象需要实现接口，用JDK代理 目标对象不需要实现接口，用Cglib代理 Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类 Cglib代理模式实现步骤 需要引入cglib的jar包 在内存中动态构建字类，注意代理的类不能为final，否则报错（java.lang.IllegalArgumentException） 目标对象的方法如果为final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法 Cglib代理模式应用实例 将前面案例用Cglib代理模式实现 Cglib代理模式应用实例类图 import java.lang.reflect.Method; import net.sf.cglib.proxy.Enhancer; import net.sf.cglib.proxy.MethodInterceptor; import net.sf.cglib.proxy.MethodProxy; public class ProxyFactory implements MethodInterceptor { //维护一个目标对象 private Object target; //构造器，传入一个被代理的对象 public ProxyFactory(Object target) { this.target = target; } //返回一个代理对象: 是 target 对象的代理对象 public Object getProxyInstance() { //1. 创建一个工具类 Enhancer enhancer = new Enhancer(); //2. 设置父类 enhancer.setSuperclass(target.getClass()); //3. 设置回调函数 enhancer.setCallback(this); //4. 创建子类对象，即代理对象 return enhancer.create(); } //重写 intercept 方法，会调用目标对象的方法 @Override public Object intercept(Object arg0, Method method, Object[] args, MethodProxy arg3) throws Throwable { // TODO Auto-generated method stub System.out.println(\"Cglib代理模式 ~~ 开始\"); Object returnVal = method.invoke(target, args); System.out.println(\"Cglib代理模式 ~~ 提交\"); return returnVal; } } public class TeacherDao { public String teach() { System.out.println(\" 老师授课中 ， 我是cglib代理，不需要实现接口 \"); return \"hello\"; } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //创建目标对象 TeacherDao target = new TeacherDao(); //获取到代理对象，并且将目标对象传递给代理对象 TeacherDao proxyInstance = (TeacherDao)new ProxyFactory(target).getProxyInstance(); //执行代理对象的方法，触发intecept 方法，从而实现 对目标对象的调用 String res = proxyInstance.teach(); System.out.println(\"res=\" + res); } } 代理模式（Proxy）的变体 防火墙代理 内网通过代理穿透防火墙，实现对公网的访问 缓存代理 比如：当请求图片文件等资源时，先到缓存代理取，如果取到资源则OK，如果取不到资源，再到公网或者数据库中取，然后缓存 远程代理 远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息 同步代理 主要使用在多线程编程中，完成多线程间同步工作 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:13","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"模版方法模式 豆浆制作问题 编写制作豆浆的程序，说明如下： 制作豆浆的流程 选材-\u003e添加配料-\u003e浸泡-\u003e放到豆浆机打碎 通过添加不同的配料，可以制作出不同口味的豆浆 选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的 请使用模版方法模式完成（说明：因为模版方法模式，比较简单，很容易就想到这个方案，因此就直接使用，不再使用传统方案引出模版方法模式） 模版方法模式基本介绍 模版方法模式（Template Method Pattern），又叫模版模式（Template Pattern），在一个抽象类公开定义了执行它的方法的模版。它的字类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。 简单说，模版方法模式定义了一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤 这种类型的设计模式属于-\u003e行为型模式 模版方法模式原理类图 模版方法模式原理类图 模版方法模式的角色及职责 AbstractClass 抽象类，类中实现了模版方法（Template），定义了算法的骨架，具体子类需要去实现其它的抽象方法 operation2，3，4 ConcreteClass实现抽象方法operation2，3，4，以完成算法中特定子类的步骤 模版方法模式解决豆浆制作问题 模版方法模式解决豆浆制作问题类图 //抽象类，表示豆浆 public abstract class SoyaMilk { //模板方法, make , 模板方法可以做成final , 不让子类去覆盖. final void make() { select(); addCondiments(); soak(); beat(); } //选材料 void select() { System.out.println(\"第一步：选择好的新鲜黄豆 \"); } //添加不同的配料， 抽象方法, 子类具体实现 abstract void addCondiments(); //浸泡 void soak() { System.out.println(\"第三步， 黄豆和配料开始浸泡， 需要3小时 \"); } void beat() { System.out.println(\"第四步：黄豆和配料放到豆浆机去打碎 \"); } } public class RedBeanSoyaMilk extends SoyaMilk { @Override void addCondiments() { // TODO Auto-generated method stub System.out.println(\" 加入上好的红豆 \"); } } public class PeanutSoyaMilk extends SoyaMilk { @Override void addCondiments() { // TODO Auto-generated method stub System.out.println(\" 加入上好的花生 \"); } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //制作红豆豆浆 System.out.println(\"----制作红豆豆浆----\"); SoyaMilk redBeanSoyaMilk = new RedBeanSoyaMilk(); redBeanSoyaMilk.make(); System.out.println(\"----制作花生豆浆----\"); SoyaMilk peanutSoyaMilk = new PeanutSoyaMilk(); peanutSoyaMilk.make(); } } 模版方法模式的钩子方法 在模版方法模式的父类中，我们定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为“钩子” 还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的模版方法进行改造 //抽象类，表示豆浆 public abstract class SoyaMilk { //模板方法, make , 模板方法可以做成final , 不让子类去覆盖. final void make() { select(); if(customerWantCondiments()) { addCondiments(); } soak(); beat(); } //选材料 void select() { System.out.println(\"第一步：选择好的新鲜黄豆 \"); } //添加不同的配料， 抽象方法, 子类具体实现 abstract void addCondiments(); //浸泡 void soak() { System.out.println(\"第三步， 黄豆和配料开始浸泡， 需要3小时 \"); } void beat() { System.out.println(\"第四步：黄豆和配料放到豆浆机去打碎 \"); } //钩子方法，决定是否需要添加配料 boolean customerWantCondiments() { return true; } } public class RedBeanSoyaMilk extends SoyaMilk { @Override void addCondiments() { // TODO Auto-generated method stub System.out.println(\" 加入上好的红豆 \"); } } public class PureSoyaMilk extends SoyaMilk{ @Override void addCondiments() { // TODO Auto-generated method stub //空实现 } @Override boolean customerWantCondiments() { // TODO Auto-generated method stub return false; } } public class PeanutSoyaMilk extends SoyaMilk { @Override void addCondiments() { // TODO Auto-generated method stub System.out.println(\" 加入上好的花生 \"); } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //制作红豆豆浆 System.out.println(\"----制作红豆豆浆----\"); SoyaMilk redBeanSoyaMilk = new RedBeanSoyaMilk(); redBeanSoyaMilk.make(); System.out.println(\"----制作花生豆浆----\"); SoyaMilk peanutSoyaMilk = new PeanutSoyaMilk(); peanutSoyaMilk.make(); System.out.println(\"----制作纯豆浆----\"); SoyaMilk pureSoyaMilk = new PureSoyaMilk(); pureSoyaMilk.make(); } } 模版方法模式在Spring框架应用的源码分析 Spring IOC容器初始化时运用到的模版方法模式 Spring源码使用模版方法模式类图 模版方法模式注意事项和细节 模版方法模式 基本思想：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模版方法或者已经实现的某些步骤，子类就会继承这些修改 实现了最大化代码复用。父类的模版方法和已经实现的某些步骤会被子类继承而直接使用 即统一了算法，也提供了很大的灵活性。父类的模版方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现 该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大 一般模版方法都加上final关键字，防止子类重写模版方法 模版方法模式使用场景：当要完成在某个过程，该过程要执行一系列步骤，这一系列的步骤基本相同，但其个别步骤在实现时可能不同，通常考虑用模版方法模式来处理 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:14","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"命令模式 智能生活项目 智能生活项目具体需求 我们买了一套智能家电，有照明灯、风扇冰箱、洗衣机，我们只要在手机上安装app就可以控制对这些家电工作 这些职能家电来自不同的厂家，我们不想针对每一种家电都安装一个App，分别控制，我们希望只要一个app就可以控制全部职能家电 要实现一个app控制所有智能家电的需求，则每个智能家电厂家都要提供一个统一的接口给app调用，这时就可以考虑使用命令模式 命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来 在上面例子中，动作的请求者是手机app，动作的执行者是每个厂商的一个家电产品 命令模式基本介绍 命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计 命令模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦 在命令模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命名），同时命令模式也支持可撤销的操作 通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色：将军（命令发布者）、士兵（命令的具体执行者）、命令（连接将军和士兵）。Invoker是调用者（将军），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，持有接收对象 命令模式的原理类图 命令模式的原理类图 命令模式的角色及职责 Invoker：是调用者角色 Command：是命令角色，需要执行的所有命令都在这里，可以是接口或抽象类 Receiver：是接收者角色，知道如何实施和执行一个请求相关的操作 ConcreteCommand：将一个接收者对象与一个动作绑定，调用接收者相应的操作，实现execute 命令模式解决智能生活项目 命令模式解决智能生活项目类图 //创建命令接口 public interface Command { //执行动作(操作) public void execute(); //撤销动作(操作) public void undo(); } /** * 没有任何命令，即空执行: 用于初始化每个按钮, 当调用空命令时，对象什么都不做 * 其实，这样是一种设计模式, 可以省掉对空判断 * @author Administrator * */ public class NoCommand implements Command { @Override public void execute() { // TODO Auto-generated method stub } @Override public void undo() { // TODO Auto-generated method stub } } public class LightOffCommand implements Command { // 聚合LightReceiver LightReceiver light; // 构造器 public LightOffCommand(LightReceiver light) { super(); this.light = light; } @Override public void execute() { // TODO Auto-generated method stub // 调用接收者的方法 light.off(); } @Override public void undo() { // TODO Auto-generated method stub // 调用接收者的方法 light.on(); } } public class LightOnCommand implements Command { //聚合LightReceiver LightReceiver light; //构造器 public LightOnCommand(LightReceiver light) { super(); this.light = light; } @Override public void execute() { // TODO Auto-generated method stub //调用接收者的方法 light.on(); } @Override public void undo() { // TODO Auto-generated method stub //调用接收者的方法 light.off(); } } public class LightReceiver { public void on() { System.out.println(\" 电灯打开了.. \"); } public void off() { System.out.println(\" 电灯关闭了.. \"); } } public class RemoteController { // 开 按钮的命令数组 Command[] onCommands; Command[] offCommands; // 执行撤销的命令 Command undoCommand; // 构造器，完成对按钮初始化 public RemoteController() { onCommands = new Command[5]; offCommands = new Command[5]; for (int i = 0; i \u003c 5; i++) { onCommands[i] = new NoCommand(); offCommands[i] = new NoCommand(); } } // 给我们的按钮设置你需要的命令 public void setCommand(int no, Command onCommand, Command offCommand) { onCommands[no] = onCommand; offCommands[no] = offCommand; } // 按下开按钮 public void onButtonWasPushed(int no) { // no 0 // 找到你按下的开的按钮， 并调用对应方法 onCommands[no].execute(); // 记录这次的操作，用于撤销 undoCommand = onCommands[no]; } // 按下开按钮 public void offButtonWasPushed(int no) { // no 0 // 找到你按下的关的按钮， 并调用对应方法 offCommands[no].execute(); // 记录这次的操作，用于撤销 undoCommand = offCommands[no]; } // 按下撤销按钮 public void undoButtonWasPushed() { undoCommand.undo(); } } public class TVOffCommand implements Command { // 聚合TVReceiver TVReceiver tv; // 构造器 public TVOffCommand(TVReceiver tv) { super(); this.tv = tv; } @Override public void execute() { // TODO Auto-generated method stub // 调用接收者的方法 tv.off(); } @Override public void undo() { // TODO Auto-generated method stub // 调用接收者的方法 tv.on(); } } public class TVOnCommand implements Command { // 聚合TVReceiver TVReceiver tv; // 构造器 public TVOnCommand(TVReceiver tv) { super(); this.tv = tv; } @Override public void execute() { // TODO Auto-generated method stub // 调用接收者的方法 tv.on(); } @Override public void undo() { // TODO Auto-generated method stub // 调用接收者的方法 tv.off(); } } public class TVReceiver { public void on() { System.out.println(\" 电视机打开了.. \"); } public void off() { System.out.println(\" 电视机关闭了.. \"); } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //使用命令设计模式，完成通过遥控器，对电灯的操作 //创建电灯的对象(接受者) LightReceiver lightReceiver = new LightReceiver(); //创建电灯相关的开关命令 LightOnCommand lightOnCommand = new LightOnCommand(lightReceive","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:15","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"访问者模式 评测系统 评测系统需求 将观众分为男人和女人，对歌手进行评测，当看完某个歌手表演后，得到他们对该歌手不同的评价（评价有不同的种类，比如成功、失败等） 传统方法 传统方式的问题分析 评测系统传统方式解决 如果系统比较小，还是OK的，但是考虑系统增加越来越多新的功能时，对代码改动比较大，违反了OCP原则，不利于维护 扩展性不好，比如增加了新的人员类型，或者管理方法，都不好做 引出我们会使用新的设计模式-\u003e访问者模式 访问者模式 基本介绍 访问者模式（Visitor Patter），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作 主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题 访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口 访问者模式应用场景是：需要对一个对象结构中的对象进行很多不同操作（这些操作彼此没有关联），同时需要避免让这些操作“污染”这些对象的类，可以选用访问者模式解决 访问者模式的原理类图 访问者模式的原理类图 访问者模式的角色及职责 Visitor：是抽象访问者，为该对象结构中的ConcreteElement的每一个类声明一个visit操作 ConcreteVisitor：是一个具体的访问值，实现每一个有Visitor声明的操作，是每个操作实现的部分 ObjectStructure：能枚举它的元素，可以提供一个高层的接口，用来允许访问者访问元素 Element：定义一个accept方法，接收一个访问者对象 ConcreteElement为具体元素，实现了accept方法 访问者模式应用实例 访问者模式应用实例 public abstract class Action { //得到男性 的测评 public abstract void getManResult(Man man); //得到女的 测评 public abstract void getWomanResult(Woman woman); } public class Fail extends Action { @Override public void getManResult(Man man) { // TODO Auto-generated method stub System.out.println(\" 男人给的评价该歌手失败 !\"); } @Override public void getWomanResult(Woman woman) { // TODO Auto-generated method stub System.out.println(\" 女人给的评价该歌手失败 !\"); } } public abstract class Person { //提供一个方法，让访问者可以访问 public abstract void accept(Action action); } public class Man extends Person { @Override public void accept(Action action) { // TODO Auto-generated method stub action.getManResult(this); } } //说明 //1. 这里我们使用到了双分派, 即首先在客户端程序中，将具体状态作为参数传递Woman中(第一次分派) //2. 然后Woman 类调用作为参数的 \"具体方法\" 中方法getWomanResult, 同时将自己(this)作为参数 // 传入，完成第二次的分派 public class Woman extends Person{ @Override public void accept(Action action) { // TODO Auto-generated method stub action.getWomanResult(this); } } public class Success extends Action { @Override public void getManResult(Man man) { // TODO Auto-generated method stub System.out.println(\" 男人给的评价该歌手很成功 !\"); } @Override public void getWomanResult(Woman woman) { // TODO Auto-generated method stub System.out.println(\" 女人给的评价该歌手很成功 !\"); } } import java.util.LinkedList; import java.util.List; //数据结构，管理很多人（Man , Woman） public class ObjectStructure { //维护了一个集合 private List\u003cPerson\u003e persons = new LinkedList\u003c\u003e(); //增加到list public void attach(Person p) { persons.add(p); } //移除 public void detach(Person p) { persons.remove(p); } //显示测评情况 public void display(Action action) { for(Person p: persons) { p.accept(action); } } } public class Wait extends Action { @Override public void getManResult(Man man) { // TODO Auto-generated method stub System.out.println(\" 男人给的评价是该歌手待定 ..\"); } @Override public void getWomanResult(Woman woman) { // TODO Auto-generated method stub System.out.println(\" 女人给的评价是该歌手待定 ..\"); } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //创建ObjectStructure ObjectStructure objectStructure = new ObjectStructure(); objectStructure.attach(new Man()); objectStructure.attach(new Woman()); //成功 Success success = new Success(); objectStructure.display(success); System.out.println(\"===============\"); Fail fail = new Fail(); objectStructure.display(fail); System.out.println(\"=======给的是待定的测评========\"); Wait wait = new Wait(); objectStructure.display(wait); } } 应用实例小结 上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。 双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型 对于以上实例为例，假设我们要添加一个Wait的状态类，考察Man类和Woman类的反应，由于使用了双分派，只需增加一个Action子类即可在客户端调用即可，不需要改动任何其他类的代码。 访问者模式的注意事项和细节 访问者模式 优点 访问者模式符合单一职责原则，让程序具有优秀的扩展性、灵活性非常高 访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统 缺点 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样就造成了具体元素变更比较困难 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素 因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的 ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:16","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"迭代器模式 学校院系展示系统 编写程序展示一个学校院系结构：要求在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。功能展示如下所示。 学校院系构成 传统的设计方案 学校院系构成传统设计方案 传统方式的问题分析 将学院看做是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的 实际上我们的需求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案，不能很好实现遍历的操作 解决方案 -\u003e 迭代器模式 迭代器模式 基本介绍 迭代器模式（Iterator Pattern）是常用的设计模式，属于行为型模式 如果我们的集合元素使用不同的方式实现，有数组，还有Java的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决 迭代器模式，提供一种遍历集合元素的统一接口，用一致的方式遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构 迭代器模式原理类图 迭代器模式的角色及职责 Iterator：迭代器接口，是系统提供，含义 hasNext，next，remove ConcreteIterator：具体的迭代器类，管理迭代 Aggregate：一个统一的聚合接口，将客户端和具体聚合解耦 ConcreteAggreage：具体的聚合持有对象集合，并提供一个方法，返回一个迭代器，该迭代器可以正确遍历集合 Client：客户端，通过 Iterator 和 Aggregate 依赖子类 迭代器模式应用实例 迭代器模式应用实例 import java.util.Iterator; public interface College { public String getName(); //增加系的方法 public void addDepartment(String name, String desc); //返回一个迭代器,遍历 public Iterator createIterator(); } public class Department { private String name; private String desc; public Department(String name, String desc) { super(); this.name = name; this.desc = desc; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDesc() { return desc; } public void setDesc(String desc) { this.desc = desc; } } import java.util.Iterator; import java.util.List; public class OutPutImpl { //学院集合 List\u003cCollege\u003e collegeList; public OutPutImpl(List\u003cCollege\u003e collegeList) { this.collegeList = collegeList; } //遍历所有学院,然后调用printDepartment 输出各个学院的系 public void printCollege() { //从collegeList 取出所有学院, Java 中的 List 已经实现Iterator Iterator\u003cCollege\u003e iterator = collegeList.iterator(); while(iterator.hasNext()) { //取出一个学院 College college = iterator.next(); System.out.println(\"=== \"+college.getName() +\"=====\" ); printDepartment(college.createIterator()); //得到对应迭代器 } } //输出 学院输出 系 public void printDepartment(Iterator iterator) { while(iterator.hasNext()) { Department d = (Department)iterator.next(); System.out.println(d.getName()); } } } import java.util.ArrayList; import java.util.Iterator; import java.util.List; public class InfoCollege implements College { List\u003cDepartment\u003e departmentList; public InfoCollege() { departmentList = new ArrayList\u003cDepartment\u003e(); addDepartment(\"信息安全专业\", \" 信息安全专业 \"); addDepartment(\"网络安全专业\", \" 网络安全专业 \"); addDepartment(\"服务器安全专业\", \" 服务器安全专业 \"); } @Override public String getName() { // TODO Auto-generated method stub return \"信息工程学院\"; } @Override public void addDepartment(String name, String desc) { // TODO Auto-generated method stub Department department = new Department(name, desc); departmentList.add(department); } @Override public Iterator createIterator() { // TODO Auto-generated method stub return new InfoColleageIterator(departmentList); } } import java.util.Iterator; import java.util.List; public class InfoColleageIterator implements Iterator { List\u003cDepartment\u003e departmentList; // 信息工程学院是以List方式存放系 int index = -1;//索引 public InfoColleageIterator(List\u003cDepartment\u003e departmentList) { this.departmentList = departmentList; } //判断list中还有没有下一个元素 @Override public boolean hasNext() { // TODO Auto-generated method stub if(index \u003e= departmentList.size() - 1) { return false; } else { index += 1; return true; } } @Override public Object next() { // TODO Auto-generated method stub return departmentList.get(index); } //空实现remove public void remove() { } } import java.util.Iterator; public class ComputerCollege implements College { Department[] departments; int numOfDepartment = 0 ;// 保存当前数组的对象个数 public ComputerCollege() { departments = new Department[5]; addDepartment(\"Java专业\", \" Java专业 \"); addDepartment(\"PHP专业\", \" PHP专业 \"); addDepartment(\"大数据专业\", \" 大数据专业 \"); } @Override public String getName() { // TODO Auto-generated method stub return \"计算机学院\"; } @Override public void addDepartment(String name, String desc) { // TODO Auto-generated method stub Department department = new Department(name, desc); departments[numOfDepartment] = department; numOfDepartment += 1; } @Override public Iterator createIterator() { // TODO Auto-generated ","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:17","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"观察者模式 天气预报项目 具体需求如下： 气象站可以将每天测量到的温度、湿度、气压等等以公告的形式发布出去（比如发布到自己的网站或第三方） 需要设计开放型API，便于其他第三方也能接入气象站获取数据 提供温度、气压和湿度的接口 测量数据更新时，要能实时的通知给第三方 传统方案 通过对气象站项目的分析，我们可以初步设计出一个WeatherData类 weather 说明： 通过getXxx方法，可以让第三方接入，并得到相关信息 当数据有更新时，气象站通过调用 dataChange() 去个更新数据，当第三方再次获取时，就能得到最新数据，当然也可以推送 解决示意图： 解决示意图解决示意图 CurrentConditions(当前的天气情况) 可以理解成是我们气象局的网站 // 推送 /** * 显示当前天气情况（可以理解成是气象站自己的网站） * @author Administrator * */ public class CurrentConditions { // 温度，气压，湿度 private float temperature; private float pressure; private float humidity; //更新 天气情况，是由 WeatherData 来调用，我使用推送模式 public void update(float temperature, float pressure, float humidity) { this.temperature = temperature; this.pressure = pressure; this.humidity = humidity; display(); } //显示 public void display() { System.out.println(\"***Today mTemperature: \" + temperature + \"***\"); System.out.println(\"***Today mPressure: \" + pressure + \"***\"); System.out.println(\"***Today mHumidity: \" + humidity + \"***\"); } } /** * 类是核心 * 1. 包含最新的天气情况信息 * 2. 含有 CurrentConditions 对象 * 3. 当数据有更新时，就主动的调用 CurrentConditions对象update方法(含 display), 这样他们（接入方）就看到最新的信息 * @author Administrator * */ public class WeatherData { private float temperatrue; private float pressure; private float humidity; private CurrentConditions currentConditions; //加入新的第三方 public WeatherData(CurrentConditions currentConditions) { this.currentConditions = currentConditions; } public float getTemperature() { return temperatrue; } public float getPressure() { return pressure; } public float getHumidity() { return humidity; } public void dataChange() { //调用 接入方的 update currentConditions.update(getTemperature(), getPressure(), getHumidity()); } //当数据有更新时，就调用 setData public void setData(float temperature, float pressure, float humidity) { this.temperatrue = temperature; this.pressure = pressure; this.humidity = humidity; //调用dataChange， 将最新的信息 推送给 接入方 currentConditions dataChange(); } } public class Client { public static void main(String[] args) { //创建接入方 currentConditions CurrentConditions currentConditions = new CurrentConditions(); //创建 WeatherData 并将 接入方 currentConditions 传递到 WeatherData中 WeatherData weatherData = new WeatherData(currentConditions); //更新天气情况 weatherData.setData(30, 150, 40); //天气情况变化 System.out.println(\"============天气情况变化=============\"); weatherData.setData(40, 160, 20); } } 传统方案问题分析 其他第三方接入气象站获取数据的问题 无法在运行时动态的添加第三方（新浪网站） 违反 OCP 原则 -\u003e 观察者模式 // 在WeatherData中，当增加一个第三方，都需要创建一个对应的第三方的公告板对象，并加入到dataChange，不利于维护也不是动态加入 public void dataChange(){ currentConditions.update(getTemperature,getPressure,getHumidity()); } 观察者模式 基本介绍 观察者模式（Observer Pattern）：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。 观察者模式原理 观察者模式原理-Subject 观察者模式的角色及职责 观察者模式类似用户订购牛奶业务 奶站：Subject 用户：Observer Subject：登记注册、移除和通知 registerObserver 注册 removeObserver 移除 notifyObserver 通知所有的注册用户，根据不同的需求，可以是更新数据，让用户来取，也可能是实施推送，根据具体需求定 Observer：接收输入 观察者模式：对象之间多对一依赖的一种设计方案，被依赖的对象为 Subject，依赖的对象为 Observer，Subject 通知 Observer 变化，比如这里的奶站是 Subject，是“1”的一方，用户是 Observer，是“多”的一方 观察者模式应用实例 观察者模式解决天气预报需求 观察者模式解决天气预报需求类图 //观察者接口，有观察者来实现 public interface Observer { public void update(float temperature, float pressure, float humidity); } //接口, 让WeatherData 来实现 public interface Subject { public void registerObserver(Observer o); public void removeObserver(Observer o); public void notifyObservers(); } import java.util.ArrayList; /** * 类是核心 * 1. 包含最新的天气情况信息 * 2. 含有 观察者集合，使用ArrayList管理 * 3. 当数据有更新时，就主动的调用 ArrayList, 通知所有的（接入方）就看到最新的信息 * @author Administrator * */ public class WeatherData implements Subject { private float temperatrue; private float pressure; private float humidity; //观察者集合 private ArrayList\u003cObserver\u003e observers; //加入新的第三方 public WeatherData() { observers = new ArrayList\u003cObserver\u003e(); } public float getTemperature() { return temperatrue; } public float getPressure() { return pressure; } public float getHumidity() { return humidity; } public void dataChange() { //调用 接入方的 update notifyObservers(); } //当数据有更新时，就调用 setData public void setData(float","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:18","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"中介者模式 智能家庭管理系统 项目需求： 智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘等 主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为：闹钟响起 -\u003e 咖啡机开始做咖啡 -\u003e 窗帘自动落下 -\u003e 电视机开始播放 传统方案 传统设计方案类图 传统设计方案问题分析 当各电器对象有多种状态改变时，相互之间的调用关系会比较复杂 各个电器对象彼此联系，你中有我，我中有你，不利于松耦合 各个电器对象之间所传递的消息（参数），容易混乱 当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性都不理想 -\u003e 这时可以考虑中介者模式 中介者模式 基本介绍 中介者模式（Mediator Pattern），用一个中介者对象封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互 中介者模式属于行为型模式，使代码易于维护 比如 MVC 模式，C（Controller 控制器）是 M（Model 模型）和 V（View 视图）的中介者，在前后端交互时起到了中间人的作用 中介者模式原理类图 中介者模式原理类图 中介者模式中角色及职责 Mediator 就是抽象中介者，定义了同事对象到中介者对象的接口 Colleague 是抽象同事类 ConcreteMediator 具体的中介者对象，实现抽象方法，它需要知道所有的具体同事类，即以一个集合来管理HashMap，并接受某个同事对象消息，完成相应的任务 ConcreteColleague 具体的同事类，会有很多，每个同事只知道自己的行为，而不了解其他同事类的行为（方法），但是它们都依赖中介者对象 中介者模式应用实例 中介者模式解决智能家庭管理类图 public abstract class Mediator { //将给中介者对象，加入到集合中 public abstract void Register(String colleagueName, Colleague colleague); //接收消息, 具体的同事对象发出 public abstract void GetMessage(int stateChange, String colleagueName); public abstract void SendMessage(); } //同事抽象类 public abstract class Colleague { private Mediator mediator; public String name; public Colleague(Mediator mediator, String name) { this.mediator = mediator; this.name = name; } public Mediator GetMediator() { return this.mediator; } public abstract void SendMessage(int stateChange); } //具体的同事类 public class Alarm extends Colleague { //构造器 public Alarm(Mediator mediator, String name) { super(mediator, name); // TODO Auto-generated constructor stub //在创建Alarm 同事对象时，将自己放入到ConcreteMediator 对象中[集合] mediator.Register(name, this); } public void SendAlarm(int stateChange) { SendMessage(stateChange); } @Override public void SendMessage(int stateChange) { // TODO Auto-generated method stub //调用的中介者对象的getMessage this.GetMediator().GetMessage(stateChange, this.name); } } public class TV extends Colleague { public TV(Mediator mediator, String name) { super(mediator, name); // TODO Auto-generated constructor stub mediator.Register(name, this); } @Override public void SendMessage(int stateChange) { // TODO Auto-generated method stub this.GetMediator().GetMessage(stateChange, this.name); } public void StartTv() { // TODO Auto-generated method stub System.out.println(\"It's time to StartTv!\"); } public void StopTv() { // TODO Auto-generated method stub System.out.println(\"StopTv!\"); } } public class Curtains extends Colleague { public Curtains(Mediator mediator, String name) { super(mediator, name); // TODO Auto-generated constructor stub mediator.Register(name, this); } @Override public void SendMessage(int stateChange) { // TODO Auto-generated method stub this.GetMediator().GetMessage(stateChange, this.name); } public void UpCurtains() { System.out.println(\"I am holding Up Curtains!\"); } } import java.util.HashMap; //具体的中介者类 public class ConcreteMediator extends Mediator { //集合，放入所有的同事对象 private HashMap\u003cString, Colleague\u003e colleagueMap; private HashMap\u003cString, String\u003e interMap; public ConcreteMediator() { colleagueMap = new HashMap\u003cString, Colleague\u003e(); interMap = new HashMap\u003cString, String\u003e(); } @Override public void Register(String colleagueName, Colleague colleague) { // TODO Auto-generated method stub colleagueMap.put(colleagueName, colleague); // TODO Auto-generated method stub if (colleague instanceof Alarm) { interMap.put(\"Alarm\", colleagueName); } else if (colleague instanceof CoffeeMachine) { interMap.put(\"CoffeeMachine\", colleagueName); } else if (colleague instanceof TV) { interMap.put(\"TV\", colleagueName); } else if (colleague instanceof Curtains) { interMap.put(\"Curtains\", colleagueName); } } //具体中介者的核心方法 //1. 根据得到消息，完成对应任务 //2. 中介者在这个方法，协调各个具体的同事对象，完成任务 @Override public void GetMessage(int stateChange, String colleagueName) { // TODO Auto-generated method stub //处理闹钟发出的消息 if (colleagueMap.get(colleagueName) instanceof Alarm) { if (stateChange == 0) { ((CoffeeMachine) (colleagueMap.get(interMap .get(\"CoffeeMachine\")))).StartCoffee(); ((TV) (colleagueMap.get(interMap.get(\"TV\")))).StartTv(); } else if (stateChange == 1) { ((TV) (colleagueMap.get(","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:19","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"备忘录模式 游戏角色状态恢复问题 游戏角色有攻击力和防御力，在大战Boss前保存自身的状态（攻击力和防御力），当大战Boss后攻击力和防御力下降，从备忘录对象恢复到大战前的状态 传统方案 传统的设计方案（类图） 传统方案的问题分析 一个对象，就对应一个保存对象状态的对象，这样当我们游戏的对象很多时，不利于管理，开销也很大 传统的方式是简单地做备份，new出另一个对象出来，再把需要备份的数据放到这个新对象，但这就暴露了对象内部的细节 解决方案 -\u003e 备忘录模式 备忘录模式 基本介绍 备忘录模式（Memento Pattern）在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态 可以这样理解备忘录模式：显示生活中的备忘录是用来记录某些要去做的事情，或者是记录已经达到的共同意见的事情，以防忘记了。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来记录一个对象的某种状态，或者某些数据，当要做回退时，可以从备忘录对象里获取原来的数据进行恢复操作 备忘录模式属于行为型模式 备忘录模式原理 备忘录模式原理类图 备忘录模式中角色及职责 Originator：对象（需要保存状态的对象） Memento：备忘录对象，负责保存好记录。即 Originator 内部状态 Caretaker：守护者对象，负责保存多个备忘录对象，使用集合管理，提高效率 说明：如果希望保存多个 Orifginator 对象的不同时间的状态，也可以，只需要 HashMap\u003cString,集合\u003e 针对上面的备忘录模式原理结构图，我们使用代码简单实现，注意体会体现出 Caretaker 可以保存多个备忘录对象，方便管理，提高效率 public class Originator { private String state;//状态信息 public String getState() { return state; } public void setState(String state) { this.state = state; } //编写一个方法，可以保存一个状态对象 Memento //因此编写一个方法，返回 Memento public Memento saveStateMemento() { return new Memento(state); } //通过备忘录对象，恢复状态 public void getStateFromMemento(Memento memento) { state = memento.getState(); } } public class Memento { private String state; //构造器 public Memento(String state) { super(); this.state = state; } public String getState() { return state; } } import java.util.ArrayList; import java.util.List; public class Caretaker { //在List 集合中会有很多的备忘录对象 private List\u003cMemento\u003e mementoList = new ArrayList\u003cMemento\u003e(); public void add(Memento memento) { mementoList.add(memento); } //获取到第index个Originator 的 备忘录对象(即保存状态) public Memento get(int index) { return mementoList.get(index); } } import java.util.ArrayList; import java.util.HashMap; public class Client { public static void main(String[] args) { // TODO Auto-generated method stub Originator originator = new Originator(); Caretaker caretaker = new Caretaker(); originator.setState(\" 状态#1 攻击力 100 \"); //保存了当前的状态 caretaker.add(originator.saveStateMemento()); originator.setState(\" 状态#2 攻击力 80 \"); caretaker.add(originator.saveStateMemento()); originator.setState(\" 状态#3 攻击力 50 \"); caretaker.add(originator.saveStateMemento()); System.out.println(\"当前的状态是 =\" + originator.getState()); //希望得到状态 1, 将 originator 恢复到状态1 originator.getStateFromMemento(caretaker.get(0)); System.out.println(\"恢复到状态1 , 当前的状态是\"); System.out.println(\"当前的状态是 =\" + originator.getState()); } } 备忘录模式应用实例 备忘录模式应用实例类图 public class Memento { //攻击力 private int vit; //防御力 private int def; public Memento(int vit, int def) { super(); this.vit = vit; this.def = def; } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } } public class GameRole { private int vit; private int def; //创建Memento ,即根据当前的状态得到Memento public Memento createMemento() { return new Memento(vit, def); } //从备忘录对象，恢复GameRole的状态 public void recoverGameRoleFromMemento(Memento memento) { this.vit = memento.getVit(); this.def = memento.getDef(); } //显示当前游戏角色的状态 public void display() { System.out.println(\"游戏角色当前的攻击力：\" + this.vit + \" 防御力: \" + this.def); } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } } import java.util.ArrayList; import java.util.HashMap; //守护者对象, 保存游戏角色的状态 public class Caretaker { //如果只保存一次状态 private Memento memento; //对GameRole 保存多次状态 //private ArrayList\u003cMemento\u003e mementos; //对多个游戏角色保存多个状态 //private HashMap\u003cString, ArrayList\u003cMemento\u003e\u003e rolesMementos; public Memento getMemento() { return memento; } public void setMemento(Memento memento) { this.memento = memento; } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //创建游戏角色 GameRole gameRole = new GameRole(); gameRole.setVit(100); gameRole.setDef(100); System.out.println(\"和boss大战前的状态\"); gameRole.display(); //把当前状态保存caretaker Caretaker caretaker = new Caretaker(); caretaker.setMemento(gameRole.createMemento()); System.out.println(\"和boss","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:20","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"解释器模式 四则运算问题 通过解释器模式来实现四则运算，如计算 a+b-c的值，具体要求如下： 先输入表达式的形式，比如 a+b+c-d+e，要求表达式的字母不能重复 分别输入 a，b，c，d，e 的值 最后求出结果 传统方案 传统方案的问题分析 编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果 问题分析：如果加入新的运算符，比如 * / （等等，不利于扩展，另外让一个方法来解析会造成程序结构混乱，不够清晰） 解决方案：可以考虑使用解释器模式，即：表达式 -\u003e 解释器（可以有多种）-\u003e结果 解释器模式 基本介绍 在编译原理中，一个算术表达式通过词法分析器形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器 解释器模式（Interpreter Pattern）：是指给定一个语言（表达式），定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子（表达式） 应用场景 应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树 一些重复出现的问题可以用一种简单的语言来表达 一个简单语法需要解释的场景 这样的例子还有，比如编译器、元算表达式计算、正则表达式、机器人等 解释器模式原理 解释器模式原理类图 解释器模式中角色及职责 Context：是环境角色，含有解释器之外的全局信息 AbstractExpression：抽象表达式，声明一个抽象的解释操作，这个方法为抽象语法树中所有的节点所共享 TerminalExpression：终结符表达式，实现与文法中的终结符相关的解释操作 NonTermialExpression：非终结符表达式，为文法中的非终结符实现解释操作 说明：输入 Context he TerminalExpression 信息通过 Client 输入即可 解释器模式应用实例 解释器模式解决四则运算实例类图 /** * 抽象类表达式，通过HashMap 键值对, 可以获取到变量的值 * * @author Administrator * */ public abstract class Expression { // a + b - c // 解释公式和数值, key 就是公式(表达式) 参数[a,b,c], value就是就是具体值 // HashMap {a=10, b=20} public abstract int interpreter(HashMap\u003cString, Integer\u003e var); } /** * 抽象运算符号解析器 这里，每个运算符号，都只和自己左右两个数字有关系， * 但左右两个数字有可能也是一个解析的结果，无论何种类型，都是Expression类的实现类 * * @author Administrator * */ public class SymbolExpression extends Expression { protected Expression left; protected Expression right; public SymbolExpression(Expression left, Expression right) { this.left = left; this.right = right; } //因为 SymbolExpression 是让其子类来实现，因此 interpreter 是一个默认实现 @Override public int interpreter(HashMap\u003cString, Integer\u003e var) { // TODO Auto-generated method stub return 0; } } import java.util.HashMap; public class SubExpression extends SymbolExpression { public SubExpression(Expression left, Expression right) { super(left, right); } //求出left 和 right 表达式相减后的结果 public int interpreter(HashMap\u003cString, Integer\u003e var) { return super.left.interpreter(var) - super.right.interpreter(var); } } import java.util.HashMap; /** * 加法解释器 * @author Administrator * */ public class AddExpression extends SymbolExpression { public AddExpression(Expression left, Expression right) { super(left, right); } //处理相加 //var 仍然是 {a=10,b=20}.. //一会我们debug 源码,就ok public int interpreter(HashMap\u003cString, Integer\u003e var) { //super.left.interpreter(var) ： 返回 left 表达式对应的值 a = 10 //super.right.interpreter(var): 返回right 表达式对应值 b = 20 return super.left.interpreter(var) + super.right.interpreter(var); } } import java.util.HashMap; /** * 加法解释器 * @author Administrator * */ public class AddExpression extends SymbolExpression { public AddExpression(Expression left, Expression right) { super(left, right); } //处理相加 //var 仍然是 {a=10,b=20}.. //一会我们debug 源码,就ok public int interpreter(HashMap\u003cString, Integer\u003e var) { //super.left.interpreter(var) ： 返回 left 表达式对应的值 a = 10 //super.right.interpreter(var): 返回right 表达式对应值 b = 20 return super.left.interpreter(var) + super.right.interpreter(var); } } import java.util.HashMap; /** * 变量的解释器 * @author Administrator * */ public class VarExpression extends Expression { private String key; // key=a,key=b,key=c public VarExpression(String key) { this.key = key; } // var 就是{a=10, b=20} // interpreter 根据 变量名称，返回对应值 @Override public int interpreter(HashMap\u003cString, Integer\u003e var) { return var.get(this.key); } } import java.util.HashMap; import java.util.Stack; public class Calculator { // 定义表达式 private Expression expression; // 构造函数传参，并解析 public Calculator(String expStr) { // expStr = a+b // 安排运算先后顺序 Stack\u003cExpression\u003e stack = new Stack\u003c\u003e(); // 表达式拆分成字符数组 char[] charArray = expStr.toCharArray();// [a, +, b] Expression left = null; Expression right = null; //遍历我们的字符数组， 即遍历 [a, +, b] //针对不同的情况，做处理 for (int i = 0; i \u003c charArray.length; i++) { switch (charArray[i]) { case '+': // left = stack.pop();// 从stack取出left =\u003e \"a\" right = new VarExpression(String.valueOf(charArray[++i]));// 取出右表达式 \"b\" stack.push(new AddExpression(left, right));// 然后根据得到left 和 right 构建 AddExpresson加入stack break; case '-': // left = stack.pop(); right = new VarExpression(String.valueOf(charArray[++i])); s","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:21","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"状态模式 App抽奖活动问题 请编写程序完成APP抽奖活动 具体要求如下： 假如每参加一次这个活动要扣除用户50积分，中奖概率是10% 奖品数量固定，抽完就不能抽奖 活动有四个状态：可以抽奖、不能抽奖、发放奖品和奖品领完 活动的四个状态转换关系图如下所示 抽奖活动状态转换图 状态模式 基本介绍 状态模式（State Pattern）：它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换 当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类 状态模式原理类图 状态模式原理类图 状态模式中角色及职责 Context 类：环境角色，用于维护 State 实例，这个实例定义当前状态 State：抽象状态角色，定义一个接口封装与 Context 的一个特点接口相关行为 ConcreteState：具体的状态角色，每个子类实现一个与 Context 的一个状态相关行为 状态模式解决App抽奖应用实例 思路分析 定义一个接口叫状态接口，每个状态都实现它 接口有扣除积分方法、抽奖方法、发放奖品方法 状态模式解决App抽奖应用实例 /** * 状态抽象类 * @author Administrator * */ public abstract class State { // 扣除积分 - 50 public abstract void deductMoney(); // 是否抽中奖品 public abstract boolean raffle(); // 发放奖品 public abstract void dispensePrize(); } /** * 抽奖活动 // * * @author Administrator * */ public class RaffleActivity { // state 表示活动当前的状态，是变化 State state = null; // 奖品数量 int count = 0; // 四个属性，表示四种状态 State noRafflleState = new NoRaffleState(this); State canRaffleState = new CanRaffleState(this); State dispenseState = new DispenseState(this); State dispensOutState = new DispenseOutState(this); //构造器 //1. 初始化当前的状态为 noRafflleState（即不能抽奖的状态） //2. 初始化奖品的数量 public RaffleActivity( int count) { this.state = getNoRafflleState(); this.count = count; } //扣分, 调用当前状态的 deductMoney public void debuctMoney(){ state.deductMoney(); } //抽奖 public void raffle(){ // 如果当前的状态是抽奖成功 if(state.raffle()){ //领取奖品 state.dispensePrize(); } } public State getState() { return state; } public void setState(State state) { this.state = state; } //这里请大家注意，每领取一次奖品，count-- public int getCount() { int curCount = count; count--; return curCount; } public void setCount(int count) { this.count = count; } public State getNoRafflleState() { return noRafflleState; } public void setNoRafflleState(State noRafflleState) { this.noRafflleState = noRafflleState; } public State getCanRaffleState() { return canRaffleState; } public void setCanRaffleState(State canRaffleState) { this.canRaffleState = canRaffleState; } public State getDispenseState() { return dispenseState; } public void setDispenseState(State dispenseState) { this.dispenseState = dispenseState; } public State getDispensOutState() { return dispensOutState; } public void setDispensOutState(State dispensOutState) { this.dispensOutState = dispensOutState; } } /** * 发放奖品的状态 * @author Administrator * */ public class DispenseState extends State { // 初始化时传入活动引用，发放奖品后改变其状态 RaffleActivity activity; public DispenseState(RaffleActivity activity) { this.activity = activity; } // @Override public void deductMoney() { System.out.println(\"不能扣除积分\"); } @Override public boolean raffle() { System.out.println(\"不能抽奖\"); return false; } //发放奖品 @Override public void dispensePrize() { if(activity.getCount() \u003e 0){ System.out.println(\"恭喜中奖了\"); // 改变状态为不能抽奖 activity.setState(activity.getNoRafflleState()); }else{ System.out.println(\"很遗憾，奖品发送完了\"); // 改变状态为奖品发送完毕, 后面我们就不可以抽奖 activity.setState(activity.getDispensOutState()); //System.out.println(\"抽奖活动结束\"); //System.exit(0); } } } /** * 奖品发放完毕状态 * 说明，当我们activity 改变成 DispenseOutState， 抽奖活动结束 * @author Administrator * */ public class DispenseOutState extends State { // 初始化时传入活动引用 RaffleActivity activity; public DispenseOutState(RaffleActivity activity) { this.activity = activity; } @Override public void deductMoney() { System.out.println(\"奖品发送完了，请下次再参加\"); } @Override public boolean raffle() { System.out.println(\"奖品发送完了，请下次再参加\"); return false; } @Override public void dispensePrize() { System.out.println(\"奖品发送完了，请下次再参加\"); } } import java.util.Random; /** * 可以抽奖的状态 * @author Administrator * */ public class CanRaffleState extends State { RaffleActivity activity; public CanRaffleState(RaffleActivity activity) { this.activity = activity; } //已经扣除了积分，不能再扣 @Override public void deductMoney() { System.out.println(\"已经扣取过了积分\"); } //可以抽奖, 抽完奖后，根据实际情况，改成新的状态 @Override public boolean raffle() { System.out.println(\"正在抽奖，请稍等！\"); Random r = new Random(); int num = r.nextInt(10); // 10%中奖机会 if(num == 0){ // 改变活动状态为发放奖品 context activity.setState(activity.getDi","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:22","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"策略模式 鸭禽问题 有各种鸭子（比如：野鸭、北京鸭、水鸭等，鸭子有各种行为，比如：叫声、飞行等） 显示鸭子信息 传统方法 传统方案解决鸭禽问题 public abstract class Duck { public Duck() { } public abstract void display();//显示鸭子信息 public void quack() { System.out.println(\"鸭子嘎嘎叫~~\"); } public void swim() { System.out.println(\"鸭子会游泳~~\"); } public void fly() { System.out.println(\"鸭子会飞翔~~~\"); } } public class PekingDuck extends Duck { @Override public void display() { // TODO Auto-generated method stub System.out.println(\"~~北京鸭~~~\"); } //因为北京鸭不能飞翔，因此需要重写fly @Override public void fly() { // TODO Auto-generated method stub System.out.println(\"北京鸭不能飞翔\"); } } public class ToyDuck extends Duck{ @Override public void display() { // TODO Auto-generated method stub System.out.println(\"玩具鸭\"); } //需要重写父类的所有方法 public void quack() { System.out.println(\"玩具鸭不能叫~~\"); } public void swim() { System.out.println(\"玩具鸭不会游泳~~\"); } public void fly() { System.out.println(\"玩具鸭不会飞翔~~~\"); } } public class WildDuck extends Duck { @Override public void display() { // TODO Auto-generated method stub System.out.println(\" 这是野鸭 \"); } } 传统方法解决鸭禽问题分析和解决方案 其他鸭子，都继承了 Duck 类，所以 fly 让所有子类都会飞了，这是不正确的 上面所出现的问题，其实是继承带来的问题：对类的局部改动，尤其超类的局部改动会影响其他部分。会有溢出效应 为了改进上述问题，我们可以通过覆盖 fly 方法来解决 -\u003e 覆盖解决 问题又来了，如果我们有个一个玩具鸭子 ToyDuck，这样就需要 ToyDuck 去覆盖 Duck 的所有实现的方法 -\u003e 解决思路 策略模式（strategy pattern） 策略模式 基本介绍 策略模式（Strategy Pattern）:定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户 这算法体现了几个设计原则 第一：把变化的代码从不变的代码分离出来； 第二：针对接口编程而不是具体的类（定义了策略接口）； 第三：多用组合/聚合，少用继承（客户通过组合方式使用策略） 策略模式原理类图 策略模式原理类图 说明： 从上图可以看到，客户 context 有成员变量 strategy 或者其他的策略接口，至于需要使用到哪个策略，我们可以在构造器中指定 策略模式解决鸭禽问题实例 策略模式：分别封装行为接口，实现算法族，超类里放行为接口对象，在子类里具体设定行为对象。原则就是：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为的变化独立于算法的使用者 策略模式解决鸭禽问题实例类图 public abstract class Duck { //属性, 策略接口 FlyBehavior flyBehavior; //其它属性\u003c-\u003e策略接口 QuackBehavior quackBehavior; public Duck() { } public abstract void display();//显示鸭子信息 public void quack() { System.out.println(\"鸭子嘎嘎叫~~\"); } public void swim() { System.out.println(\"鸭子会游泳~~\"); } public void fly() { //改进 if(flyBehavior != null) { flyBehavior.fly(); } } public void setFlyBehavior(FlyBehavior flyBehavior) { this.flyBehavior = flyBehavior; } public void setQuackBehavior(QuackBehavior quackBehavior) { this.quackBehavior = quackBehavior; } } public interface FlyBehavior { void fly(); // 子类具体实现 } public interface QuackBehavior { void quack();//子类实现 } public class BadFlyBehavior implements FlyBehavior { @Override public void fly() { // TODO Auto-generated method stub System.out.println(\" 飞翔技术一般 \"); } } public class GoodFlyBehavior implements FlyBehavior { @Override public void fly() { // TODO Auto-generated method stub System.out.println(\" 飞翔技术高超 ~~~\"); } } public class NoFlyBehavior implements FlyBehavior{ @Override public void fly() { // TODO Auto-generated method stub System.out.println(\" 不会飞翔 \"); } } public class PekingDuck extends Duck { //假如北京鸭可以飞翔，但是飞翔技术一般 public PekingDuck() { // TODO Auto-generated constructor stub flyBehavior = new BadFlyBehavior(); } @Override public void display() { // TODO Auto-generated method stub System.out.println(\"~~北京鸭~~~\"); } } public class ToyDuck extends Duck{ public ToyDuck() { // TODO Auto-generated constructor stub flyBehavior = new NoFlyBehavior(); } @Override public void display() { // TODO Auto-generated method stub System.out.println(\"玩具鸭\"); } //需要重写父类的所有方法 public void quack() { System.out.println(\"玩具鸭不能叫~~\"); } public void swim() { System.out.println(\"玩具鸭不会游泳~~\"); } } public class WildDuck extends Duck { //构造器，传入FlyBehavor 的对象 public WildDuck() { // TODO Auto-generated constructor stub flyBehavior = new GoodFlyBehavior(); } @Override public void display() { // TODO Auto-generated method stub System.out.println(\" 这是野鸭 \"); } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub WildDuck wildDuck = new WildDuck(); wildDuck.fly();// ToyDuck toyDuck = new ToyDuck(); toyDuck.fly(); PekingDuck pekingDuck = new PekingDuck(); pekingDuck.fly(); //动态改变某个对象的行为, 北京鸭 不能飞 pekingDuck.setFlyBehavior(new NoFlyBehavior()); System.out.print","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:23","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"职责链模式 OA系统采购审批需求 学校OA系统的采购审批项目：需求是 采购员采购教学器材 如果金额小于等于5000，由教学主任审批（= \u003c= x \u003c= 5000） 如果金额小于等于10000，由院长审批（5000 \u003c= x \u003c= 10000） 如果金额小于等于30000，由副校长审批（10000 \u003c= x \u003c=30000） 如果金额超过30000以上，由校长审批（30000 \u003c x） 传统解决方案 传统方案解决OA系统采购审批需求 传统解决方案问题分析 传统方式是：接收到一个采购需求，根据采购金额来调用对应的 Approver（审批人）完成审批 传统方式的问题分析：客户端这里会使用到分支判断（比如 switch）来对不同的采购请求处理，这样就存在如下问题 如果各个班级的人员审批金额发生变化，在客户端的也需要变化 客户端必须明确的知道有多少个审批级别和访问 这样对一个采购请求进行处理和 Approver（审批人）就存在强耦合关系，不利于代码的扩展和维护 解决方案 -\u003e 职责链模式 职责链模式 基本介绍 职责链模式（Chain of Responsibility Pattern），又叫责任链模式，为请求创建了一个接收者对象的链（如下图所示）。这种模式对请求的发送者和接收者进行解耦。 职责链模式通常每个接收者都包含对另一个接收者引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，以此类推 这种类型的设计模式属于行为型模式 接收者对象的链 职责链模式原理 职责链模式（Chain of Resposibility），使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一个链，并沿着这个链传递该请求，直到一个对象处理它为止 责任链模式原理类图 职责链模式中角色及职责 Handle：抽象的处理者，定义了一个处理请求的接口，同时含义另外Handler ConcreteHandlerA，B：具体的处理者，处理它自己负责的请求，可以访问它的后继者（即下一个处理者），如果可以处理当前请求，则处理，否则就将该请求交给后继者去处理，从而形成一个职责链 Request：含义很多属性，表示一个请求 职责链模式应用实例 职责链模式解决OA系统采购审批需求类图 //请求类 public class PurchaseRequest { private int type = 0; //请求类型 private float price = 0.0f; //请求金额 private int id = 0; //构造器 public PurchaseRequest(int type, float price, int id) { this.type = type; this.price = price; this.id = id; } public int getType() { return type; } public float getPrice() { return price; } public int getId() { return id; } } public abstract class Approver { Approver approver; //下一个处理者 String name; // 名字 public Approver(String name) { // TODO Auto-generated constructor stub this.name = name; } //下一个处理者 public void setApprover(Approver approver) { this.approver = approver; } //处理审批请求的方法，得到一个请求, 处理是子类完成，因此该方法做成抽象 public abstract void processRequest(PurchaseRequest purchaseRequest); } public class DepartmentApprover extends Approver { public DepartmentApprover(String name) { // TODO Auto-generated constructor stub super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { // TODO Auto-generated method stub if(purchaseRequest.getPrice() \u003c= 5000) { System.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\"); }else { approver.processRequest(purchaseRequest); } } } public class CollegeApprover extends Approver { public CollegeApprover(String name) { // TODO Auto-generated constructor stub super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { // TODO Auto-generated method stub if(purchaseRequest.getPrice() \u003c 5000 \u0026\u0026 purchaseRequest.getPrice() \u003c= 10000) { System.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\"); }else { approver.processRequest(purchaseRequest); } } } public class SchoolMasterApprover extends Approver { public SchoolMasterApprover(String name) { // TODO Auto-generated constructor stub super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { // TODO Auto-generated method stub if(purchaseRequest.getPrice() \u003e 30000) { System.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\"); }else { approver.processRequest(purchaseRequest); } } } public class ViceSchoolMasterApprover extends Approver { public ViceSchoolMasterApprover(String name) { // TODO Auto-generated constructor stub super(name); } @Override public void processRequest(PurchaseRequest purchaseRequest) { // TODO Auto-generated method stub if(purchaseRequest.getPrice() \u003c 10000 \u0026\u0026 purchaseRequest.getPrice() \u003c= 30000) { System.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\"); }else { approver.processRequest(purchaseRequest); } } } public class Client { public static void main(String[] args) { // TODO Auto-generated method stub //创建一个请求 PurchaseRequest purchaseRequest = new PurchaseRequest(1, 31000, 1); //创建相关的审批人 DepartmentApprover departmentApprover = new DepartmentApprover(\"张主任\"); CollegeApprover collegeApprover = new CollegeApprover(\"李院长\"); ViceSchoolMasterApprover viceSchoolMasterApprover = new ViceSchoolMasterApprover(\"王副校\"); SchoolMasterApprover schoolMasterApprover = new SchoolMasterApprover(\"佟校长\");","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:24","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Technology"],"content":"设计模式总结 设计模式是程序员在编码中，有意或者无意使用到（也不是所有程序员都学习过设计模式），并且同一种设计模式实现方式也不是 100% 的一样，设计模式主要是提高程序的扩展性，可读性、可维护性、规范性 所有讲解某个设计模式在源码框架中使用时，和我们的标准的设计模式写法可能会有些出入，比如组合模式 Component 可以是抽象类，接口，也可以是一个实现类， 我们分析源码时(JDK HashMap源码)，Component 就可能不一样 对于框架源码，源码中部分使用了 A 设计模式，还部分使用了 B 设计模式，也是有可能的，也就是说设计模式是可以结合使用的 因为设计模式主要是一种编程思想，既然是思想，具体实现方式，就不可能100%的一样（当然，程序的设计结构基本是一样的） 所以学习设计模式（包括看源码分析）时，我们要抓住本质，使用这个设计模式到底带来了什么好处？扩展性提高了，还是更加规范了，这样我们才能领会设计模式的精妙之处。 纸上得来终觉浅，绝知此事要躬行","date":"2022-12-05","objectID":"/blog/en/20221205_designpatterns/:4:25","tags":["Java","coding","principle"],"title":"设计模式","uri":"/blog/en/20221205_designpatterns/"},{"categories":["Hugo"],"content":"basic Markdown syntax. Note This article is a shameful copy of the great Grav original page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2022-09-19","objectID":"/blog/en/markdown/:0:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:1:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2022-09-19","objectID":"/blog/en/markdown/:2:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2022-09-19","objectID":"/blog/en/markdown/:3:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2022-09-19","objectID":"/blog/en/markdown/:4:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2022-09-19","objectID":"/blog/en/markdown/:5:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"6 Emphasis ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:6:4","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2022-09-19","objectID":"/blog/en/markdown/:7:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"8 Lists ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2022-09-19","objectID":"/blog/en/markdown/:8:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"9 Code ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2022-09-19","objectID":"/blog/en/markdown/:9:4","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2022-09-19","objectID":"/blog/en/markdown/:10:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"11 Links ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:1","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:2","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2022-09-19","objectID":"/blog/en/markdown/:11:3","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2022-09-19","objectID":"/blog/en/markdown/:12:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Hugo"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The Dojocat This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2022-09-19","objectID":"/blog/en/markdown/:13:0","tags":["Markdown","HTML","Posts","grammar"],"title":"Markdown 基本语法","uri":"/blog/en/markdown/"},{"categories":["Technology"],"content":"Docker安装SQLServer","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Mac 安装 SQL Server ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:0","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"前言 由于最近学习需要使用到 SQL Server 数据库，但我本人使用的操作系统是 Mac ，众所周知， SQL Server 是微软旗下的关系型数据库（具体有关SQL Server优点自行去微软官方查看👀 Microsoft - SQL Server | Microsoft Docs ），所以微软肯定更加亲近自己的亲儿子 Windows 操作系统，以至于到现在 SQL Server 并不支持 Mac，那怎么办呢？总不能安装虚拟机使用吧，对于我们如此珍惜内存使用的程序猿那是不可能的😂，经过我查阅资料，我发现微软当前支持 Ubuntu 16.04，和 RHEL 7.2（红帽子企业版 Linux ），既然支持 Linux 那就好办了，我们可以使用Docker🤔应用去虚拟化实例。 ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:1","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Docker 介绍 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 Docker 最好的一点在于你需要什么环境就可以下载仅拥有该环境的 Linux 系统，即缩小了使用的体积，也拥有了需要使用的环境，轻便又高效。 ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:2","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Mac 安装 Docker Docker 官网手动安装 Docker HomeBrew 托管安装 brew cask install docker 对于能偷懒就偷懒的我来说😎，肯定选择后者一条命令解决了，官网安装下载还需要去寻找点击下载，对于程序猿来说多不优雅呀🤓，想要了解 macOS（或 Linux）缺失的软件包的管理器 — Homebrew 的可以自行去了解一下，真是可以大大提高效率，让你安装程序变得如此优雅。 ==\u003e Downloading https://download.docker.com/mac/stable/42716/Docker.dmg ######################################################################## 100.0% ==\u003e Verifying SHA-256 checksum for Cask 'docker'. ==\u003e Installing Cask docker ==\u003e Moving App 'Docker.app' to '/Applications/Docker.app'. docker was successfully installed! 显示 successfully 便已经成功下载 ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:3","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"Docker 配置并拉取容器镜像 基本环境配置 根据自己电脑相应配置，自己分配Docker占用资源大小，内存一定要大于2G，我记得好像SQL Server最基本要保证内存2G才能成功启动（以下是我的Docker资源分配配置）。 镜像加速 鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。 配置完成后重启 Docker 应用，打开 Terminal 输入 docker info 查看配置是否成功。 docker info .... Registry Mirrors: http://hub-mirror.c.163.com/ Live Restore Enabled: false Product License: Community Engine 拉取并运行 SQL Server 容器镜像 拉取并运行 SQL Server 容器映像，参考了Docker: Install containers for SQL Server on Linux - SQL Server | Microsoft Docs 从 Microsoft 容器注册表中拉取 SQL Server 2017 Linux 容器映像，打开我们的终端，输入命令： sudo docker pull mcr.microsoft.com/mssql/server:2017-latest 这里会将sql server for linux docker下载到我们计算机上。 使用 Docker 运行容器镜像 要使用 Docker 运行容器映像，可以从 Terminal (Linux/macOS) 使用以下命令。(也就是终端)。 sudo docker run -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=\u003cYourStrong@Passw0rd\u003e\" \\ -p 1433:1433 --name sqlserver \\ -d mcr.microsoft.com/mssql/server:2017-latest 备注: 密码应符合 SQL Server 默认密码策略，否则容器无法设置 SQL Server，将停止工作。 默认情况下，密码的长度必须至少为 8 个字符，并且必须包含以下四种字符中的三种：大写字母、小写字母、十进制数字和符号。 你可以通过执行 docker logs 命令检查错误日志。 参数说明: -e \"ACCEPT_EULA=Y\" 将 ACCEPT_EULA 变量设置为任意值，以确认接受最终用户许可协议。 SQL Server 映像的必须设置。 \"SA_PASSWORD=\u003cYourStrong@Passw0rd\u003e\" 指定至少包含 8 个字符且符合 SQL Server 密码要求的强密码。 SQL Server 映像的必需设置。 -p 1433:1433 将主机环境中的 TCP 端口（第一个值）映射到容器中的 TCP 端口（第二个值）。 在此示例中，SQL Server 侦听容器中的 TCP 1433，并对主机上的端口 1433 公开。 name sqlserver 为容器指定一个自定义名称，而不是使用随机生成的名称。 如果运行多个容器，则无法重复使用相同的名称。 mcr.microsoft.com/mssql/server:2017-latest SQL Server 2017 Linux 容器映像 查看 Docker 容器 要查看 Docker 容器，请在 Terminal 中使用 docker ps 命令。 sudo docker ps -a 显示结果如下： CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 78c2deca0bd6 mcr.microsoft.com/mssql/server:2017-latest \"/opt/mssql/bin/nonr…\" 30 minutes ago Exited (0) 2 minutes ago sqlserver 如果“状态”列显示“正常运行”，则 SQL Server 将在容器中运行，并侦听“端口”列中指定的端口（我现在是关闭状态，可以使用 docker start CONTAINER ID 重新启动 ） 。 更改 SA 密码 SA 帐户是安装过程中在 SQL Server 实例上创建的系统管理员。 创建 SQL Server 容器后，通过在容器中运行 echo $SA_PASSWORD，可发现指定的 SA_PASSWORD 环境变量。 出于安全考虑，请考虑更改 SA 密码。 选择 SA 用户要使用的强密码。 使用 docker exec 运行sqlcmd ，以使用 Transact-SQL 更改密码。 在下面的示例中，将旧密码 \u003cYourStrong!Passw0rd\u003e和新密码 \u003cYourNewStrong!Passw0rd\u003e 替换为你自己的密码值。 sudo docker exec -it sqlserver /opt/mssql-tools/bin/sqlcmd \\ -S localhost -U SA -P \"\u003cYourStrong@Passw0rd\u003e\" \\ -Q 'ALTER LOGIN SA WITH PASSWORD=\"\u003cYourNewStrong@Passw0rd\u003e\"' 连接 SQL Server 下列步骤在容器内部使用 SQL Server 命令行工具 sqlcmd 来连接 SQL Server。 使用 docker exec -it 命令在运行的容器内部启动交互式 Bash Shell。 在下面的示例中，sqlserver 是在创建容器时由 –name 参数指定的名称。 sudo docker exec -it sql1 \"bash\" 在容器内部使用 sqlcmd 进行本地连接。 默认情况下，sqlcmd 不在路径之中，因此需要指定完整路径。 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"\u003cYourNewStrong@Passw0rd\u003e\" 如果成功，应会显示 sqlcmd 命令提示符：1\u003e ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:4","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"利用Navicat可视化工具连接Sql Server 下载 navicat 应用选择SQL Server服务，输入连接名、主机、用户名、密码进行连接。 提示： 密码一定不要填错，如果密码填错，会出现以下错误(一定要学会去Docker里面查看LOG): 注意： 创建sa账号时候的密码的左右\u003c\u003e两个尖括号也是属于密码的 我就是在实际操作中犯了如此低级的错误，望以鉴！ ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:5","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Technology"],"content":"总结 越努力越幸运! 以上就是本次分享的在Mac上如何使用 SQL Server 的详细教程,我们一起讨论！如果哪里有写的不好的地方，还希望大家提出来，在下方评论区留言，我加以修正！ ","date":"2022-08-31","objectID":"/blog/en/20220831_sqlserver/:0:6","tags":["study","Docker","SQLServer","Mac"],"title":"Mac使用SQLServer数据库","uri":"/blog/en/20220831_sqlserver/"},{"categories":["Java "],"content":"Java学习路线","date":"2022-08-13","objectID":"/blog/en/20220813_route/","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 学习路线 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:0:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"前言 首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致，目前，Java 的岗位需求多，是后台开发的主流编程语言，功能强大，还是很值得学习的。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:1:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 1：Java 入门 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 培养兴趣、快速上手 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"前期准备 准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手 推荐网站 - 菜鸟工具：https://c.runoob.com/compile/10 准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。 推荐软件 Typora：https://www.typora.io/ 推荐使用 Markdown 语法编写，鱼皮教程：https://www.bilibili.com/video/BV1no4y1k7YT/ 想学好编程，别背代码，要多写，把这句话刻到脑子里。 选视频和找资料的小技巧：多看评论区、多看隔壁评论区，不要看过期的视频。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 编程基础（45 天） 知识 Java 特点（看不懂没事，别背！） 环境搭建 Java 基础语法 数据类型 流程控制 数组 面向对象 方法 重载 封装 继承 多态 抽象类 接口 枚举 常用类 String 日期时间 集合类 泛型 注解 异常处理 多线程 IO 流 反射 学习建议 一定要持续学习，不能断！ 跟着书上的例子敲代码后，自主编写代码，并完成课后练习。 资源 视频 ⭐ 韩顺平 - 零基础 30 天学会 Java：https://www.bilibili.com/video/BV1fh411y7R8（900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想） 文档 ⭐ 菜鸟教程：https://www.runoob.com/java/java-tutorial.html（可以在线练习） 廖雪峰 Java 教程：https://www.liaoxuefeng.com/wiki/1252599548343744 书籍 《Head First Java》 在线游戏 Codegym：https://codegym.cc/zh（玩玩前几关培养兴趣不错，但后面收费了） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 8（3 天） 知识 Stream API Lambda 表达式 新日期时间 API 接口默认方法 资源 视频 ⭐ 宋红康 - 全网最全Java零基础入门教程：https://www.bilibili.com/video/BV1Kb411W75N（只看 Java 8 部分即可） 文档 ⭐ 菜鸟教程：https://www.runoob.com/java/java8-new-features.html 书籍 《Java 8 实战》 工具 ⭐ 在线编写运行 Java 8：https://www.tutorialspoint.com/compile_java8_online.php 项目 Java 8 小代码片段：https://github.com/biezhi/30-seconds-of-java8 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"尾声 学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？ 不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？ 当然是数据结构和算法！ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:2:5","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 2：巩固基础 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 想学好编程，计算机基础知识要学好。 比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。 我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 的基础。 那直接用 Java 来写算法题目，一举两得，岂不美哉？ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Java 基础（30 天） 学习建议 建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固 Java 的不二之选，其中图形界面章节可以选择不看。 之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍。 资源 书籍 ⭐《Java 核心技术卷 1》 练习 ⭐ 牛客题库：https://www.nowcoder.com/intelligentTest ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"数据结构与算法 知识 时间 / 空间复杂度分析 数据结构 数组 字符串 队列 栈 链表 集合 哈希表 二叉树 算法 排序 双指针 查找 分治 动态规划 递归 回溯 贪心 位运算 DFS BFS 图 学习建议 学算法一定要多思考、多练习！！！ 在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。 不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。 之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。 有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~ 资源 文章 ⭐ 刷了 1000 多道算法题，一点心得：https://t.1yb.co/oT9q（鱼皮原创） 在线教程 ⭐ LeetCode LeetBook：https://leetcode-cn.com/leetbook/ 在线刷题 ⭐ LeetCode：https://leetcode-cn.com/ 书籍 ⭐《小灰的漫画算法》 ⭐《剑指 Offer》 《程序员代码面试指南》 图解算法数据结构：https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/ LeetCode 101（C++）：https://github.com/changgyhub/leetcode_101 LeetCode 题解（C++）：https://github.com/soulmachine/leetcode LeetCode Cookbook（Go 语言）：https://github.com/halfrost/LeetCode-Go 视频 尚硅谷 Java 数据结构与算法：https://www.bilibili.com/video/BV1E4411H73v（难度比面试的要求大一些，适合希望更全面学习的朋友） Leetcode 真题解析：https://www.bilibili.com/video/BV1a54y1b74k 工具 VisuAlgo 数据结构和算法动态可视化：https://visualgo.net/zh 数据结构可视化：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html 网站 五分钟学算法：https://www.cxyxiaowu.com/ ###计算机基础 知识 计算机网络 HTTP / HTTPS 协议 网络模型 UDP / TCP 协议 网络安全 域名解析 操作系统 进程、线程 进程 / 线程间通讯方式 进程调度算法 进程 / 线程状态 死锁 内存管理 学习建议 在巩固基础期间，我建议大家多去了解计算机基础知识，比如操作系统、计算机网络。 但这一块知识说实话挺枯燥的，对吧，你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃。 我的建议是，可以先看有趣的课外书，比如《图解 HTTP》等等，对基础知识先有个大致的印象，等后面有时间了再系统学习。 比如还在校园就跟着学校的进度学习就成，自学的话可以看下 《计算机网络微课堂》、 《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了。 资源 视频 《计算机网络微课堂》：https://www.bilibili.com/video/BV1c4411d7jb 《清华操作系统原理》：https://www.bilibili.com/video/BV1uW411f72n 书籍 ⭐《图解 HTTP》 《网络是怎样连接的》 ⭐《图解 TCP / IP》 《编码》 《30天自制操作系统》 《计算机网络-自顶向下方法》（难度较大，不推荐新手看） 《现代操作系统》（难度较大，不推荐新手看） 《深入理解计算机系统》（难度较大，不推荐新手看） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"尾声 巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:3:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 3：Java 企业开发基础 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 面向薪资编程，学习实际工作要用的技术，并能 独立 做出一个具有完整功能的 Java Web 项目。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"MySQL 数据库（7 天） 企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。 知识 基本概念 MySQL 搭建 SQL 语句编写 约束 索引 事务 设计数据库表 性能优化 学习建议 其中，SQL 语句编写 和 设计数据库表 这两个能力一定要有！ 比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。 这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。 资源 视频 ⭐ 老杜 - mysql入门基础 + 数据库实战：https://www.bilibili.com/video/BV1Vy4y1z7EX（较新、内容相对精炼，有习题） 尚硅谷 - MySQL基础教程：https://www.bilibili.com/video/BV1xW411u7ax（小姐姐讲课，但感觉音质一般） 在线练习 ⭐ SQL 自学网：http://xuesql.cn/ ⭐ SQL 在线运行：https://www.bejson.com/runcode/sql/ 文档 SQL - 菜鸟教程：https://www.runoob.com/sql/sql-tutorial.html MySQL - 菜鸟教程：https://www.runoob.com/mysql/mysql-tutorial.html ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"开发框架（60 天） Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。 开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！ 不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。 下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。 知识 Java Web 描述：Java 网页应用开发基础 前端基础 XML JSON Servlet Filter Listener JSP JSTL Cookie Session Spring 5 描述：Java 轻量级应用框架 IOC AOP 事务 SpringMVC 描述：Java 轻量级 web 开发框架 什么是 MVC？ 请求与响应 Restful API 拦截器 配置 执行过程 MyBatis 描述：数据访问框架，操作数据库进行增删改查等操作 增删改查 全局配置 动态 SQL 缓存 和其他框架的整合 逆向工程 MyBatis Plus 描述：Mybatis 的增强工具，能够简化开发、提高效率 引入 通用 CRUD 条件构造器 代码生成器 插件扩展 自定义全局操作 SpringBoot 2 描述：简化 Spring 应用的初始搭建以及开发过程，提高效率 常用注解 资源整合 高级特性 本地热部署 Spring Security 描述：Spring 的安全管理框架 用户认证 权限管理 Maven / Gradle 描述：项目管理工具 构建 依赖管理 插件 配置 子父工程 学习建议 由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。 学这些技术的时候，千万不能懒 ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。 学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 SpringBoot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。 Maven / Gradle 当工具用就好，面试基本不问，跟着框架教程去用就行了，先不用花太多时间去深入学。 资源 视频（按顺序看） ⭐ 尚硅谷最新版 JavaWeb 全套教程：https://www.bilibili.com/video/BV1Y7411K7zz（前端部分最好也看下） ⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：https://www.bilibili.com/video/BV1Vf4y127N5 ⭐ 尚硅谷 - SpringMVC 2021 最新教程：https://www.bilibili.com/video/BV1Ry4y1574R ⭐ 尚硅谷 - MyBatis 实战教程全套完整版：https://www.bilibili.com/video/BV1mW411M737 ⭐ 尚硅谷 - MyBatisPlus 教程：https://www.bilibili.com/video/BV1Ds411E76Y Maven 零基础入门教程：https://www.bilibili.com/video/BV1TW411g7hP（搞不懂 Maven 可以看看） ⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：https://www.bilibili.com/video/BV19K4y1L7MT 尚硅谷 - SpringSecurity 框架教程：https://www.bilibili.com/video/BV15a411A7kP ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"开发规范（3 天） 开发不规范，同事两行泪。 开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。 知识 代码规范 代码风格 命名 其他规则 提交规范 学习建议 简单过一遍大厂团队的规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范，再去遵守。 项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。 资源 书籍 ⭐ 阿里巴巴 Java 开发手册：https://developer.aliyun.com/graph/java（搜索《Java开发手册》） 视频 华山版《Java开发手册》独家讲解：https://developer.aliyun.com/live/1201 文档 Google Java Style Guide：https://google.github.io/styleguide/javaguide.html（谷歌 Java 代码规范） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Git（3 天） 此前大家可能听说过 GitHub，一流的代码开源托管平台。 Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。 无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。 知识 工作区 分支 代码提交、推送、拉取、回退、重置 分支操作 代码合并、解决冲突 标签 cherry-pick 学习建议 每个命令跟着敲一遍，有个大致的印象，会用即可，用的多了自然熟悉了。 资源 视频 ⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版https://www.bilibili.com/video/BV1vy4y1s7k6 书籍 猴子都能懂的 Git 入门 https://backlog.com/git-tutorial/cn/ ⭐ GitHub 漫游指南 https://github.phodal.com/ 文档 GitHub 官方文档：https://docs.github.com/cn 游戏 Learning Git Branching：https://learngitbranching.js.org/?locale=zh_CN ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:5","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Linux（10 天） 企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。 后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。 知识 Linux 系统安装 环境变量 文件管理 用户管理 内存管理 磁盘管理 进程管理 网络管理 软件包管理 服务管理 日志管理 Linux 内核 常用命令 常用环境搭建 Shell 脚本编程 VIM 的使用 学习建议 多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。 一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。 每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。 记不住没关系，用文档查就行了。 先会用，再理解。 资源 视频 ⭐ 2021 韩顺平 一周学会Linux https://www.bilibili.com/video/BV1Sv411r7vd（基于 CentOS 7.6 版本较新） 书籍 《鸟哥的 Linux 私房菜 —— 基础篇》http://cn.linux.vbird.org/linux_basic/linux_basic.php（经典） 文档 Linux 工具快速教程：https://linuxtools-rst.readthedocs.io（基础、工具进阶、工具参考） 实战 ⭐ 蓝桥云课 Linux 基础入门：https://www.lanqiao.cn/courses/1 腾讯云动手实验室：https://cloud.tencent.com/developer/labs 阿里云体验实验室：https://developer.aliyun.com/adc/labs/ 阿里云知行实验室：https://start.aliyun.com/ 华为云沙箱实验室：https://lab.huaweicloud.com/ 社区 Linux 中国：https://linux.cn/ 工具 ⭐ Linux 命令搜索：https://wangchujiang.com/linux-command Linux 命令大全手册：https://www.linuxcool.com/ Linux 命令示例：http://linux-commands-examples.com/ 宝塔 Linux 面板：https://www.bt.cn/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:6","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"前端基础（14 天） 虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。 知识 HTML CSS JavaScript Ajax Vue 学习建议 不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。 资源 参见鱼皮原创的前端学习路线：https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:4:7","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 4：Java 企业开发进阶 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，解决实际问题 。 要了解为什么需要这个技术？什么时候用哪些技术？ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"设计模式（21 天） 设计模式是软件开发中解决一类问题的通用方法。 使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。 知识 创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程 单例模式 工厂方法模式 抽象工厂 建造者模式 原型模式 结构型模式：把类或对象结合在一起形成一个更大的结构 适配器模式 组合模式 装饰器模式 代理模式 享元模式 外观模式 桥接模式 行为型模式：类和对象如何交互，及划分责任和算法 迭代器模式 模板方法模式 策略模式 命令模式 状态模式 责任链模式 备忘录模式 观察者模式 访问者模式 中介者模式 解释器模式 学习建议 先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。 资源 书籍 ⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错） 《Head First 设计模式》 《大话设计模式》 《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读） 视频 尚硅谷图解 Java 设计模式：https://www.bilibili.com/video/BV1G4411c7N4 文档 菜鸟教程：https://www.runoob.com/design-pattern/design-pattern-tutorial.html 图说设计模式：https://design-patterns.readthedocs.io/zh_CN/latest/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"中间件（14 天） 除了框架外，企业项目开发也会用到大量独立的中间件，以解决某些实际问题，比如提高项目的性能、提高项目的稳定性和可靠性等。 下面分享几个最常用的主流中间件。 知识 Redis 缓存 数据类型 常用操作 Java 操作 Redis 主从模型搭建 哨兵集群搭建 日志持久化 应用场景 RabbitMQ 消息队列 消息队列的作用 生产消费模型 交换机模型 死信队列 延迟队列 消息持久化 Java 操作 集群搭建 Nginx 网关 Nginx 作用 正向代理 反向代理（负载均衡） 常用命令 配置 动静分离（网站部署） 集群搭建 学习建议 学会如何使用中间件并不难，先能够独立使用，了解他们的应用场景；再用 Java 来操作中间件，和项目相结合。 跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。 资源 视频 ⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：https://www.bilibili.com/video/BV1Rv41177Af（基于 Redis 6 的，推荐） ⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：https://www.bilibili.com/video/BV1cb4y1o7zz（很新很全面） ⭐ 尚硅谷 - Nginx 教程由浅入深：https://www.bilibili.com/video/BV1zJ411w7SV（讲的比较全面） ⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：https://www.bilibili.com/video/BV1rU4y1J785/（简单演示 Nginx 部署网站） 文档 Redis 命令参考：http://redisdoc.com/ Redis 面试题整理：https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md RabbitMQ 中文文档：http://rabbitmq.mr-ping.com/ Nginx 中文文档：https://www.nginx.cn/doc/index.html 书籍 《Redis 实战》（经典） 《RabbitMQ 实战：高效部署分布式消息队列》（经典） 工具 ⭐ Redis 在线练习：https://try.redis.io/（强烈推荐） ⭐ RabbitMQ 在线模拟器：http://tryrabbitmq.com/ Nginx 配置在线生成：https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN 相关技术 缓存：Memcached、Ehcache 队列：Kafka、ActiveMQ、TubeMQ、RocketMQ 网关：HAProxy ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"Netty 网络编程（14 天） 开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。 很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。 知识 IO 模型（BIO / NIO） Channel Buffer Seletor Netty 模型 WebSocket 编程（动手做个聊天室） 学习建议 不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。 还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 思想。 资源 视频 ⭐ 尚硅谷Netty教程：https://www.bilibili.com/video/BV1DJ411m7NR Netty 技术演讲（中文字幕版）：https://www.youtube.com/watch?v=I8yy2Cy7dDI 文档 Netty 4 用户指南：https://www.w3cschool.cn/netty_4_user_guide/ 书籍 《Netty 实战》 相关技术 Vertx：http://vertxchina.github.io/vertx-translation-chinese/（比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"微服务（60 天） 随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。 因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。 换言之，想做大型项目，这块儿一定要好好学！ 知识 Dubbo 架构演进 RPC Zookeeper 服务提供者 服务消费者 项目搭建 微服务 微服务概念 Spring Cloud 框架 子父工程 服务注册与发现 注册中心 Eureka、Zookeeper、Consul Ribbon 负载均衡 Feign 服务调用 Hystrix 服务限流、降级、熔断 Resilience4j 服务容错 Gateway（Zuul）微服务网关 Config 分布式配置中心 分布式服务总线 分布式链路追踪 Spring Cloud Alibaba Nacos 注册、配置中心 OpenFeign 服务调用 Sentinel 流控 Seata 分布式事务 接口管理 Swagger 接口文档 Postman 接口测试 学习建议 时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。 这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。 分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。 资源 视频 ⭐ 尚硅谷 Dubbo 教程：https://www.bilibili.com/video/BV1ns411c7jV ⭐ 尚硅谷 SpringCloud（H版\u0026alibaba）框架开发教程（微服务分布式架构）：https://www.bilibili.com/video/BV18E411x7eT（把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！） 文档 Apache Dubbo 官方文档：https://dubbo.apache.org/zh/ Spring Cloud Alibaba 官方文档：https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md ⭐ Swagger 教学文档：https://doc.xiaominfo.com/（跟着快速开始直接用就好了） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:5","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"容器（7 天） 将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。 便于实现微服务、持续集成和交付。 知识 Docker 容器概念 镜像 部署服务 Dockerfile K8S（Kubernetes） 架构 部署应用 暴露服务 动态扩缩容 学习建议 会用 Docker / K8S 部署项目和服务就行，企业一般都有现成的平台直接用，面试考察不多，不用花太多时间。 资源 视频 ⭐【狂神说】Docker 最新超详细版教程通俗易懂：https://www.bilibili.com/video/BV1og4y1q7M4 K8S 视频教程：https://www.bilibili.com/video/BV1K5411N7j8 书籍 《深入浅出 Docker》：https://www.zhihu.com/pub/reader/119632192 文档 Docker — 从入门到实践：https://vuepress.mirror.docker-practice.com/ 菜鸟教程 Docker：https://www.runoob.com/docker/docker-tutorial.html 国外 Docker 官方文档：https://docs.docker.com/get-started/ 网站 Docker 中文社区：https://www.docker.org.cn/（强烈推荐，有很多 Docker 技术文章和学习笔记） Docker Blog：https://www.docker.com/blog/（国外 Docker 技术博客） 镜像源 Docker Hub：https://hub.docker.com 腾讯软件源：http://mirrors.tencent.com/#/index 阿里云 Docker 仓库：https://cr.console.aliyun.com/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:6","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"CI / CD（3 天） 持续集成 / 持续交付，贯穿整个研发到项目上线的过程，提高效率。 大公司一般都有自己的 CI / CD 平台。 知识 什么是 CI / CD CI / CD 有什么好处 使用任一 CI / CD 平台 学习建议 了解它是什么，并且实战使用任一 CI / CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。 真正要自己去搭建的时候，跟着官方文档来就行。 资源 视频 ⭐【狂神说】CI/CD到底是什么？十分钟理解企业级DevOps：https://www.bilibili.com/video/BV1zf4y127vu（讲的非常棒！带你快速理解 CI / CD 的作用和部分原理） 尚硅谷 - Jenkins 持续集成工具教程：https://www.bilibili.com/video/BV1GW411w7pn（实在要用到 Jenkins 再去学） 文档 Jenkins 官方文档：\u003chttps://www.jenkins.io/zh/ \u003e（有很多案例，要用的时候查一下就行了） 实战平台 ⭐ 微信云托管：https://cloud.weixin.qq.com/cloudrun 前端托管 Webify：https://cloud.tencent.com/product/webify（鱼皮给大家出过视频教程的 https://www.bilibili.com/video/BV11V411p7vf/） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:5:7","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 5：项目实战 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"学习建议 其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。 有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。 暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！ 有能力的朋友也可以试着用 GitHub 上的源码来学习啦~ 做一个完整的项目的确很不容易，建议大家根据自己的 时间、兴趣 选择 较新的、有配套源码的 教程，保持耐心。 下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"视频教程 尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：https://www.bilibili.com/video/BV1dQ4y1A75e（全栈项目，前后端讲得都很全面） 尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：https://www.bilibili.com/video/BV1bE411T7oZ（500 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面） 黑马 - 24 小时搞定 Java 毕设电商项目：https://www.bilibili.com/video/BV13f4y1r7fS 黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：https://www.bilibili.com/video/BV1Bo4y117zV 黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：https://www.bilibili.com/video/BV1Ub4y1f7rk 黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：https://www.bilibili.com/video/BV18A411L7UX 黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：https://www.bilibili.com/video/BV17v411V79c 黑马程序员 Java 项目《好客租房》：https://www.bilibili.com/video/BV1sZ4y1F7PD ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"项目源码（50 套） 电商秒杀 天猫整站 J2EE：https://how2j.cn/module/115.htm 天猫整站 SSM：https://how2j.cn/module/134.html 天猫整站 Springboot：https://how2j.cn/module/156.html mall-learning：https://github.com/macrozheng/mall-learningmall（学习教程，架构、业务、技术要点全方位解析） SpringBoot 电商商城系统 Mall4j：https://github.com/gz-yami/mall4j SpringBoot 完整电商系统 Mall：https://github.com/macrozheng/mall（包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现） newbee-mall：https://github.com/newbee-ltd/newbee-mall （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发） paascloud-master：https://github.com/paascloud/paascloud-master（基于 spring cloud + vue + oAuth2.0，前后端分离商城系统） mall-swarm：https://github.com/macrozheng/mall-swarm（一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统） onemall：https://github.com/YunaiV/onemall（mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba） litemall：https://github.com/linlinjava/litemall（又一个小商城，litemall = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端） xmall：https://github.com/Exrick/xmall （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统） miaosha：https://github.com/qiurunze123/miaosha （秒杀系统设计与实现） SecKill：https://github.com/hfbin/Seckill（基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统） 博客论坛 Mblog：开源 Java 博客系统 halo：一个优秀的开源博客发布应用 forum-java：一款用 Java（spring boot） 实现的现代化社区（论坛/问答/BBS/社交网络/博客）系统平台 vhr：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。 favorites-web:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。 community：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap NiterForum：尼特社区-NiterForum-一个论坛/社区程序。后端Springboot/MyBatis/Maven/MySQL，前端Thymeleaf/Layui。可供初学者，学习、交流使用。 VBlog：V部落，Vue+SpringBoot实现的多用户博客管理平台! NiceFish：SpringBoot/SpringCloud 前后端分离项目 My-Blog： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。 My-Blog-layui：layui 版本的 My-Blog : A simple \u0026 beautiful blogging system implemented with spring-boot \u0026 layui \u0026 thymeleaf \u0026 mybatis My Blog 是由 SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验 symphony：Java 实现的现代化社区 管理系统 Spring-Cloud-Admin：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。 bootshiro：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端 悟空CRM：基于jfinal+vue+ElementUI的前后端分离CRM系统 EL-ADMIN：基于 SpringBoot 的后台管理系统 pig：基于 Spring Boot 2.2、 Spring Cloud Hoxton \u0026 Alibaba、 OAuth2 的 RBAC 权限管理系统。 FEBS-Shiro：Spring Boot 2.1.3，Shiro1.4.0 \u0026 Layui 2.5.4 权限管理系统。 Spring Boot-Shiro-Vue：基于Spring Boot-Shiro-Vue 的权限管理 studentmanager：基于springboot+mybatis学生管理系统 jshERP：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。 HotelSystem：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架 开发平台 open-capacity-platform：微服务能力开发平台 jeecg-boot：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant Design\u0026Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！ 其他 学之思在线考试系统：一款 java + vue 的前后端分离的考试系统 PassJava-Platform：一款面试刷题的 Spring Cloud 开源系统 kkFileView：使用spring boot打造文件文档在线预览项目 dynamic-datasource：一个基于springboot的快速集成多数据源的启动器 moti-cloud：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者 threadandjuc：three-high-import 高可用\\高可靠\\高性能，三高多线程导入系统（该项目意义为理论贯通) proxyee-down：http下载工具，基于http代理，支持多连接分块下载 hosp_order：医院预约挂号系统，基于 SSM 框架 趋势投资 SpringCloud DiyTomcat ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:6:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 6：Java 高级 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 不满足于能做，而是通过更 深入 和 广泛 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"并发编程（21 天） 对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。 把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。 知识 线程和进程 线程状态 并行和并发 同步和异步 Synchronized Volatile 关键字 Lock 锁 死锁 可重入锁 线程安全 线程池 JUC 的使用 AQS Fork Join CAS 学习建议 并发编程入门不难，依然是 先学会使用 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。 资源 视频 ⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：https://www.bilibili.com/video/BV1Kw411Z7dF（特点是短、精、新） 黑马程序员全面深入学习Java并发编程：https://www.bilibili.com/video/BV16J411h7Rd（讲的很细、全面深入） 书籍 ⭐《Java并发编程实战》（国外的经典） ⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看） 项目 ⭐ Java 并发知识点总结：https://github.com/CL0610/Java-concurrency ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"JVM（30 天） 想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。 了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。 在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。 知识 JVM 内存结构 JVM 生命周期 主流虚拟机 Java 代码执行流程 类加载 类加载器 类加载过程 双亲委派机制 垃圾回收 垃圾回收器 垃圾回收策略 垃圾回收算法 StopTheWorld 字节码 内存分配和回收 JVM 性能调优 性能分析方法 常用工具 参数设置 学习建议 JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。 第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。 如果只是为了通过面试可以直接看更精简的视频，比如狂神的。 资源 视频 ⭐ 尚硅谷宋红康 - JVM 全套教程详解：https://www.bilibili.com/video/BV1PJ411n7xZ（讲得相当全面！附有实操） 【狂神说Java】JVM快速入门篇：https://www.bilibili.com/video/BV1iJ411d7jS（讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个） 书籍 ⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发） 项目 ⭐ Java 虚拟机底层原理知识总结：https://github.com/doocs/jvm 实战 阿里云 JVM 实战：https://developer.aliyun.com/graph/java/point/64 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"架构设计 分布式 分布式理论 CAP BASE 分布式缓存 Redis Memcached Etcd 一致性算法 Raft 一致性哈希 分布式事务 分布式 id 生成 分布式服务调用 分布式存储 分布式数据库 分布式文件系统 分布式协调 Zookeeper 分布式监控 Prometheus 分布式消息队列 RabbitMQ Kafka Apache Pulsar 分布式日志收集 Elastic Stack Loki 分布式搜索引擎 Elasticsearch 分布式链路追踪 Apache SkyWalking 分布式配置中心 Apollo Nacos 高可用 主从 异地多活 容灾备份 高并发 数据库 分库分表 读写分离 缓存 缓存雪崩 缓存击穿 缓存穿透 负载均衡 负载均衡算法 软硬件负载均衡（2、3、4、7 层） 其他 监控告警 领域驱动设计 应用安全 线上故障分析 服务网格 Serverless 云原生 学习建议 多看文章多思考 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:7:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 7：Java 求职 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 找到好工作 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"建议 尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求 雕琢一份优秀的简历，推荐阅读：https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA 多读面经，坚持刷算法 多参与面试，持续复盘总结 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"资源 岗位要求 阿里 Java 开发：https://campus.alibaba.com/position.htm?refno=12699 腾讯后台开发：https://join.qq.com/post_detail.html?pid=1\u0026id=101\u0026tid=2 腾讯全栈开发：https://join.qq.com/post_detail.html?pid=1\u0026id=137\u0026tid=2 腾讯运营开发：https://join.qq.com/post_detail.html?pid=1\u0026id=105\u0026tid=2 美团后端开发：https://campus.meituan.com/jobs?jobFamily=1\u0026jobId=4005\u0026jobType=1\u0026pageNo=2 华为软件开发：https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044 知识总结 ⭐ 牛客 Java 面试宝典：https://www.nowcoder.com/tutorial/94 ⭐ JavaGuide：https://snailclimb.gitee.io/javaguide/#/ ⭐ CS-Notes：http://www.cyc2018.xyz/ 阿里 Java 技术图谱：https://developer.aliyun.com/graph/java 面经 ⭐ 2021 最新 Java 笔试、面试题合集：https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ（密码：lkw1） ⭐ 牛客面经：https://www.nowcoder.com/discuss/experience?tagId=639 视频 ⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：https://www.bilibili.com/video/BV1Hy4y1B78T ⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：https://www.bilibili.com/video/BV1yU4y1J7Bb ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:8:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"阶段 8：持续学习 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"目标 持续追求技术的深度和广度，培养自己的 核心竞争力 和 不可替代性 ，学无止境！ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"学习建议 自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:2","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"学习方向 框架源码 Spring SpringBoot SpringMVC MyBatis Netty Dubbo SpringCloud 计算机原理 《算法导论》：https://www.bilibili.com/video/av48922404 《现代操作系统》：https://www.bilibili.com/video/av9555596 《深入理解计算机系统》：https://www.bilibili.com/video/av31289365 《编译原理》： https://www.bilibili.com/video/av17649289 《计算机网络：自顶向下方法》：https://www.bilibili.com/video/av41404195 《计算机程序的构造和解释》：https://www.bilibili.com/video/av8515129 《数据库系统概念》：https://www.bilibili.com/video/av52007695 数据库 / 中间件 / 分布式 数据库 MySQL PostgreSQL 缓存 Redis 队列 Apache Kafka Apache Pulsar 搜索引擎 Elastic Stack 容器 Docker K8S 解决方案 广告 电商 搜索 游戏 即时通讯 社交 CMS ERP OA 架构 亿级流量架构 秒杀系统 架构选型能力 大数据 5V 特点 Hadoop HDFS MapReduce Spark Flink Storm Hive HBase Druid Kylin Pig Mahout 前沿技术 云原生：https://www.jianshu.com/p/a37baa7c3eff Quasar Framework：http://www.quasarchs.com/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:3","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"自学 Java 专题资源 GitHub Java 专区：https://github.com/topics/java GitHub Java 合集：https://github.com/akullpp/awesome-java StackOverflow：https://stackoverflow.com/questions/tagged/java（解决问题必备） 掘金 Java 专区：https://juejin.cn/tag/Java 美团技术团队：https://tech.meituan.com/ 阿里技术团队：https://102.alibaba.com/tech/list/ 有赞技术团队：https://tech.youzan.com/tag/back-end/ ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:9:4","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"尾声 ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:10:0","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Java "],"content":"编程误区 我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己） 忽视基础，急于求成 ❌（勿以浮沙筑高台） 数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升） 编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行） 每行代码都要追求完美 ❌（何为完美？每个人的定义不同） 用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹） 我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长） 跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 \u003e 2，切勿闭门造车，不过也要找到合适的同学去交流） 做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？） 遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长） 遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》） 花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵） 只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的） 单元测试不重要 ❌（一棍打死） 写文档不重要 ❌（一棍打死） 和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野） 收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？） 不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考） 资料参照：程序员鱼皮 （原作者创作不易，转载请注明原创者，谢谢） ","date":"2022-08-13","objectID":"/blog/en/20220813_route/:10:1","tags":["java","study","Java学习路线"],"title":"Java 学习路线","uri":"/blog/en/20220813_route/"},{"categories":["Daily"],"content":"消去浮躁，沉淀精华.","date":"2022-08-07","objectID":"/blog/en/20220807/","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"去浮去燥，砥砺前行 ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:0","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"起因 回想起自己因为备考以及种种原因，已经将近一年没有真正自己独立开发代码了，会想之前手撕代码的日子还是很怀念的，虽让当时很累，天天能在电脑面前坐上个十几个小时（非卷王），但那时真的收获满满，心满意足😀，现在虽然已经成功上岸，但新的目标也随之而来，进入大厂，我深知进入大厂的难度，毕竟谁不想年入百万呢😁，今天我再次登陆我的GitHub时，看着当年满腔热血搭建的Blog，至今还没有发布任何像样文章，真是感慨万千，于是我今天又重新部署完成了我的Blog，以便记录自己的成长，完善自我，早日成为别人眼中的大牛🐮。 ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:1","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"计划 从现在开始，我要给自己制定相应日程目标，不能再每天只是娱乐至上了🙈 根据学习路线图查漏补缺（学习路线图后面会制作） 每天刷题，保持头脑（选择+编程） 遇到经常犯的错误或难题解决后，通过Blog记录下来，以便自己温习 每天空闲时间看看大牛技术分享以及分享的面经 ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:2","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Daily"],"content":"总结 虽然不知道后面会继续到哪里，但总算迈出了今天的第一步，后面我也会继续努力，朝着自己预期的目标拼劲全力，加油阿豪，未来可期！ ","date":"2022-08-07","objectID":"/blog/en/20220807/:0:3","tags":["daily","study"],"title":"决定重新回归","uri":"/blog/en/20220807/"},{"categories":["Hugo"],"content":"Guide to emoji usage in Hugo and LoveIt.","date":"2019-10-01","objectID":"/blog/en/emoji/","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Emoji can be enabled in a Hugo project in a number of ways. The emojify function can be called directly in templates or Inline Shortcodes. To enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files. These begin and end with a colon and include the code of an emoji: Gone camping! :tent: Be back soon. That is so funny! :joy: The rendered output looks like this: Gone camping! ⛺ Be back soon. That is so funny! 😂 The following cheat sheet is a useful reference for emoji shorthand codes. ","date":"2019-10-01","objectID":"/blog/en/emoji/:0:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Smileys \u0026 Emotion ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Smiling icon code icon code 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Affection icon code icon code 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Tongue icon code icon code 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Hand icon code icon code 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Neutral Skeptical icon code icon code 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Sleepy icon code icon code 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Unwell icon code icon code 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Hat icon code icon code 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Glasses icon code icon code 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Concerned icon code icon code 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Negative icon code icon code 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Face Costume icon code icon code 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Cat Face icon code icon code 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Monkey Face icon code icon code 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:14","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Emotion icon code icon code 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/blog/en/emoji/:1:15","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"People \u0026 Body ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Fingers Open icon code icon code 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Fingers Partial icon code icon code 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Single Finger icon code icon code 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Fingers Closed icon code icon code 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hands icon code icon code 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hand Prop icon code icon code ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Body Parts icon code icon code 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person icon code icon code 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Gesture icon code icon code 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇 bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Role icon code icon code 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Fantasy icon code icon code 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Activity icon code icon code 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Sport icon code icon code 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Resting icon code icon code 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:14","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Family icon code icon code 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 💑 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:15","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Person Symbol icon code icon code 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/blog/en/emoji/:2:16","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animals \u0026 Nature ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Mammal icon code icon code 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Bird icon code icon code 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Amphibian icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Reptile icon code icon code 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Marine icon code icon code 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Animal Bug icon code icon code 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Plant Flower icon code icon code 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Plant Other icon code icon code 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/blog/en/emoji/:3:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food \u0026 Drink ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Fruit icon code icon code 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Vegetable icon code icon code 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Prepared icon code icon code 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Asian icon code icon code 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Marine icon code icon code 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Food Sweet icon code icon code 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Drink icon code icon code 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Dishware icon code icon code 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/blog/en/emoji/:4:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Travel \u0026 Places ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Map icon code icon code 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Geographic icon code icon code 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Building icon code icon code 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Religious icon code icon code ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Place Other icon code icon code ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Ground icon code icon code 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Water icon code icon code ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Air icon code icon code ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Hotel icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Time icon code icon code ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Sky \u0026 Weather icon code icon code 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/blog/en/emoji/:5:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Activities ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Event icon code icon code 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Award Medal icon code icon code 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Sport icon code icon code ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Game icon code icon code 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Arts \u0026 Crafts icon code icon code 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/blog/en/emoji/:6:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Objects ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Clothing icon code icon code 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Sound icon code icon code 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Music icon code icon code 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Musical Instrument icon code icon code 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Phone icon code icon code 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Computer icon code icon code 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Light \u0026 Video icon code icon code 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Book Paper icon code icon code 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Money icon code icon code 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Mail icon code icon code ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Writing icon code icon code ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Office icon code icon code 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Lock icon code icon code 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Tool icon code icon code 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:14","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Science icon code icon code ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:15","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Medical icon code icon code 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:16","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Household icon code icon code 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:17","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Other Object icon code icon code 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/blog/en/emoji/:7:18","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Symbols ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Transport Sign icon code icon code 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Warning icon code icon code ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Arrow icon code icon code ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:3","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Religion icon code icon code 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:4","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Zodiac icon code icon code ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:5","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Av Symbol icon code icon code 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:6","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Math icon code icon code ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:7","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Punctuation icon code icon code ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:8","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Currency icon code icon code 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:9","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Keycap icon code icon code #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:10","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Alphabet icon code icon code 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:11","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Geometric icon code icon code 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:12","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Other Symbol icon code icon code ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/blog/en/emoji/:8:13","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Flags ","date":"2019-10-01","objectID":"/blog/en/emoji/:9:0","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Common Flags icon code icon code 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/blog/en/emoji/:9:1","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"},{"categories":["Hugo"],"content":"Country and Region Flags icon code icon code 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/blog/en/emoji/:9:2","tags":["emoji"],"title":"Emoji Support","uri":"/blog/en/emoji/"}]